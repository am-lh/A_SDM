---
title: "MELTING POTES"
author: "Am√©lie Lehuen"
date: "`r format(Sys.time(), '%B %Y')`"
description: "Task A : SDM-NEO Data analysis"
toc: true # table of content at beginning of document
number-sections: true
highlight-style: pygments
format: 
  html: 
    self-contained: true
    code-fold: false
    html-math-method: katex # displays equations
  pdf:
    code-line-numbers: true
    geometry: 
      - top=20mm
      - left=20mm
  docx: 
    reference-doc: customreference_nonb.docx

bibliography: references.bib
knitr:
  opts_knit:
    root.dir: "../Resultats/"
    
editor: visual
execute:
  eval: true
  echo: false
  message: false
  warning: false
  output: true
  include: false
  cache: false
---

```{r}
#| label: load-packages
#| code-summary: "Packages"

library(readxl) ; library(openxlsx); 
library(beepr); library(clipr) # Edition d'un fichier Excel
library(tidyverse); #The toolbox indispensable 
library(broom); library(purrr) # tidy,glance,augment
library(patchwork)
library(scales) ; library(grafify) ; library(ggthemes) # show_col & viridis ; colorblind palettes ; scale_color_colorblind (8)
library(RColorBrewer) ; library(colorspace); library(ggsci) ; library(wesanderson) # Palettes; hcl_palettes; id; 
library(ggpubr);library(gridExtra) ; library(grid) # Mozaic of graphs tools
library(lubridate)
library(rstatix)
library(Hmisc)  # corr and pvalue calculation
# SIG
library(sf); library(sfheaders)
library(rnaturalearth); # library(raster)
library(tmap); library(tmaptools) # tmap_mode; for static and interactive maps

library(knitr)
```

```{r}
#| label: workenvir

rm(list=ls())
# tsk <- "A_SDM_NEO/"
wdtask <- "../" #paste(pc,"Melting Pot/BDD/",tsk,sep="")
wdsource <- paste(wdtask,"Sources/Faune/CSLN/",sep="")
wdwork <- paste(wdtask,"Matrices/",sep="")
wdgraph <- paste(wdtask,"Graphiques/",sep="")
wdres <- paste(wdtask,"Resultats/",sep="")

pc <- "C:/Users/lehuen201/Nextcloud/" # "E:/" #
wdGIS <- paste(pc,"Melting Pot/SIG/",sep="");
wdscript <- paste(pc,"Melting Pot/BDD/Scripts/",sep="")
wdmsr <- (paste(wdscript,"MSR/MSR.R",sep=""))
# setwd("./")
```

```{r}
#| label: graphchart

theme_set(theme_bw(base_size = 16)) # theme_gray() theme_bw() theme_light() theme_dark()
colDarj <- function(x) {wes_palette("Darjeeling2",x, type = "continuous")}
colZiss <- function(x) {wes_palette("Zissou1",x, type = "continuous")}
colSpec <- colorRampPalette(brewer.pal(8, "Spectral")); 
colDark <- colorRampPalette(brewer.pal(8, "Dark2"));
Scale_col <- function(x) {scale_colour_manual(values=colDarj(x))}
Scale_fill <- function(x) {scale_fill_manual(values=colDarj(x))}
Scale_brew <- function() {scale_colour_brewer(palette="Spectral",aesthetics=c("colour","fill"))}
```

```{r}
#| label: func

loadRData <- function(fileName){
#loads an RData file, and returns it
    load(fileName)
    mget(ls()[ls() != "fileName"])
}

# Function for corr ad pvalue table x is a matrix containing the data
# method : correlation method. "pearson"" or "spearman"" is supported
# removeTriangle : remove upper or lower triangle
# results :  if "html" or "latex"
# the results will be displayed in html or latex format
corstars <-function(x, method=c("pearson", "spearman"), 
                    removeTriangle=c("upper", "lower"),
                     result=c("none", "html", "latex")){
    #Compute correlation matrix
    require(Hmisc)
    x <- as.matrix(x)
    correlation_matrix<-rcorr(x, type=method[1])
    R <- correlation_matrix$r # Matrix of correlation coeficients
    p <- correlation_matrix$P # Matrix of p-value 
    
    ## Define notions for significance levels; spacing is important.
    mystars <- ifelse(p < .0001, "****", 
                      ifelse(p < .001, "***", 
                             ifelse(p < .01, "**", 
                                    ifelse(p < .05, "*", " "))))
    
    ## trunctuate the correlation matrix to two decimal
    R <- format(round(cbind(rep(-1.11, ncol(x)), R), 2))[,-1]
    
    ## build a new matrix that includes the correlations with their apropriate stars
    Rnew <- matrix(paste(R, mystars, sep=""), ncol=ncol(x))
    diag(Rnew) <- paste(diag(R), " ", sep="")
    rownames(Rnew) <- colnames(x)
    colnames(Rnew) <- paste(colnames(x), "", sep="")
    
    ## remove upper/lower triangle of correlation matrix
    if(removeTriangle[1]=="upper"){
      Rnew <- as.matrix(Rnew)
      Rnew[upper.tri(Rnew, diag = TRUE)] <- ""
    }
    else if(removeTriangle[1]=="lower"){
      Rnew <- as.matrix(Rnew)
      Rnew[lower.tri(Rnew, diag = TRUE)] <- ""
    }
    
    ## remove last column and return the correlation matrix
    Rnew <- as.data.frame(Rnew)
    Rnew <- cbind(Rnew[1:length(Rnew)-1])
    if (result[1]=="none") return(Rnew)
    else{
      if(result[1]=="html") print(xtable(Rnew), type="html")
      else print(xtable(Rnew), type="latex") 
    }
} 
```

```{r}
#| label: externdata

rdatain  <- sprintf("%sCSLN_Mars_RQ_BDD.RData",wdwork)
# load(rdatain)
rqdata<-loadRData(rdatain)
rdatain  <- sprintf("%sCSLN_Mars_nlRQ_BDD.RData",wdwork)
# load(rdatain)
nlrqdata<-loadRData(rdatain)
rdatain  <- sprintf("%sCSLN_Mars_RQbs_BDD.RData",wdwork)
# load(rdatain)
rqbsdata<-loadRData(rdatain)
rdatain  <- sprintf("%sCSLN_Mars_BDD.RData",wdwork)
load(rdatain)

```

```{r}
#| label: outfiles

```

```{r}
#| label: basicvar

etude <- "CSLN_Mars"
espece <- "CERED"

```

# Dataset description for M&M

All data treatment has been conducted with `r R.version.string` except for MARS3D pre-treatment on Matlab 2019a. Significance levels are tagged for p \< .0001 with "\*\*\*\*", p \< .001 with "\*\*\*", p \< .01 with "\*\*", p \< .05 with "\*".

## Areas map

<!-- ::: {.content-visible unless-format="html"} -->

The Seine estuary has been studied regarding several historically known areas that have either habitat or communities differences. These areas are mainly mudflats and subtidal areas, are represented in @fig-map.

```{r}
#| label: fig-map
#| include: true
#| fig-cap: "Maps of habitats areas defined for the study"

# Base of bounding boxes
boxMP<-c(xmin=-0.1, ymin=49.3, xmax=0.45, ymax=49.65)
boxchannel<-c(xmin=-2.5, ymin=49.0, xmax=1.5, ymax=51.0)

bay <- ne_states(country = c("France","united kingdom"), 
                 returnclass = "sf") %>%
  st_crop(boxchannel)
bbbay<-bb(bay)

df <- ES_Areas %>% 
  dplyr::filter(!Zone  %in% c("Bay", "Ilot Oiseaux")) %>%
  st_transform(4326)

osm_df <- read_osm(df, ext=1.1)

boxestuary<-bb(df)
tm_bay<-
  tm_shape(bay) + 
    tm_fill(col="grey30") +
  tm_shape(st_as_sfc(boxestuary)) + 
    tm_borders("red", lwd = 2) +
  tm_layout(bg.color = "skyblue")

tmap_mode("plot") # "plot" "view"
tm_Bio<-
  # tm_shape(estuary, bbox = boxestuary) + 
  #   tm_polygons() +
  tm_shape(osm_df) +  
    tm_rgb() +
  tm_shape(df) +  
    tm_fill(col = "Zone", palette = "Accent", alpha = 0.7) +
    # tm_text("Zone", size = .8, col= "black") +
    tm_borders("grey", lwd = 1) +
  tm_shape(CSLN_sf) +
    tm_dots(col="grey30",size=0.001, alpha = 0.5) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), width = 0.15) + #SCALE
  tm_compass(position = c("RIGHT", "BOTTOM"), size = 3) +          #NORTH COMPASS
  tm_layout(legend.position= c("LEFT","TOP"))
tm_Bio

vp <- grid::viewport(0.985, 0.995, width = 0.25, just=c("right", "top"))
print(tm_bay, vp = vp)
tmap_save(tm_Bio,filename="../Graphiques/Estuary_map_with_inset.png",
          insets_tm=tm_bay, insets_vp=vp,
          dpi=600,
          height=10, units="cm")

```

<!-- ::: -->

<!-- # ::: {.content-visible when-format="html"} -->

<!-- The Seine estuary has been studied regarding several historically known areas that have either habitat or communities differences. These areas are mainly mudflats and subtidal areas, are represented in @fig-map_htlm. -->

<!-- ```{r} -->

<!-- #| label: fig-map_html -->

<!-- #| include: true -->

<!-- #| fig-cap: "Maps of habitats areas defined for the study" -->

<!-- tmap_mode("view") # "plot" "view" -->

<!-- tm_Bio<- -->

<!--   tm_basemap(leaflet::providers$OpenStreetMap.HOT) + # OpenStreetMap.HOT .Mapnik .France - Stamen.Watercolor #https://leaflet-extras.github.io/leaflet-providers/preview/ -->

<!--   tm_shape(df) + -->

<!--   tm_fill(col = "Zone", palette = "Accent", alpha = 0.7) + -->

<!--   tm_borders("grey", lwd = 1) + -->

<!--   tm_shape(df_stations) + -->

<!--   tm_dots(col="grey30",size=0.001, alpha = 0.5) + -->

<!--   tm_layout(legend.outside = TRUE) -->

<!-- # tmlf_Bio<-tmap_leaflet(tm_Bio) # conversion to leaflet object, quicker?? -->

<!-- tm_Bio -->

<!-- tmap_save(tm_Bio, filename = "Estuary_map.html") -->

<!-- ``` -->

<!-- ::: -->

## Biologic dataset

```{r}
#| label: biostats_1

rawnb <-count(CSLN_raw) %>%
  pull() %>% 
  formatC(., format="f", big.mark=",", digits=0)
cleannb <-count(CSLN) %>% 
  pull() %>% 
  formatC(., format="f", big.mark=",", digits=0)
yearsrange <- CSLN %>% 
  mutate(Annee = as.numeric(levels(Annee))[Annee]) %>% # reconvert factors
  arrange(Annee) %>% 
  slice(c(1,n())) %>% 
  pull(Annee) %>%
  paste(collapse = " to ")
moisyear <- CSLN %>% group_by(Annee,Station_originelle) %>% 
  summarise(nbcamp=n_distinct(Mois)) %>% 
  group_by(nbcamp) %>%
  summarise(nbstat=n_distinct(Station_originelle)) %>% 
  arrange(desc(nbstat)) %>%
  slice(1:2) %>% #slice(c(1,n())) %>%
  pull(nbcamp) %>%
  paste(collapse = " to ")
nbstattot <- CSLN %>% 
  summarise(n_distinct(Station_originelle)) %>% 
  pull()
nbstatyr <- CSLN %>% group_by(Annee) %>% 
  summarise(nbstat=n_distinct(Station_originelle)) %>%
  summarise(nbstat=round(mean(nbstat),0)) %>% 
  pull()
period <- CSLN %>% group_by(Mois) %>% 
  mutate(Mois = month.abb[as.numeric(levels(Mois))[Mois]]) %>%
  summarise(nbstat=n_distinct(Station_originelle)) %>%
  arrange(desc(nbstat)) %>% 
  slice(1:3) %>% 
  pull(Mois) %>% 
  paste(collapse = ", ")
recbef2000 <- CSLN_Mars %>% 
  filter(!Zone  %in% c("Channel","Bay")) %>% # at minimum
  filter(Period == "1996-1999") %>%
  filter(!SPCourt %in% c("SEMBA","AMPIM","AUSMO",
                         "BALCR","MYTED","BIVAL","ANNEL")) %>%
  # filter(SPCourt %in% c(espece)) %>% 
  # summarise(n_distinct(idStationUnique)) %>% 
  count() %>% 
  pull()
richspe <- CSLN %>% 
  summarise(nbstat=n_distinct(Taxon_SNa)) %>% 
  pull()
cerednb <- CSLN %>%
  filter(SPCourt %in% c(espece)) %>% 
  summarise(nbstat=n_distinct(idStationUnique)) %>% 
  pull()
cereddetzon <- CSLN %>% 
  filter(SPCourt %in% c(espece)) %>% 
  group_by(Zone) %>% 
  summarise(nbstat=n_distinct(idStationUnique)) %>% 
  unite(Zonenb,Zone,nbstat,sep=" (n= ") %>% 
  pull() %>% 
  paste(collapse = "), ")

```

The raw data (n= `r rawnb`) has been harmonised and grouped to obtain a single database of `r cleannb` observations, and `r nbstattot` sampling stations in total (with some variation in coordinates from year to year), with an average of `r nbstatyr` stations per campaign, occurred mainly in the months of `r period`. Along the all period covered by the dataset, from `r yearsrange`, discarding before 2000 (too few observations n=`r recbef2000`), with `r moisyear` sampling campaigns per year, a series of 5-years periods has been defined, 2000-2005 the building of 'Port 2000' with high disruption in the estuary area; 2006-2010; 2011-2015; 2016-2019. `r richspe` different species has been founded, and *C. edule* counts `r cerednb` observations. Focus for following treatment is made on mudflats only for their biologic relevance for *C. edule* (`r cereddetzon`)).

## Cerastoderma edule data structure

```{r}
#| label: prefig-cered_struc
y_lab <- "Biomass (gAFDW/m2)" # "MSR (mW/m2)"
CSLN_df <- CSLN %>%
  filter(grepl("Mudflat", Zone)) %>% # focus on mudflat only
  filter(SPCourt %in% c(espece)) %>%
  filter(!is.na(Biomass_gAFDWm2)) %>%
  mutate(across(where(is.factor), fct_drop)) %>% # recode factors when filter has remove levels
  group_by(idStationUnique,Zone,Tidal_level,Period,Annee) %>% 
  summarise(iZTPAS = sum(Biomass_gAFDWm2, na.rm =TRUE)) %>% 
  group_by(Zone,Period,Tidal_level,Annee) %>% #,Season
  summarise(ZTPAS = mean(iZTPAS, na.rm =TRUE)) %>% 
  mutate(Period=factor(Period, 
                      labels = str_replace_all(unique(Period),"-"," - ")))

cereddetper <- CSLN %>% 
  filter(SPCourt %in% c(espece)) %>% 
  group_by(Period) %>% 
  summarise(nbstat=n_distinct(idStationUnique)) %>% 
  unite(Periodnb,Period,nbstat,sep=" (n= ") %>% 
  pull() %>% 
  paste(collapse = "), ")

stat.test <- CSLN_df %>% 
  group_by(Zone) %>% 
  wilcox_test(ZTPAS ~ Period) %>% 
  add_xy_position(x = "Period",group = "Zone",
                  dodge = 0,step.increase = 0.05) %>%
  filter(p.adj.signif!="ns")
gpA <- ggplot(CSLN_df) + 
  geom_boxplot(aes(x=Period, y = ZTPAS, fill = Period)) + 
  facet_grid(. ~ Zone, 
             scales = "free_y",
             labeller = label_wrap_gen(width = 10)) + 
  labs(y = y_lab, x="") +
  stat_pvalue_manual(stat.test,label = "p.adj.signif", tip.length = 0.02) +
  Scale_brew() +
  # guides(fill=guide_legend(nrow=2,byrow=TRUE)) +
  theme(legend.position="bottom",
    axis.text.x = element_blank(), axis.ticks = element_blank())
print(gpA)

stat.test <- CSLN_df %>% 
  group_by(Period) %>%
  wilcox_test(ZTPAS ~ Zone) %>% 
  add_xy_position(x = "Zone",group = "Period",
                  dodge = 0,step.increase = 0.05) %>%
  filter(p.adj.signif!="ns")

gpB <- ggplot(CSLN_df) + 
  geom_boxplot(aes(x=Zone, y = ZTPAS, fill = Zone)) + 
  facet_grid(. ~ Period, 
             scales = "free_y",
             labeller = label_wrap_gen(width = 10)) + 
  labs(y = y_lab, x="") +
  stat_pvalue_manual(stat.test,label = "p.adj.signif", tip.length = 0.02) +
  Scale_brew() +
  guides(fill=guide_legend(nrow=2,byrow=TRUE)) +
  theme(legend.position="bottom",
    axis.text.x = element_blank(), axis.ticks = element_blank())
print(gpB)

titre <- paste("C. edule population in Seine estuary",sep="")
bp <- ggarrange(gpA,gpB, ncol=1, nrow=2, 
                labels="AUTO", legend="bottom", 
                common.legend = FALSE)
bp <- annotate_figure(bp,top = text_grob(titre, face = "bold", size = 14)) + #,bottom="Period"
      bgcolor("white")

# ggsave(sprintf("%s%s %s.tiff",wdgraph,etude,titre), 
#        plot = bp, width = 10, height = 8, dpi=600)
```

With a closer look on the data for *C. edule*, it is represented in @fig-cered_struc the differences of biomass \[gAFDW/m¬≤\] regarding periods and areas. The observations are split into periods as `r cereddetper`). They are seldom in North Upstream Mudflat, where the water are more brackish.

```{r}
#| label: fig-cered_struc
#| include: true
#| fig-cap: "C. edule population biomass [gAFDW/m¬≤] in the Seine estuary, by Period for eahc areas (A) and by areas for each Period (B) with significant differences"
#| fig-width: 6
#| fig-height: 8
print(bp + 
        theme(text = element_text(size = 12)))

```

## Abiotic dataset

```{r}
#| label: abiostats_1

marsweb <- Mars_csv %>% 
  summarise(nbstat=n_distinct(NINJ)) %>% 
  pull() %>% 
  formatC(., format="f", big.mark=",", digits=0)
marsxy <- Mars_csv %>% select(NINJ) %>% 
  separate(NINJ, c("Y", "X"),sep="_") %>%
  mutate(X=as.numeric(X), Y=as.numeric(Y)) %>% 
  summarise(across(.cols=everything(),~(max(.x)-min(.x)))) %>% # sapply(., max)
  unite(fus,Y,X,sep=" by ") %>%
  pull(fus)
marslonlat <- Mars_csv %>% 
  select(Lon,Lat) %>%
  summarise(across(.cols=everything(),
                   ~(sprintf("%g to %g",
                             round(min(.x),4),
                             round(max(.x),4))))) %>%
  unite(fus,Lon,Lat,sep=" and Latitude ") %>%
  pull(fus)
  
marsmaillenb <-CSLN_Mars %>% 
  select(NINJ) %>% 
  drop_na() %>% 
  summarise(nbstat=n_distinct(NINJ)) %>% 
  pull() %>% 
  formatC(., format="f", big.mark=",", digits=0)
marsmailledet <- CSLN_Mars %>% 
  select(NINJ,Tidal_level) %>% 
  drop_na() %>% 
  group_by(Tidal_level) %>% 
  summarise(nbstat=n_distinct(NINJ)) %>% 
  unite(Tidalnb,Tidal_level,nbstat,sep=" (n= ") %>% 
  pull() %>% 
  paste(collapse = "), ")
```

All Seine Bay MARS3D model is calculated in a grid of `r formatC(700*112, format="f", big.mark=",", digits=0)` mesh (700 by 112), focused on the Seine Estuary with a grid of 'only' `r marsweb` mesh (`r marsxy`), with the coordinates of Longitude `r marslonlat`. Mars mesh corresponding to the stations localisation in the biologic dataset are at total `r marsmaillenb` with the distinction in the position in the tidal area as `r marsmailledet`).

```{r}
#| label: globcorr

df <- CSLN_mud %>% 
  filter(SPCourt == speciesMP$SPCourt[sp]) %>%
  select(paste(predict[,1],saison[sa,1],sep=""),reponse[1:2,1])
# colnames(df)<-c(predict[,2],reponse[,2])
dfcornew <- corstars(df, result="none",removeTriangle="") %>% 
  mutate(variable=rownames(.)) %>% 
  relocate(variable)
# dftest<-dfcornew %>% mutate(across(.cols = everything(), str_replace_all, ".*\\s", ""))

```

All variables have been observed and a correlation study has been conducted to select the more pertinent factors and avoid autocorrelation between factors.

-   **Mud content** is chosen over Sediment total conc to link with other references (Corr = `r dfcornew %>% filter(variable %in% "mudrate_m") %>% select(Csed_m) %>% pull()`).
-   **Current Speed daily max** is chosen over Current_Speed to reflect hydrodynamics occurring on mudflats (Corr = `r dfcornew %>% filter(variable %in% "flow_mxd") %>% select(flow_m) %>% pull()`).
-   **Inundation time** is chosen rather than True bathymetry, to be more informative on tidal position (Corr = `r dfcornew %>% filter(variable %in% "bathy") %>% select(inunt) %>% pull()`).
-   **Salinity daily range** is preferred to Salinity to emphasize more the tidal influence (Corr = `r dfcornew %>% filter(variable %in% "sal_dtd") %>% select(sal_m) %>% pull()`).
-   **Temperature** is picked upon Temperature daily range for its accessibility (Corr = `r dfcornew %>% filter(variable %in% "temp_dtd") %>% select(temp_m) %>% pull()`) and the range being reflected by the Inundation time (Corr = `r dfcornew %>% filter(variable %in% "temp_dtd") %>% select(inunt) %>% pull()`).
-   **Bed shear stress** is preferred to MES mud to focus on erosion phenomena more than MTZ processes (Corr = `r dfcornew %>% filter(variable %in% "MESmud_m") %>% select(tenfon_m) %>% pull()`).
-   **Bed shear stress** is poorly correlated to Bed shear stress daily max (Corr = `r dfcornew %>% filter(variable %in% "tenfon_mxd") %>% select(tenfon_m) %>% pull()`) but the latter is not kept for its difficulty to get that kind of measurement.
-   Yearly sediment budget is not correlated to any other variable but its distribution makes it not relevant.

Models are built with two abiotic factors to increase their reliability. The couples tested are:

1.  Current Speed daily max and Inundation time : to compare results with [@cozzoli2014], and these variables are easily retrieved with some high frequency measurement (COASTHF) . They have also a interest because they contains information on the position in the tidal area that could evolve with sea level rise and the hydrological conditions impact by the river flowrate change due to climate change even though they have a significant correlation (Corr = `r dfcornew %>% filter(variable %in% "flow_mxd") %>% select(inunt) %>% pull()`)

2.  Mud content and Bed shear stress: Those variables are determinant in a building of an erosion model such as MARS3D (Corr = `r dfcornew %>% filter(variable %in% "mudrate_m") %>% select(tenfon_m) %>% pull()`).

3.  Temperature and Salinity daily range: These factors are easily measurable on high frequency also (Somlit). They are both bearing the climate change for the global temperature change and the evolution of the river regime that would impact the salinity profile of the estuary (Corr = `r dfcornew %>% filter(variable %in% "temp_m") %>% select(sal_dtd) %>% pull()`).

4.  Temperature and Inundation time : (Corr = `r dfcornew %>% filter(variable %in% "temp_m") %>% select(inunt) %>% pull()`).

# Results

```{r}
#| label: sdmchoices
sp <- 1
sa <- 1
# rep <- 1

sdmname<- matrix(nrow = 4,ncol = 2)
for (repi in 1:2){
  sdmname[1,repi]<-sprintf("%g%g%g%g%g",sp,sa,repi,
                    which(pred_red$Var %in% c("flow_mxd")),
                    which(pred_red$Var %in% c("inunt")))
  sdmname[2,repi]<-sprintf("%g%g%g%g%g",sp,sa,repi,
                    which(pred_red$Var %in% c("mudrate_m")),
                    which(pred_red$Var %in% c("tenfon_mxd")))
  sdmname[3,repi]<-sprintf("%g%g%g%g%g",sp,sa,repi,
                    which(pred_red$Var %in% c("sal_dtd")),
                    which(pred_red$Var %in% c("temp_m")))
  sdmname[4,repi]<-sprintf("%g%g%g%g%g",sp,sa,repi,
                    which(pred_red$Var %in% c("inunt")),
                    which(pred_red$Var %in% c("temp_m")))
}
t <- which(taus %in% c(0.975))  # c(0.5,0.9,0.95,0.975)

```

## SDM-NEO : Comparison of linear and nonlinear QR

```{r}
#| label: graphrq
#| output: false
# Linear RQ Graphics generation
analysis <- "RQ Linear"
rqname<- matrix(paste0("RQ2int_",sdmname),nrow=4,ncol=2)

plot_rq <- list()  
for (repi in 1:2) {
  tmp<-list()
  for (sdi in 1:nrow(sdmname)) { # sdi=1
    sp_i<-as.numeric(substr(sdmname[sdi,repi],1,1))
    sa_i<-as.numeric(substr(sdmname[sdi,repi],2,2))
    rep_i<-as.numeric(substr(sdmname[sdi,repi],3,3))
    k_i<-as.numeric(substr(sdmname[sdi,repi],4,4))
    k2_i<-as.numeric(substr(sdmname[sdi,repi],5,5))
    
    yt = reponse[rep_i,1]
    yl = sprintf("%s (%s)",reponse[rep_i,2],reponse[rep_i,3])
    zt = "Zone"
    x1t = sprintf("%s%s",pred_red[k_i,1],saison[sa_i,1])
    x1l = sprintf("%s%s (%s)",pred_red[k_i,2],saison[sa_i,1],pred_red[k_i,3])
    x2t = sprintf("%s%s",pred_red[k2_i,1],saison[sa_i,1])
    x2l = sprintf("%s%s (%s)",pred_red[k2_i,2],saison[sa_i,1],pred_red[k2_i,3])
    
    
    modelq <- modelq_rq_list[rqname[sdi,repi]]
    RqMod_mat <- RqMod_rq_list[[rqname[sdi,repi]]] %>% 
      filter(tau==taus[t])
    smrq <- smrq_t_rq_list[[rqname[sdi,repi]]] %>% 
      filter(tau==taus[t])
    rqlim <- rqlim_t_rq_list[[rqname[sdi,repi]]] %>% 
      filter(tau==taus[t]) %>% 
      select(RqLim)
    rqsup <- rqsup_t_rq_list[[rqname[sdi,repi]]] %>% 
      filter(tau==taus[t])
    rqinf <- rqinf_t_rq_list[[rqname[sdi,repi]]] %>% 
      filter(tau==taus[t])
    
    titleG <- sprintf("%s (t=%g) %s in %s",analysis,taus[t],
                      speciesMP$Taxon_SNa[sp],saison[sa,2])
    subtitleG <- sprintf("SDM-NEO %s",reponse[rep,3])
    capt = sprintf("AIC = %g", smrq$AIC)
    
    # 2D static graphic : RASTER
    tmp[[sdi]] <- ggplot(RqMod_mat) +
      geom_raster(aes(x = x1, y = x2, fill = RqMod),alpha=0.7) + 
      geom_point(data=rqinf,aes(x=x1, y=x2), 
                 shape=21, size=1, color=colInliers, 
                 fill=colInliers, alpha=.5, na.rm = TRUE) +
      geom_point(data=rqsup,aes(x=x1, y=x2), 
                 shape=23, size=1, color=colOutliers, 
                 fill=colOutliers, alpha=.5, na.rm = TRUE) +
      labs(x=x1l, y=x2l,
        # title=titleG, 
        # subtitle=subtitleG,
        caption = capt,
        fill = NULL # paste("SDM-NEO\n",reponse[rep,3],sep="")
        ) +
      guides(alpha = "none") +
      Scalf_rq2d() +
      # facet_wrap(taust ~ .) + 
      # coord_fixed(max(RqMod_mat$x1)/max(RqMod_mat$x2)) +
      theme(text = element_text(size = 12))
    print(tmp[[sdi]])
    plot_rq[[repi]]<-tmp
    
    
        x1mod <- seq(min(x1),max(x1),length.out=graphfine)
    x2mod <- seq(min(x2),max(x2),length.out=graphfine)
    x1x2mod <- data.frame(cbind(x1mod,x2mod)) %>% rename(x1=x1mod,x2=x2mod)
    gridx1x2 <- expand.grid(x1mod,x2mod) %>% rename(x1=Var1,x2=Var2)
    gridx1x2mat <- mesh(x1mod,x2mod)

    
    myscene<-list(camera = list(eye = list(x = -1.5, y = 1.5, z = 0.3)), 
                  aspectmode='cube',
                  xaxis = list(title = x1l), yaxis = list(title = x2l), zaxis = list(title = yl))

    dp3d <- plot_ly(showlegend=F, scene=paste("scene",repi,sep="")) %>%
      add_surface(x = gridx1x2mat[["x"]], 
                  y = gridx1x2mat[["y"]],
                  z = RqMod_mat,
                  opacity = 0.9, colorscale = list(c(0,1),c(blank,colRQ[t])),
                  colorbar=list(title=list(text=paste("SDM-NEO\n",reponse[repi,3],"\nTau=",taus[t],sep="")))) %>%
      add_trace(x = rqsup$x1, 
                y = rqsup$x2, 
                z = rqsup$y, 
                mode = "markers", type = "scatter3d",
                marker = list(size = 2, color = colOutliers, opacity = 0.5, symbol = "diamond")) %>%
      add_trace(x = rqinf$x1, 
                y = rqinf$x2, 
                z = rqinf$y, 
                mode = "markers", type = "scatter3d",
                marker = list(size = 2, color = colInliers, opacity = 0.5, symbol = "circle")) %>%
      layout(title = titleG, scene = myscene)
    dp3d
plot_dp3dlist[[length(plot_dp3dlist)+1]] <- dp3d
# saveWidget(dp3d, sprintf("%s%s/%s/%s_%s_RQ2int3d_%s_%s_%s_%s_%s.html",
#                          wdgraphEx,speciesMP$SPCourt[sp],analysis,etude,speciesMP$SPCourt[sp],
#                          saison[sa,2],yt,x1t,x2t,taus[t]),
#            selfcontained = F, libdir = "lib")
    
    
  }
  
  plot_rq_t <- ggarrange(plotlist = plot_rq[[repi]], 
                         ncol=1, nrow=length(plot_rq[[repi]]),
                         labels="AUTO",legend="right",
                         common.legend = FALSE)
  plot_rq_t <- annotate_figure(plot_rq_t,
                        top = text_grob(analysis)) +
        bgcolor("white")
  # print(plot_rq_t)
# ggsave(sprintf("%s%s/%s/%s_%s_%s_%s.tiff",
#                wdgraph,speciesMP$SPCourt[sp],analysis,
#                etude,speciesMP$SPCourt[sp],
#                saison[sa,2],taus[t]),
#        plot = plot_rq_t, width = 4, height = 12, dpi=600)
}

```

```{r}
#| label: graphnlrq
#| output: false
# Nonlinear RQ Graphics generation
analysis <- "RQ Nonlinear"
nlrq2name<- matrix(paste0("nlRQ2_",sdmname),nrow=4,ncol=2)

plot_nlrq <- list()
for (repi in 1:2){
  tmp <- list()
  for (sdi in 1:nrow(sdmname)) { # sdi=1
    sp_i<-as.numeric(substr(sdmname[sdi,repi],1,1))
    sa_i<-as.numeric(substr(sdmname[sdi,repi],2,2))
    rep_i<-as.numeric(substr(sdmname[sdi,repi],3,3))
    k_i<-as.numeric(substr(sdmname[sdi,repi],4,4))
    k2_i<-as.numeric(substr(sdmname[sdi,repi],5,5))
    
    yt = reponse[rep_i,1]
    yl = sprintf("%s (%s)",reponse[rep_i,2],reponse[rep_i,3])
    zt = "Zone"
    x1t = sprintf("%s%s",pred_red[k_i,1],saison[sa_i,1])
    x1l = sprintf("%s%s (%s)",pred_red[k_i,2],saison[sa_i,1],pred_red[k_i,3])
    x2t = sprintf("%s%s",pred_red[k2_i,1],saison[sa_i,1])
    x2l = sprintf("%s%s (%s)",pred_red[k2_i,2],saison[sa_i,1],pred_red[k2_i,3])
    
    
    modelq <- modelq_nlrq_list[nlrq2name[sdi,repi]]
    RqMod_mat <- RqMod_nlrq_list[[nlrq2name[sdi,repi]]] %>% 
      filter(tau==taus[t])
    smrq <- smrq_t_nlrq_list[[nlrq2name[sdi,repi]]] %>% 
      filter(tau==taus[t])
    rqlim <- rqlim_t_nlrq_list[[nlrq2name[sdi,repi]]] %>% 
      filter(tau==taus[t]) %>% 
      select(RqLim)
    rqsup <- rqsup_t_nlrq_list[[nlrq2name[sdi,repi]]] %>% 
      filter(tau==taus[t])
    rqinf <- rqinf_t_nlrq_list[[nlrq2name[sdi,repi]]] %>% 
      filter(tau==taus[t])
    
    titleG <- sprintf("%s (t=%g) %s in %s",analysis,taus[t],
                      speciesMP$Taxon_SNa[sp],saison[sa,2])
    subtitleG <- sprintf("SDM-NEO %s",reponse[rep,3])
    capt = sprintf("AIC = %g", smrq$AIC)
    
    # 2D static graphic : RASTER
    tmp[[sdi]] <- ggplot(RqMod_mat) +
      geom_raster(aes(x = x1, y = x2, fill = RqMod),alpha=0.7) + 
      geom_point(data=rqinf,aes(x=x1, y=x2), 
                 shape=21, size=1, color=colInliers, 
                 fill=colInliers, alpha=.5, na.rm = TRUE) +
      geom_point(data=rqsup,aes(x=x1, y=x2), 
                 shape=23, size=1, color=colOutliers, 
                 fill=colOutliers, alpha=.5, na.rm = TRUE) +
      labs(
        x=x1l, y=x2l,
        # title=titleG, 
        # subtitle=subtitleG,
        caption = capt,
        fill = NULL # paste("SDM-NEO\n",reponse[rep,3],sep="")
        ) +
      guides(alpha = "none") +
      Scalf_rq2d() +
      # facet_wrap(taust ~ .) + 
      # coord_fixed(max(RqMod_mat$x1)/max(RqMod_mat$x2)) +
      theme(text = element_text(size = 12))
      print(tmp[[sdi]])
      plot_nlrq[[repi]]<-tmp
  }
  
  plot_nlrq_t <- ggarrange(plotlist = plot_nlrq[[repi]], 
                         ncol=1, nrow=length(plot_nlrq[[repi]]),
                         labels="AUTO",legend="right",
                         common.legend = FALSE)
  plot_nlrq_t <- annotate_figure(plot_nlrq_t,
                        top = text_grob(analysis)) +
        bgcolor("white")
  # print(plot_nlrq_t)
  # ggsave(sprintf("%s%s/%s/%s_%s_%s_%s.tiff",
  #                wdgraph,speciesMP$SPCourt[sp],analysis,
  #                etude,speciesMP$SPCourt[sp],
  #                saison[sa,2],taus[t]),
  #        plot = plot_nlrq_t, width = 4, height = 12, dpi=600)
}

```

```{r}
#| label: graphrqbs
#| eval: false
#| output: false
# BSplines RQ Graphics generation
analysis <- "RQ BSpline"
rqbs2name<- matrix(paste0("RQbs2_",sdmname),nrow=4,ncol=2)

plot_rqbs <- list()
for (repi in 1:2) {
  tmp <- list()
  for (sdi in 1:nrow(sdmname)) { # sdi=1
    sp_i<-as.numeric(substr(sdmname[sdi,repi],1,1))
    sa_i<-as.numeric(substr(sdmname[sdi,repi],2,2))
    rep_i<-as.numeric(substr(sdmname[sdi,repi],3,3))
    k_i<-as.numeric(substr(sdmname[sdi,repi],4,4))
    k2_i<-as.numeric(substr(sdmname[sdi,repi],5,5))
    
    yt = reponse[rep_i,1]
    yl = sprintf("%s (%s)",reponse[rep_i,2],reponse[rep_i,3])
    zt = "Zone"
    x1t = sprintf("%s%s",pred_red[k_i,1],saison[sa_i,1])
    x1l = sprintf("%s%s (%s)",pred_red[k_i,2],saison[sa_i,1],pred_red[k_i,3])
    x2t = sprintf("%s%s",pred_red[k2_i,1],saison[sa_i,1])
    x2l = sprintf("%s%s (%s)",pred_red[k2_i,2],saison[sa_i,1],pred_red[k2_i,3])
    
    
    modelq <- modelq_rqbs_list[rqbs2name[sdi,repi]]
    RqMod_mat <- RqMod_rqbs_list[[rqbs2name[sdi,repi]]] %>% 
      filter(tau==taus[t])
    smrq <- smrq_t_rqbs_list[[rqbs2name[sdi,repi]]] %>% 
      filter(tau==taus[t])
    rqlim <- rqlim_t_rqbs_list[[rqbs2name[sdi,repi]]] %>% 
      filter(tau==taus[t]) %>% 
      select(RqLim)
    rqsup <- rqsup_t_rqbs_list[[rqbs2name[sdi,repi]]] %>% 
      filter(tau==taus[t])
    rqinf <- rqinf_t_rqbs_list[[rqbs2name[sdi,repi]]] %>% 
      filter(tau==taus[t])
    
    titleG <- sprintf("%s (t=%g) %s in %s",analysis,taus[t],
                      speciesMP$Taxon_SNa[sp],saison[sa,2])
    subtitleG <- sprintf("SDM-NEO %s",reponse[rep,3])
    capt = sprintf("AIC = %g", smrq$AIC)
    
    # 2D static graphic : RASTER
    tmp[[sdi]] <- ggplot(RqMod_mat) +
      geom_raster(aes(x = x1, y = x2, fill = RqMod),alpha=0.7) + 
      geom_point(data=rqinf,aes(x=x1, y=x2), 
                 shape=21, size=1, color=colInliers, 
                 fill=colInliers, alpha=.5, na.rm = TRUE) +
      geom_point(data=rqsup,aes(x=x1, y=x2), 
                 shape=23, size=1, color=colOutliers, 
                 fill=colOutliers, alpha=.5, na.rm = TRUE) +
      labs(
        x=x1l, y=x2l,
        # title=titleG, 
        # subtitle=subtitleG,
        caption = capt,
        fill = NULL # paste("SDM-NEO\n",reponse[rep,3],sep="")
        ) +
      guides(alpha = "none") +
      Scalf_rq2d() +
      # facet_wrap(taust ~ .) + 
      # coord_fixed(max(RqMod_mat$x1)/max(RqMod_mat$x2)) +
      theme(text = element_text(size = 12))
      print(tmp[[sdi]])
      plot_rqbs[[repi]]<-tmp
  }
  
  plot_rqbs_t <- ggarrange(plotlist = plot_rqbs[[repi]], 
                         ncol=1, nrow=length(plot_rqbs[[repi]]),
                         labels="AUTO",legend="right",
                         common.legend = FALSE)
  plot_rqbs_t <- annotate_figure(plot_rqbs_t,
                        top = text_grob(analysis)) +
        bgcolor("white")
  # print(plot_rqbs_t)
  # ggsave(sprintf("%s%s/%s/%s_%s_%s_%s.tiff",
  #                wdgraph,speciesMP$SPCourt[sp],analysis,
  #                etude,speciesMP$SPCourt[sp],
  #                saison[sa,2],taus[t]),
  #        plot = plot_rqbs_t, width = 4, height = 12, dpi=600)
}

```

```{r}
#| label: prefig-graphboard
#| output: false
# Create a board of plot

titleG <- sprintf("%s in %s (t=%g)\nLinear QR                                   Nonlinear QR",
                    speciesMP$Taxon_SNa[sp],saison[sa,2],taus[t])
plot_t <- list()
leti<-c("A","B","C","D")
for (repi in 1:2) {
  tmp<-list()
  subtitleG <- sprintf("SDM-NEO %s",reponse[repi,3])
  for (i in 1:length(plot_rq[[repi]])) {
    plot_rq[[repi]][[i]] <- plot_rq[[repi]][[i]] +
                    theme(axis.title = element_blank()) + 
      scale_fill_gradientn(colours=colRQ,limits=c(0,max(
        max(plot_rq[[repi]][[i]][["data"]][["RqMod"]],na.rm=TRUE),
        max(plot_nlrq[[repi]][[i]][["data"]][["RqMod"]],na.rm=TRUE)
        )))
    plot_nlrq[[repi]][[i]] <- plot_nlrq[[repi]][[i]] +
                    theme(axis.title = element_blank()) + 
      scale_fill_gradientn(colours=colRQ,limits=c(0,max(
        max(plot_rq[[repi]][[i]][["data"]][["RqMod"]],na.rm=TRUE),
        max(plot_nlrq[[repi]][[i]][["data"]][["RqMod"]],na.rm=TRUE)
        )))  
    tmp[[i]] <- ggarrange(plotlist =
                            list(plot_rq[[repi]][[i]],plot_nlrq[[repi]][[i]]), 
                         ncol=2, nrow=1,
                         labels=paste0(leti[i],1:2), hjust=0, vjust=1,
                         legend="right", common.legend = TRUE)
    tmp[[i]] <- annotate_figure(tmp[[i]], 
                    left = text_grob(plot_rq[[repi]][[i]][["labels"]][["y"]], rot = 90),
                    bottom = text_grob(plot_rq[[repi]][[i]][["labels"]][["x"]]))
          
  }
  plot_t[[repi]] <- ggarrange(plotlist = tmp,
                         ncol=1, nrow=4,
                         labels=NULL,#legend="right",
                         common.legend = FALSE)
  
  # plot_t <- ggarrange(plotlist = c(rbind(plot_rq, plot_nlrq)), 
  #                        ncol=2, nrow=length(plot_rq),
  #                        labels="AUTO",legend="right",
  #                        common.legend = FALSE)
  # plot_t <- ggarrange(plotlist = list(plot_rq_t, plot_nlrq_t), 
  #                        ncol=2, nrow=1,
  #                        labels=NULL,legend="right",
  #                        common.legend = FALSE)
  
  plot_t[[repi]] <- annotate_figure(plot_t[[repi]],
                        top = text_grob(titleG),
                        bottom = text_grob(subtitleG)) +
        bgcolor("white")
  ggsave(sprintf("%s%s/%s_%s_%s_%s.tiff",
                 wdgraph,speciesMP$SPCourt[sp],
                 etude,speciesMP$SPCourt[sp],
                 saison[sa,2],taus[t]),
         plot = plot_t[[repi]], width = 8, height = 12, dpi=600)
}

```

The four couples of factors has been treated with the different ways of calculation : either linear with interaction, or non linear with bifactorial gaussian equation with the biomass as biologic response @fig-graphboard.

### 2D visualisation

```{r}
#| label: fig-graphboard
#| include: true
#| fig-cap: "Selected factors couples models computed with linear with interaction (left, numbered 1) and nonlinear with gaussian equation (right numbered 2), the biologic response being the biomass in Ash Free Dry Weight per square meter"
#| fig-width: 6
#| fig-height: 9
plot_t[[1]]
```

The same board of plots with density are in @fig-graphboard2. *can be put in supplementary data*

```{r}
#| label: fig-graphboard2
#| include: true
#| fig-cap: "Selected factors couples models computed with linear with interaction (left, numbered 1) and nonlinear with gaussian equation (right numbered 2), the biologic response being the density in individuals per square meter"
#| fig-width: 6
#| fig-height: 9
plot_t[[2]]
```

### 3D visualisation

```{r}
#| label: graphboard2
#| eval: false

for (repi in 1:2) {
  tmp<-list()
  subtitleG <- sprintf("SDM-NEO %s",reponse[repi,3])
  for (i in 1:length(plot_rq[[repi]])) {
    
    x1mod <- seq(min(x1),max(x1),length.out=graphfine)
    x2mod <- seq(min(x2),max(x2),length.out=graphfine)
    x1x2mod <- data.frame(cbind(x1mod,x2mod)) %>% rename(x1=x1mod,x2=x2mod)
    gridx1x2 <- expand.grid(x1mod,x2mod) %>% rename(x1=Var1,x2=Var2)
    gridx1x2mat <- mesh(x1mod,x2mod)

    
    myscene<-list(camera = list(eye = list(x = -1.5, y = 1.5, z = 0.3)), 
                  aspectmode='cube',
                  xaxis = list(title = x1l), yaxis = list(title = x2l), zaxis = list(title = yl))

    dp3d <- plot_ly(showlegend=F, scene=paste("scene",repi,sep="")) %>%
      add_surface(x = gridx1x2mat[["x"]], 
                  y = gridx1x2mat[["y"]],
                  z = RqMod_mat,
                  opacity = 0.9, colorscale = list(c(0,1),c(blank,colRQ[t])),
                  colorbar=list(title=list(text=paste("SDM-NEO\n",reponse[repi,3],"\nTau=",taus[t],sep="")))) %>%
      add_trace(x = rqsup$x1, 
                y = rqsup$x2, 
                z = rqsup$y, 
                mode = "markers", type = "scatter3d",
                marker = list(size = 2, color = colOutliers, opacity = 0.5, symbol = "diamond")) %>%
      add_trace(x = rqinf$x1, 
                y = rqinf$x2, 
                z = rqinf$y, 
                mode = "markers", type = "scatter3d",
                marker = list(size = 2, color = colInliers, opacity = 0.5, symbol = "circle")) %>%
      layout(title = titleG, scene = myscene)
    dp3d
plot_dp3dlist[[length(plot_dp3dlist)+1]] <- dp3d
# saveWidget(dp3d, sprintf("%s%s/%s/%s_%s_RQ2int3d_%s_%s_%s_%s_%s.html",
#                          wdgraphEx,speciesMP$SPCourt[sp],analysis,etude,speciesMP$SPCourt[sp],
#                          saison[sa,2],yt,x1t,x2t,taus[t]),
#            selfcontained = F, libdir = "lib")
  }
}


# subtitleG <- sprintf("%s, tau = %g",xl,taus[t])
# scene <- list(camera = list(eye = list(x = -1.5, y = 1.5, z = 0.3)), aspectmode='cube',
#             xaxis = list(title = x1l), yaxis = list(title = x2l), 
#             zaxis = list(title = sprintf("%s (%s)",reponse[1,2],reponse[1,3])),
#             domain=list(x=c(0,0.5),y=c(0,1)))
# scene2 <- list(camera = list(eye = list(x = -1.5, y = 1.5, z = 0.3)), aspectmode='cube',
#              xaxis = list(title = x1l), yaxis = list(title = x2l), 
#              zaxis = list(title = sprintf("%s (%s)",reponse[2,2],reponse[2,3])),
#              domain=list(x=c(0.5,1),y=c(0,1)))
# dp3dF <- subplot(plot_dp3dlist, shareX = TRUE, shareY = TRUE, nrows = 2) %>%
# layout(title = paste(titleG,subtitleG,sep="\n"),
#        scene = scene, scene2 = scene2)
# saveWidget(dp3dF,sprintf("%s%s/%s/%s_%s_RQ2int3dFacet_%s_%s_%s_%s.html",
#                        wdgraphEx,speciesMP$SPCourt[sp],analysis,etude,speciesMP$SPCourt[sp],
#                        saison[sa,2],x1t,x2t,taus[t]),
#          selfcontained = F, libdir = "lib")
# 
# rm(list=ls(pattern="scene")); rm(list=ls(pattern="plot"))
```

# SDM-NEO Maps

see https://bookdown.org/nicohahn/making_maps_with_r5/docs/tmap.html#static-maps-with-tmap to make maps with facets with all years and the gif animation easily

# References {.unnumbered}
