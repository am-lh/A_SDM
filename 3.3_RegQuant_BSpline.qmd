---
title: "CUBIC B-SPLINES QUANTILE REGRESSION ANALYSIS WITH KOENKER'S QUANTREG PACKAGE"
author: "Am√©lie Lehuen"
date: "2022-12-14"
description: "add info on script"
toc: true # table of content at beginning of document
number-sections: true
highlight-style: pygments
format: 
  html: 
    self-contained: true
    code-fold: false
    html-math-method: katex # displays equations

bibliography: references.bib

editor: visual
execute:
  eval: true
  echo: false
  message: false
  warning: false
  output: true
  include: true
  cache: false #create cache of results of chunks
---

# CUBIC B-SPLINES QUANTILE REGRESSION ANALYSIS WITH KOENKER'S QUANTREG PACKAGE

## Script preparation

### Packages

```{r}
#| label: load-packages
#| code-summary: "Packages"

library(readxl) ; library(openxlsx); library(beepr) # Edition d'un fichier Excel
library(tidyverse); library(reshape2); library(rlist) # the one; melt; list.append
library(ggpubr); #library(GGally); # stat_compare_means ;
library(scales); library(RColorBrewer); library(wesanderson); library(grafify); library(colorspace); library(ggsci)# show_col and colors colors colors!
library(quantreg);# library(visreg)
library(plotly); library(plot3D);  # graphiques 3D plot 3D for mesh library(pracma) 
library(splines); library(ggforce)# bs BSplines function
# # GIS Packages
library(sf); library(sfheaders); # st_as_sf ; sf_to_df
library(htmlwidgets) # library(leaflet) # saveWidget ; for interactive maps

library(knitr)
```

### Working Environment

```{r}
#| label: workenvir

rm(list=ls())
wdres <- "Resultats/"
wdmat <- "Matrices/"
wdgraph <- "Graphiques/"

pc <- "C:/Users/lehuen201/Nextcloud/" # "E:/" #
wdGIS <- paste(pc,"Melting Pot/SIG/",sep="")

etude <- "CSLN_Mars"
```

### Graphic charter

```{r}
#| label: graphchart

theme_set(theme_bw(base_size = 16)) # theme_gray() theme_bw() theme_light() theme_dark()
pal_cspx <- function(x) {divergingx_hcl(x,palette = "Zissou 1")}; # show_col(pal_cspx(6)) # colorspace
colRQ<-pal_cspx(4); colBin<-c(pal_cspx(6)[3],pal_cspx(6)[5]); blank<-alpha("#dae8ed",0.1); # show_col(colBin)
Scalc_rq<- function() {scale_colour_manual(values=colRQ)}
Scalf_rq2d <- function() {scale_fill_gradientn(colours=colRQ)} # function(x) {scale_fill_material("teal")} # 

pal_ggscc <- pal_material("teal"); # show_col(pal_ggscc(9)) # ggsci
colSum <- c(pal_ggscc(9)[3],pal_ggscc(9)[7],pal_ggscc(9)[1]) # show_col(colSum)
colInliers<-pal_material("teal")(10)[5] ; colOutliers = pal_material("deep-orange")(10)[5] # show_col(colOutliers)
Scalc_misc <- function() {scale_color_discrete_diverging(palette = "Blue-Red 3")}
Scale_map<- function() {scale_fill_distiller(palette = "Spectral")}
```

### Home made functions

```{r}
#| label: functmade

# Model equation tested ---- NOT USED IN SCRIPT BECAUSE SOME PREDICT MAY FAIL
# bspline1 <- function(x1,kn1) {bs(x1,degree=3,knots=kn1)}
# bspline2 <- function(x1,x2,kn1,kn2) {bs(x1*x2,degree=3,knots=c(kn1,kn2))}
# bspline2 <- function(x1,x2,kn1,kn2) {bs(x1,degree=3,knots=kn1)*bs(x1,degree=3,knots=kn2)}

```

## Load of External data and Basic Variables

### External data

```{r}
#| label: externdata

rdatain <- sprintf("%sCSLN_Mars_BDD.RData",wdmat)
load(rdatain)
```

### Output binder and data

```{r}
#| label: outfiles

binderout <- sprintf("%sCSLN_BDD.xlsx",wdres)
rdataout  <- sprintf("%s%s_RQbs_BDD.RData",wdmat,etude)
# if exists
# load(rdataout)
```

### Basic variables

```{r}
#| label: basicvar

analysis <- "RQ BSpline"

choixttt <- 1#23 # treatment choices 1: RQ 1 to 2 factors coeff and AICm; 2: RQ graphs on demand; 3 : Mars SDM calculation

# Choice of predictors used according to autocorrelation study, taus...
# Var_choosen<-c("flow_mxd","inunt","flow_m","sal_m","tenfon_m","mudrate_m") #,"bathy"
Var_choosen<-c("flow_mxd","inunt","sal_dtd","temp_m","mudrate_m","tenfon_mxd")
pred_red <- predict %>% 
  subset(Var %in% Var_choosen) %>% 
  arrange(match(Var,Var_choosen))
taus <- c(0.5,0.9,0.95,0.975) # c(0.5,0.85,0.9,0.95,0.975,0.99) #c(1:19/20,0.975,0.99)
spe <- 1#:nrow(speciesMP) # 1:CERED 2:CORVO 3:HEDDI 4:LIMBA 5:PERUL 6:SCRPL
reponse<-reponse %>% 
  filter(rvar %in% c("Biomass_gAFDWm2","Density_indm2"))
answ <- 1:nrow(reponse)
sai <- 1#:nrow(saison) # 1:Year 2:Winter 3:Summer
explo <- 1:nrow(pred_red) # Choice of the domain of exploration of the reduced predictors
graphfine<-50 # graph resolution for 2D and 3D graphs surfaces

```

# ONE to TWO FACTOR Cubic BSpline RQ with AICm and Rone calculation

```{r}
#| label: calculation_1

if (choixttt==1 | choixttt==12 | choixttt==13 | choixttt==123){
  modelq_list <- list()
  smrq_t_list <- list(); RqMod_list <- list(); # rqResid_t_list <- list()
  rqlim_t_list <- list(); rqinf_t_list <- list(); rqsup_t_list <- list();
  sm_plot_list <-list(); qqres_plot_list<-list(); dp_plot_list<-list()
  dp2dF_plot_list <- list(); dp2d_plot_list <- list()
  dp3d_plot_list <- list()
  dp3dS_plot_list <- list(); dp3dF_plot_list <- list()
  for (sp in spe) { # sp=1
    df <- CSLN_Mars[which(CSLN_Mars$SPCourt == speciesMP$SPCourt[sp]),]
    for (sa in sai) {# sa=1
      for (rep in answ){ # rep=1
        for (k in explo) { # k=1
          
          # ONE FACTOR RQ ----
          # var def for interation
          yt = reponse[rep,1]
          yl = sprintf("%s (%s)",reponse[rep,2],reponse[rep,3])
          zt = "Zone"
          x1t = sprintf("%s%s",pred_red[k,1],saison[sa,1])
          x1l = sprintf("%s%s (%s)",
                        pred_red[k,2],saison[sa,1],pred_red[k,3])
          dfrq <-df[,c(yt,x1t,zt)]
          dfrq <-as.data.frame(na.omit(dfrq)) %>% 
            rename(x1=!!x1t,y=!!yt,z=!!zt)
          y <- dfrq$y <- jitter(dfrq$y)
          x1 <- dfrq$x1 <- jitter(dfrq$x1)
          z <- dfrq$z
          
          x1mod <- seq(min(x1),max(x1),length.out=graphfine)
          x1Mod <- data.frame(x1mod) %>% rename(x1=x1mod)
          titleG <- sprintf("%s %s in %s",
                            analysis,speciesMP$Taxon_SNa[sp],saison[sa,2])
          sdmname<-sprintf("RQbs1_%g%g%g%g0",sp,sa,rep,k)
          
          # RQ calculation with error management ----
          tryCatch({
            modelq<-rq(y~bs(x1,degree=3,knots=median(x1)), tau=taus)
            xt<-paste("B-Spline",x1t,sep=' ')
            xl<-paste("B-Spline",x1l,sep=' ')
            subtitleG <- sprintf("%s vs %s",yl,x1l)
            modelq0<-rq(y ~ 1, tau=taus)
  
            # Summary calculation and pimp
            smrq <- summary(modelq, se="boot")
            smrq_t <- list(); 
            for (t in 1:length(taus)){
              smrq_t[[t]] <- as.data.frame(smrq[[t]][["coefficients"]]) %>%
                mutate(Var=rownames(.)) %>% 
                relocate(Var) %>% 
                remove_rownames(.) %>%
                mutate(AIC=round(AIC(modelq)[t],1),
                       Rone=round((1 - modelq$rho[t]/modelq0$rho[t]),5)) %>%
                mutate(tau=taus[t], 
                       taust=sprintf("tau= %s",tau),
                       sdmname=sdmname,
                       mode=paste("B-Spline deg",
                                  modelq$formula[[3]][["degree"]],
                                  "1var",sep=' '),
                       formula=format(modelq$formula),
                       type="B-Spline d3",
                       tau=taus[t],
                       Sp=speciesMP$SPCourt[sp],Season=saison[sa,2],
                       reponse=yl,reponset=yt,
                       Predictor1=pred_red[k,1],Predictor2="None",
                       predict=xl,predictt=xt)
            }

            # Out of limits points calculation
            rqlim_t <- as.data.frame(fitted(modelq)) %>%
              rename_all(~sprintf("%.3f",taus)) %>% 
              mutate(across(everything(), 
                            function(x){replace(x, which(x<0), NA)})) %>% 
              bind_cols(tibble(x1=x1),tibble(y=y))
            rqlim_t <- melt(rqlim_t,id.vars =c("x1","y"),
                            variable.name = "tau",value.name = "RqLim") %>% 
              mutate(taust=sprintf("tau= %s",tau),
                     tau=as.numeric(as.character(tau)))
            rqsup_t <- rqlim_t %>% 
              mutate(across(c(x1,y),
                            ~replace(.x, which(y<RqLim), NA))) %>% 
              drop_na()
            rqinf_t <- rqlim_t %>% 
              mutate(across(c(x1,y),
                            ~replace(.x, which(y>=RqLim), NA))) %>% 
              drop_na()
            # Surface model calculation
            RqMod_t <- as.data.frame(predict(modelq,newdata=x1Mod)) %>%
              rename_all(~sprintf("%.3f",taus)) %>% 
              mutate(across(everything(), 
                            function(x){replace(x, which(x<0), NA)})) %>% 
              bind_cols(x1Mod) 
            RqMod_t <- melt(RqMod_t,id.vars =c("x1"),
                            variable.name = "tau",
                            value.name = "RqMod") %>% 
              mutate(taust=sprintf("tau= %s",tau),
                     tau=as.numeric(as.character(tau)))
            
            modelq_list[[sdmname]] <- modelq
            smrq_t_list[[sdmname]] <- smrq_t <- smrq_t %>% map_dfr(., ~.)
            RqMod_list[[sdmname]] <- RqMod_t
            rqlim_t_list[[sdmname]] <- rqlim_t
            rqsup_t_list[[sdmname]] <- rqsup_t
            rqinf_t_list[[sdmname]] <- rqinf_t

            # GRAPHIC PART ----
            # SUMMARY GRAPHS
            png(file=sprintf("%s%s/%s/RQbs1/%s_%s_RQbs1_sm_%s_%s_%s.png",
                             wdgraph,speciesMP$SPCourt[sp],
                             analysis,etude,speciesMP$SPCourt[sp],
                             saison[sa,2],yt,xt),
                width=4200, height=3600, res = 600)
            plot(smrq, cex=.7, pch=19, 
                                 lcol=colSum[1], col=colSum[2:3])
            title(sub = paste(titleG,xl,sep=' '))
            # library(ggplotify)
            # sm_plot_list[[sdmname]] <-as.ggplot(~plot(smrq, cex=1, 
            #                                           pch=19,lcol=colSum[1],
            #                                           col=colSum[2:3]))
            dev.off()
            # QQPLOT RESIDUALS OF RQ MODEL
            rqResid <- melt(residuals(modelq)) %>% 
              rename(tau=Var2, residuals=value)
            qqres_plot_list[[sdmname]] <- ggplot(rqResid, 
                                                 aes(sample=residuals, color=tau)) + 
              stat_qq() + stat_qq_line() + 
              facet_wrap(~tau) +
              Scalc_rq() +
              theme(legend.position="bottom")+
              labs(title=paste("Residuals for ",titleG,sep=""),
                   subtitle=subtitleG,
                   color="Quantile")
            # ggsave(sprintf("%s%s/%s/RQbs2/%s_%s_RQbs2Resid_%s_%s_%s_%s.png",
            #                wdgraph,speciesMP$SPCourt[sp],
            #                analysis,etude,speciesMP$SPCourt[sp],
            #                saison[sa,2],yt,x1t,x2t),
            #        plot = qqres_plot_list[[sdmname]], 
            #        width = 12, height = 8, dpi=400)

            
            # RQ GRAPHS
            dp_plot_list[[sdmname]] <- ggplot(dfrq, aes(x=x1, y=y)) + 
              geom_point(aes(color=z)) +
              Scalc_misc() +
              theme(legend.position="bottom") +
              labs(title=titleG,
                   x=x1l,
                   y=yl,color=zt)
            for (t in 1:length(taus)){ # required to have diff color for rq lines
               dp_plot_list[[sdmname]] <-  dp_plot_list[[sdmname]] + 
                geom_quantile(quantiles = taus[t],
                              formula=y ~ bs(x,degree=3,knots=median(x1)), 
                              colour = colRQ[t], size = 0.8, alpha = 0.8) +
                annotate("text",x=max(x1,na.rm=TRUE)*0.9,
                         y=max(y)*((t/length(taus))*0.9),
                         colour=colRQ[t],size=4,fontface=2,hjust=0,
                         label = paste(taus[t]))
            }
            # ggsave(sprintf("%s%s/%s/RQbs1/%s_%s_RQbs1_%s_%s_%s.png",
            #                wdgraph,speciesMP$SPCourt[sp],
            #                analysis,etude,speciesMP$SPCourt[sp],
            #                saison[sa,2],yt,x1t),
            #        plot =  dp_plot_list[[sdmname]], 
            #        width = 8, height = 8, dpi=400)
  
            modelq<-NULL; smrq<-NULL;     
          },error = function(e) {print(e)})#,finally = {})
          # ----
                 
          # TWO FACTORS LOOP ----
          for (k2 in explo[-c(1:k)]) { #k2=6
            # var def for interation
            x2t = sprintf("%s%s",pred_red[k2,1],saison[sa,1])
            x2l = sprintf("%s%s (%s)",pred_red[k2,2],saison[sa,1],pred_red[k2,3])
            dfrq <-df[,c(yt,x1t,x2t)]
            dfrq <-as.data.frame(na.omit(dfrq)) %>% rename(x1=!!x1t,x2=!!x2t,y=!!yt)
            y <- dfrq$y <- jitter(dfrq$y)
            x1 <- dfrq$x1 <- jitter(dfrq$x1)
            x2 <- dfrq$x2 <- jitter(dfrq$x2)
            z <- dfrq$z
            
            x2mod <- seq(min(x2, na.rm=TRUE),max(x2, na.rm=TRUE),length.out=graphfine)
            x1x2mod <- data.frame(cbind(x1mod,x2mod)) %>% 
              rename(x1=x1mod,x2=x2mod)
            gridx1x2 <- expand.grid(x1mod,x2mod) %>% 
              rename(x1=Var1,x2=Var2)
            gridx1x2mat <- mesh(x1mod,x2mod)
            titleG <- sprintf("%s %s in %s",
                              analysis,speciesMP$Taxon_SNa[sp],saison[sa,2])
            sdmname<-sprintf("RQbs2_%g%g%g%g%g",sp,sa,rep,k,k2)
            
            # RQ calculation with error management ----
            tryCatch({
            modelq<-rq(y~(bs(x1,degree=3,knots=median(x1))
                       *bs(x2,degree=3,knots=median(x2))), tau=taus)
              xt<-paste("B-Spline 2d",x1t,"&",x2t,sep=' '); 
              xl<-paste("B-Spline 2d",x1l,"&",x2l,sep=' ')
              subtitleG <- sprintf("%s vs %s & %s",yl,x1l,x2l)
              modelq0<-rq(y ~ 1, tau=taus)
              
              # Summary calculation and pimp
              smrq <- summary(modelq, se="boot") 
              smrq_t <- list(); 
              for (t in 1:length(taus)){
                smrq_tmp <- as.data.frame(smrq[[t]][["coefficients"]]) %>%
                  mutate(Var=rownames(.)) %>% relocate(Var) %>% remove_rownames(.) %>%
                  mutate(AIC=round(AIC(modelq)[t],1),
                         Rone=round((1 - modelq$rho[t]/modelq0$rho[t]),5)) %>%
                  mutate(tau=taus[t], taust=sprintf("tau= %s",tau),
                         sdmname=sdmname,
                         mode=paste("B-Spline deg3 2var",sep=' '),
                         formula=paste0(format(modelq$formula),collapse=""),
                         type="B-Spline d3",
                         tau=taus[t],
                         Sp=speciesMP$SPCourt[sp],Season=saison[sa,2],
                         reponse=yl,reponset=yt,
                         Predictor1=pred_red[k,1],Predictor2=pred_red[k2,1],
                         predict=xl,predictt=xt)
                smrq_t[[t]] <- smrq_tmp 
              }
              
              # Out of limits points calculation
              rqlim_t <- as.data.frame(predict(modelq)) %>%
                rename_all(~sprintf("%.3f",taus)) %>% 
                mutate(across(everything(), function(x){replace(x, which(x<0), NA)})) %>% 
                bind_cols(tibble(x1=x1),tibble(x2=x2),tibble(y=y))
              rqlim_t <- melt(rqlim_t,id.vars =c("x1","x2","y"),
                              variable.name = "tau",value.name = "RqLim") %>% 
                mutate(taust=sprintf("tau= %s",tau),
                       tau=as.numeric(as.character(tau)))
              rqsup_t <- rqlim_t %>% 
                mutate(across(c(x1,x2,y),
                              ~replace(.x, which(y<RqLim), NA))) %>% drop_na()
              rqinf_t <- rqlim_t %>% 
                mutate(across(c(x1,x2,y),
                              ~replace(.x, which(y>=RqLim), NA))) %>% drop_na()
              # Surface model calculation
              RqMod_t <- as.data.frame(predict(modelq,newdata=gridx1x2)) %>%
                rename_all(~sprintf("%.3f",taus)) %>% 
                mutate(across(everything(), 
                              function(x){replace(x, which(x<0), NA)})) %>% 
                bind_cols(gridx1x2) 
              RqMod_t <- melt(RqMod_t,id.vars =c("x1","x2"),
                              variable.name = "tau",value.name = "RqMod") %>% 
                mutate(taust=sprintf("tau= %s",tau),tau=as.numeric(as.character(tau)))
              
              modelq_list[[sdmname]] <- modelq
              smrq_t_list[[sdmname]] <- smrq_t <- smrq_t %>% map_dfr(., ~.)
              RqMod_list[[sdmname]] <- RqMod_t
              rqlim_t_list[[sdmname]] <- rqlim_t
              rqsup_t_list[[sdmname]] <- rqsup_t
              rqinf_t_list[[sdmname]] <- rqinf_t

              # GRAPHIC PART ----
              # SUMMARY GRAPHS
              png(file=sprintf("%s%s/%s/RQbs2/%s_%s_RQbs2_sm_%s_%s_%s_%s.png",
                               wdgraph,speciesMP$SPCourt[sp],
                               analysis,etude,speciesMP$SPCourt[sp],
                               saison[sa,2],yt,x1t,x2t),
                  width=4800, height=3600, res = 600)
              plot(smrq, cex=.7,pch=19,lcol=colSum[1],col=colSum[2:3])
              title(sub = titleG)
              dev.off()
              # QQPLOT RESIDUALS OF RQ MODEL
              rqResid <- melt(residuals(modelq)) %>% 
                rename(tau=Var2, residuals=value)
              qqres_plot_list[[sdmname]] <- ggplot(rqResid, 
                                                   aes(sample=residuals, color=tau)) + 
                stat_qq() + stat_qq_line() + 
                facet_wrap(~tau) +
                Scalc_rq() +
                theme(legend.position="bottom")+
                labs(title=paste("Residuals for ",titleG,sep=""),
                     subtitle=subtitleG,
                     color="Quantile")
              # ggsave(sprintf("%s%s/%s/RQbs2/%s_%s_RQbs2Resid_%s_%s_%s_%s.png",
              #                wdgraph,speciesMP$SPCourt[sp],
              #                analysis,etude,speciesMP$SPCourt[sp],
              #                saison[sa,2],yt,x1t,x2t),
              #        plot = qqres_plot_list[[sdmname]], 
              #        width = 12, height = 8, dpi=400)
              
              # RQ GRAPHS ----
              # 2D static graphic : RASTER
              dp2dF_plot_list[[sdmname]] <- ggplot(RqMod_t) +
                geom_raster(aes(x = x1, y = x2, fill = RqMod),alpha=0.7) + 
                geom_point(data=rqinf_t,aes(x=x1, y=x2), 
                           shape=21, size=1, color=colInliers, 
                           fill=colInliers, alpha=.5, na.rm = TRUE) +
                geom_point(data=rqsup_t,aes(x=x1, y=x2), 
                           shape=23, size=1, color=colOutliers, 
                           fill=colOutliers, alpha=.5, na.rm = TRUE) +
                labs(title=titleG,x=x1l, y=x2l,
                     fill = paste("SDM-NEO\n",reponse[rep,3],sep="")) +
                guides(alpha = "none") +
                Scalf_rq2d() +
                facet_wrap(taust ~ .); print(dp2dF_plot_list[[sdmname]])
              ggsave(sprintf("%s%s/%s/RQbs2/%s_%s_RQbs22d_%s_%s_%s_%s.png",
                             wdgraph,speciesMP$SPCourt[sp],
                             analysis,etude,speciesMP$SPCourt[sp],
                             saison[sa,2],yt,x1t,x2t),
                     plot = dp2dF_plot_list[[sdmname]], 
                     width = 10, height = 7, dpi=400)
              
              # Experimental points on 3D graphic
              # define standard layout scene
              myscene<-list(camera = list(eye = list(x = -1.5, y = 1.5, z = 0.3)), 
                            aspectmode='cube',
                            xaxis = list(title = x1l), 
                            yaxis = list(title = x2l), 
                            zaxis = list(title = yl))
              
              dp3dS_plot_list[[sdmname]] <- plot_ly(showlegend=FALSE) %>% 
                add_trace(data=dfrq, x = x1, y = x2, z = y,
                          mode = "markers", type = "scatter3d",
                          marker = list(size = .5, color = "blue", 
                                        opacity = 0.5, symbol = 104)) %>%
                layout(title = titleG, scene = myscene)
              
              # Define surfaces for each tau
              dp2d_plot_t <- list(); dp3d_plot_t <- list()
              for (t in 1:length(taus)){ # t=4
                RqMod_mat <- RqMod_t %>% 
                  filter(tau==taus[t])
                RqMod_mat <- array(RqMod_mat$RqMod,
                                   dim=c(graphfine,graphfine))
                rqlim <- rqlim_t %>% 
                  filter(tau==taus[t]) %>% 
                  select(RqLim)
                rqsup<-rqsup_t %>% 
                  filter(tau==taus[t])
                rqinf<-rqinf_t %>% 
                  filter(tau==taus[t])
                
                dp2d_plot_t[[t]] <- ggplot(RqMod_t %>% 
                  filter(tau==taus[t])) +
                  geom_raster(aes(x = x1, y = x2, fill = RqMod), alpha=0.7) + 
                  geom_point(data=rqinf_t,aes(x=x1, y=x2), 
                             shape=21, size=1, color=colInliers, 
                             fill=colInliers, alpha=.5, na.rm = TRUE) +
                  geom_point(data=rqsup_t,aes(x=x1, y=x2), 
                             shape=23, size=1, color=colOutliers, 
                             fill=colOutliers, alpha=.5, na.rm = TRUE) +
                  labs(x=x1l, y=x2l,
                       fill = paste("SDM-NEO\n",reponse[rep,3],sep="")) +
                  guides(alpha = "none") +
                  Scalf_rq2d()#; print(dp2dF_plot_list[[sdmname]])

                dp3d_plot_t[[t]] <- plot_ly(showlegend=F, scene=paste("scene",t,sep="")) %>% 
                  add_surface(x = gridx1x2mat[["x"]], 
                              y = gridx1x2mat[["y"]], 
                              z = RqMod_mat,
                              opacity = 0.9, colorscale = list(c(0,1),c(blank,colRQ[t])),
                              colorbar=list(title=list(
                                  text=paste("SDM-NEO\n",
                                             reponse[rep,3],"\nTau=",taus[t],sep="")))) %>%
                  add_trace(x = rqsup$x1, 
                            y = rqsup$x2, 
                            z = rqsup$y,
                            mode = "markers", type = "scatter3d",
                            marker = list(size = 2, color = colOutliers, 
                                          opacity = 0.5, symbol = "diamond"))%>%
                  add_trace(x = rqinf$x1, 
                            y = rqinf$x2, 
                            z = rqinf$y, 
                            mode = "markers", type = "scatter3d",
                            marker = list(size = 2, color = colInliers, 
                                          opacity = 0.5, symbol = "circle")) %>%
                  layout(title = titleG, scene = myscene)#; print(dp3d_plot_t[[t]])
                
                dp3dS_plot_list[[sdmname]] <- dp3dS_plot_list[[sdmname]] %>% 
                  add_surface(x = gridx1x2mat[["x"]], 
                              y = gridx1x2mat[["y"]], 
                              z = RqMod_mat,
                              opacity = 0.8, colorscale = list(c(0,1),c(blank,colRQ[t])))
              } # taus
              dp2d_plot_list[[sdmname]] <- dp2d_plot_t
              dp3d_plot_list[[sdmname]] <- dp3d_plot_t

              # scene <- list.append(myscene,domain=list(x=c(0,0.33),y=c(0,0.5)))
              # scene2 <- list.append(myscene,domain=list(x=c(0.34,0.66),y=c(0,0.5)))
              # scene3 <- list.append(myscene,domain=list(x=c(0.67,1),y=c(0,0.5)))
              # scene4 <- list.append(myscene,domain=list(x=c(0,0.33),y=c(0.5,1)))
              # scene5 <- list.append(myscene,domain=list(x=c(0.34,0.66),y=c(0.5,1)))
              # scene6 <- list.append(myscene,domain=list(x=c(0.67,1),y=c(0.5,1)))
              # dp3dF_plot_list[[sdmname]] <- subplot(dp3d_plot_t, shareX = TRUE, shareY = TRUE, nrows = 2) %>%
              #   layout(scene = scene, scene2 = scene2, scene3 = scene3, 
              #          scene4 = scene4, scene5 = scene5, scene6 = scene6)
              # saveWidget(dp3dF_plot_list[[sdmname]],
              #            sprintf("%s%s/%s/RQbs2/%s_%s_RQbs23dFacet_%s_%s_%s_%s.html",
              #                    wdgraph,speciesMP$SPCourt[sp],
              #                    analysis,etude,speciesMP$SPCourt[sp],
              #                    saison[sa,2],yt,x1t,x2t),
              #            selfcontained = F, libdir = "lib")
              
              # 3D plot with all taus models surface
              dp3dS_plot_list[[sdmname]] <-   dp3dS_plot_list[[sdmname]] %>% 
                add_trace(x = rqsup$x1, y = rqsup$x2, z = rqsup$y, 
                          mode = "markers", type = "scatter3d",
                          marker = list(size = 2, color = colOutliers, 
                                        opacity = 0.5, symbol = "diamond")) %>%
                add_trace(x = rqinf$x1, y = rqinf$x2, z = rqinf$y, 
                          mode = "markers", type = "scatter3d",
                          marker = list(size = 2, color = colInliers, 
                                        opacity = 0.5, symbol = "circle")) %>%
                hide_colorbar()
              saveWidget(dp3dS_plot_list[[sdmname]],
                         sprintf("%s%s/%s/RQbs2/%s_%s_RQbs23dStack_%s_%s_%s_%s.html",
                                       wdgraph,speciesMP$SPCourt[sp],
                                 analysis,etude,speciesMP$SPCourt[sp],
                                 saison[sa,2],yt,x1t,x2t),
                         selfcontained = F, libdir = "lib")
              
              smrq<-NULL; modelq<-NULL        
            },error = function(e) {print(e)})#,finally = {})
          } # two factors loop ----
        } # explo
        
        # FACET ALL MODELS
        dp_plot <- dp_plot_list[grep(sprintf("_%g%g%g",sp,sa,rep),
                                     names(dp_plot_list))]
        dp_plot <- lapply(dp_plot, function(x){
          x + theme(plot.title = element_blank(),
                    axis.title.y = element_blank(),
                    text = element_text(size = 12))})
        dp_plot <- ggarrange(plotlist = dp_plot,
                               ncol=3, nrow=ceiling(length(names(dp_plot))/3),
                               labels="AUTO",legend="bottom",
                               common.legend = TRUE)
        dp_plot <- annotate_figure(dp_plot,
                top = text_grob(titleG, size=18),
                left = text_grob(yt, rot = 90)) +
        bgcolor("white")
        ggsave(sprintf("%s%s/%s/RQbs1/%s_%s_RQbs1_%s_%s.tiff",
                     wdgraph,speciesMP$SPCourt[sp],
                     analysis,etude,speciesMP$SPCourt[sp],
                     saison[sa,2],yt),
             plot = dp_plot,
             width = 16, height = 8, dpi=400)
        # FACET RESIDUALS
        dp_plot <- qqres_plot_list[grep(sprintf("1_%g%g%g",sp,sa,rep),
                                     names(qqres_plot_list))]
        dp_plot <- lapply(dp_plot, function(x){
          x + theme(plot.title = element_blank(),
                    # plot.subtitle = element_blank(),
                    axis.title.y = element_blank(),
                    text = element_text(size = 12))})
        dp_plot <- ggarrange(plotlist = dp_plot,
                               ncol=3, nrow=ceiling(length(names(dp_plot))/3),
                               labels="AUTO",legend="bottom",
                               common.legend = TRUE)
        dp_plot <- annotate_figure(dp_plot,
                top = text_grob(titleG, size=18),
                left = text_grob(yt, rot = 90)) +
        bgcolor("white")
        ggsave(sprintf("%s%s/%s/RQbs1/%s_%s_RQbs1Resid_%s_%s.tiff",
                     wdgraph,speciesMP$SPCourt[sp],
                     analysis,etude,speciesMP$SPCourt[sp],
                     saison[sa,2],yt),
             plot = dp_plot,
             width = 18, height = 12, dpi=400)
        
        dp_plot <- qqres_plot_list[grep(sprintf("2_%g%g%g",sp,sa,rep),
                                     names(qqres_plot_list))]
        dp_plot <- lapply(dp_plot, function(x){
          x + theme(plot.title = element_blank(),
                    axis.title.y = element_blank(),
                    text = element_text(size = 12))})
        dp_plot <- ggarrange(plotlist = dp_plot,
                               ncol=4, nrow=ceiling(length(names(dp_plot))/4),
                               labels="AUTO",legend="bottom",
                               common.legend = TRUE)
        dp_plot <- annotate_figure(dp_plot,
                top = text_grob(titleG, size=18),
                left = text_grob(yt, rot = 90)) +
        bgcolor("white")
        ggsave(sprintf("%s%s/%s/RQbs2/%s_%s_RQbs2Resid_%s_%s.tiff",
                     wdgraph,speciesMP$SPCourt[sp],
                     analysis,etude,speciesMP$SPCourt[sp],
                     saison[sa,2],yt),
             plot = dp_plot,
             width = 18, height = 12, dpi=400)
        
        # # FACET SUMMARY
        # dp_plot <- sm_plot_list[grep(sprintf("1_%g%g%g",sp,sa,rep),
        #                              names(sm_plot_list))]
        # dp_plot <- lapply(dp_plot, function(x){
        #   x + theme(plot.title = element_blank(),
        #             axis.title.y = element_blank(),
        #             text = element_text(size = 12))})
        # dp_plot <- ggarrange(plotlist = dp_plot,
        #                        ncol=4, nrow=ceiling(length(names(dp_plot))/4),
        #                        labels="AUTO",legend="bottom",
        #                        common.legend = TRUE)
        # dp_plot <- annotate_figure(dp_plot,
        #         top = text_grob(titleG, size=18),
        #         left = text_grob(yt, rot = 90)) +
        # bgcolor("white")
        # ggsave(sprintf("%s%s/%s/RQbs1/%s_%s_RQbs1_sm_%s_%s.tiff",
        #              wdgraph,speciesMP$SPCourt[sp],
        #              analysis,etude,speciesMP$SPCourt[sp],
        #              saison[sa,2],yt),
        #      plot = dp_plot,
        #      width = 18, height = 12, dpi=400)
        # 
        # dp_plot <- sm_plot_list[grep(sprintf("2_%g%g%g",sp,sa,rep),
        #                              names(sm_plot_list))]
        # dp_plot <- lapply(dp_plot, function(x){
        #   x + theme(plot.title = element_blank(),
        #             axis.title.y = element_blank(),
        #             text = element_text(size = 12))})
        # dp_plot <- ggarrange(plotlist = dp_plot,
        #                        ncol=4, nrow=ceiling(length(names(dp_plot))/4),
        #                        labels="AUTO",legend="bottom",
        #                        common.legend = TRUE)
        # dp_plot <- annotate_figure(dp_plot,
        #         top = text_grob(titleG, size=18),
        #         left = text_grob(yt, rot = 90)) +
        # bgcolor("white")
        # ggsave(sprintf("%s%s/%s/RQbs2/%s_%s_RQbs2_sm_%s_%s.tiff",
        #              wdgraph,speciesMP$SPCourt[sp],
        #              analysis,etude,speciesMP$SPCourt[sp],
        #              saison[sa,2],yt),
        #      plot = dp_plot,
        #      width = 18, height = 12, dpi=400)
        
      } # reponse
    } # saison
  } # species
  # ----
  
  smrq_l <- smrq_t_list %>% map_dfr(., ~.)
  sdmlist_name <- unique(smrq_l$sdmname)
  # Graphic representation of model performance
  AIC_plot<-smrq_l %>% 
    mutate(model_desc=str_remove(predict,"B-Spline deg 3")) %>% 
    group_by(tau) %>%
    ggplot(aes(x=reorder(model_desc,-AIC),y=AIC,color = factor(tau),shape=reponse))+
    geom_point(alpha=0.8, size= 5) +
    scale_color_manual(values=colRQ) +
    labs(title="Quantile Regression AIC scores : B-Splines 3rd degree",
         x="Model",y="AIC",color="Quantile",shape="Biologic") +
    theme(axis.text = element_text(size=10,face="bold")) +
    coord_flip(); AIC_plot
  ggsave(sprintf("%s%s/%s/%s_%s_RQbs_AIC_scores.png",
         wdgraph,speciesMP$SPCourt[sp],
         analysis,etude,speciesMP$SPCourt[sp]), 
         plot = AIC_plot, 
         width = 16, height = 8, dpi=400)
  
  # Sauvegarde des outputs ----
  rm(list=c("smrq_tmp","smrq","rqsup","rqinf","rqlim","RqMod_mat","RqMod_t",
            "modelq","modelq0","df","dfrq","tmp",
            "CSLN","CSLN_pur","Mars_csv","Mars_csv_sf"))
  rm(list=ls(pattern="scene"))
  save.image(rdataout)
} #end if choixttt 1 ----
```

# Final actions and save

Rdata are saved in `rdataout`. An excel file collects data in `r binderout` , with sheets for :

-   data : contains whatever

```{r}
#| label: finalsave_xls
# wb <- loadWorkbook(binderout) # addWorksheet(wb, sheetName = "rql")
# writeData(wb, sheet = "RQbs_coeff", x = smrq_l, 
#           startCol = 1, startRow = 1,withFilter = FALSE)
# saveWorkbook(wb,file=binderout, overwrite = TRUE)
  
```

```{r}
#| label: finalsave_r

save.image(rdataout)
beepr::beep(2)
```

# References {.unnumbered}
