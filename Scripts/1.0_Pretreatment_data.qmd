---
title: "TREATMENT OF BIOLOGIC DATA FROM CSLN BEFORE SDM TREATMENT"
author: "Amélie Lehuen"
description: "add info on script"
date: last-modified
editor: source
execute:
  eval: true
  echo: false
  message: false
  warning: false
  output: true
  include: false
editor_options: 
  chunk_output_type: console
---

# TREATMENT OF BIOLOGIC DATA FROM CSLN BEFORE SDM TREATMENT
```{r}
rm(list=ls())
```

## Script preparation

### Packages

```{r}
#| label: load-packages

list_packages <-c("beepr", "knitr", "conflicted", 
    "tidyverse", "data.table")
installed_packages <- list_packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
  install.packages(list_packages[!installed_packages])
}
invisible(lapply(list_packages, library, character.only = TRUE))

```

### Working Environment

```{r}
#| label: workenvir

wdproj<-getwd()
wdmat <-"Matrices/"
wdres <- "Results/"
wdsource <- "Data/"

wdGIS <- "SIG/"
wdmsr <- "Scripts/MSR/"

flag_calc_mars<-TRUE # to calculate time-consuming mars summary by period

```

### Home made functions

```{r}
#| label: functmade

source("Scripts/0.0_SDM_functions.R")

```

## Load of External data and Basic Variables

### Output binder and data

```{r}
#| label: outfiles

binderout <- sprintf("%sCSLN_BDD.xlsx", wdres)
rdataout <- sprintf("%sCSLN_Mars_BDD.RData",wdmat)
# if exists
# load(rdataout)

```

### External data

#### Fauna

```{r}
#| label: externdata_fauna

fauna_file <- sprintf("%sFaune/CSLN/CSLN_Biology_source.xlsx",wdsource)
bioturb_file <- sprintf("%sFaune/Bioturbation_Potential.xlsx",wdsource)
CSLN_raw <- as.data.frame(read_excel(
  fauna_file,sheet = "Biology_station", na = ""))
granulo <- as.data.frame(read_excel(
  fauna_file,sheet = "Granulo", na = ""))
BioturbP <- as.data.frame(read_excel(
  bioturb_file,sheet = "Bioturbation_Potential", na = ""))
# summary(CSLN_raw)

```

#### Mars3D

```{r}
#| label: externdata_mars

mars_file <- sprintf("%sMars3D/ES_Ncf_BDD.xlsx",wdsource)
Varnames <- as.data.frame(read_excel(
  mars_file,sheet = "Varnames", na = "",
  col_names = c("Var", "Desc", "Unit", "NAval", "Dim", "Varid")))
predict <- as.data.frame(read_excel(
  mars_file,sheet = "Predicteurs", na = "",
  col_names = c("Var", "Desc", "Unit","Couche")))
saison <- as.data.frame(read_excel(
  mars_file,sheet = "Saison",
  col_names = c("Suff", "M_Def", "M_Per")))
saison[1,1] <- "" # Remplacement du NaN pour l'annee

```

#### GIS

```{r}
#| label: externdata_gis

mars_file_shp <- sprintf("%sLayers made/ES_Areas_WGS.shp",wdGIS)
mars_file_csv <- sprintf("%sES_Mars_Maps_sh.csv",wdres)
mars_file_sf <- sprintf("%sLayers made/ES_Maille_nc.shp",wdGIS)

ES_Areas <- st_read(mars_file_shp,quiet=TRUE,crs=4326) %>%
  st_transform(2154) %>%
  filter(Zone!="NA")
name_areas <- c(
  "North Upstream Mudflat", 
  "North Median Mudflat", 
  "North Downstream Mudflat", 
  "South Mudflat", 
  "Ilot Oiseaux",
  "Channel", 
  "Cote Fleurie", 
  "OffShore", 
  "Octeville",
  "Bay" )

Mars_csv <- read.csv(mars_file_csv)
Mars_csv[Mars_csv == "NaN"] <- NA
Mars_csv <- Mars_csv %>% 
  filter(!is.na(Lat) & !is.na(Lon) & !is.na(flow_m)) #%>%
#  filter(Lat!="NaN" | Lon!="NaN")

Mars_dat_sf <- st_read(mars_file_sf,quiet=TRUE,crs=4326) %>%
  st_transform(2154) %>%
  rename(NINJ=NINJ_v, Lon=Lon_c, Lat=Lat_c) %>% 
  select(-id_maille)

# Mars_mesh <- sprintf("%sMaillage Mars3D/Maillage_mars3D_WGS.shp",wdGIS)
# Mars_mesh <- st_read(Mars_mesh,quiet=TRUE,crs=4326) %>% st_transform(2154)
# cadreES_Mars <- Mars_mesh[Mars_mesh$NINJ=="Cadre_ES",] # Keep aside ES frame in shp
# Mars_mesh <- Mars_mesh[Mars_mesh$NINJ!="Cadre_ES",]# Remove of ES frame in shp

```

### Basic variables

```{r}
#| label: basicvar

speciesList <- BioturbP %>% 
  select(SPCourt,Scientific_Name) %>% 
  rename(Taxon_SNa=Scientific_Name)
speciesMP <- speciesList %>% 
  filter(SPCourt %in% 
           c("CERED","CORVO","HEDDI","MACBA","PERUL","SCRPL")) %>% 
  arrange(SPCourt)
speciesBonus <- speciesList %>%
  filter(SPCourt %in% 
           c("AREMA","BATPI","BATSA","CYACA",
             "ETELO","NEPCI","NEPHO","PYGEL")) %>%
  bind_rows(speciesMP) %>% 
  arrange(SPCourt)

reponse <- data.frame(
  Var=c("Biomass_gAFDWm2","Density_indm2","MSRtot"),
  Desc=c("Biomass","Density","Specific Respiration Rate"),
  Unit=c("gAFDW/m2","ind/m2","mW/m2"))
predictMNT <- data.frame(
  pvar=c("moyenneMu","modeMu","medianeMu",
         "siltsArgiles","sablesFins","sablesMoyens",
         "sablesGrossiers","graviers"),
  pdescr=c("Granulometric Mean","Granulometric Mode",
           "Granulometric Median","Mud and Silts",
           "Light Sands","Medium Sands","Coarse Sands","Gravels"),
  punit=c("µm","µm","µm","%","%","%","%","%"))

tidelevels<-data.frame(
  label=c("upper intertidal", "medium intertidal", "lower intertidal", "subtidal"),
  descr=c("[0-25%[ immersion time","[25-75%[ immersion time","[75-100%[ immersion time","100% immersion time")) %>% 
  mutate(level=factor(label,levels=label, ordered=TRUE))

anMars <- unique(Mars_csv$Annee) # used for RQ scripts

```

### Graphic charter

```{r}
#| label: graphchart

```

# Preliminary treatment

#### Definition of periods and tidal levels

```{r}
#| label: calculation_1

CSLN <- CSLN_raw %>% 
  rename(Taxon_SNa=ScientificName_accepted)%>%
  left_join(granulo[,-c(21:24)]) %>%
  arrange(idStationUnique, Taxon_SNa) %>% 
  mutate(IndBodySize_gAFDW=Biomass_gAFDWm2/Density_indm2)
CSLN$IndBodySize_gAFDW[CSLN$Density_indm2==0] <- 0
CSLN$SP <- "OTHER"
CSLN$SP[CSLN$Taxon_SNa %in% speciesList$Taxon_SNa] <- "SpBTA";
CSLN$SP[CSLN$Taxon_SNa %in% speciesMP$Taxon_SNa] <- "SpCh";

# Definition of seasons and temporal periods
CSLN$Season[CSLN$Mois %in% 1:3]  <- "Q1"
CSLN$Season[CSLN$Mois %in% 4:6]  <- "Q2"
CSLN$Season[CSLN$Mois %in% 7:10] <- "Q3"
CSLN$Season[CSLN$Mois %in% 11:12] <- "Q4"
CSLN$Period <- NA 
CSLN$Period[CSLN$Annee <2000 ] <- "1996-1999" 
CSLN$Period[CSLN$Annee %in% 2000:2005] <- "2000-2005"
CSLN$Period[CSLN$Annee %in% 2006:2010] <- "2006-2010"
CSLN$Period[CSLN$Annee %in% 2011:2015] <- "2011-2015"
CSLN$Period[CSLN$Annee %in% 2016:2019] <- "2015-2019"
# Definition of temporal periods
Mars_csv$Period <- NA 
Mars_csv$Period[Mars_csv$Annee <2000 ] <- "1996-1999" 
Mars_csv$Period[Mars_csv$Annee %in% 2000:2005] <- "2000-2005"
Mars_csv$Period[Mars_csv$Annee %in% 2006:2010] <- "2006-2010"
Mars_csv$Period[Mars_csv$Annee %in% 2011:2015] <- "2011-2015"
Mars_csv$Period[Mars_csv$Annee %in% 2016:2019] <- "2015-2019"
Mars_csv$Period <- as.factor(Mars_csv$Period)
# Definition of temporal periods
Mars_dat_sf$Period <- NA 
Mars_dat_sf$Period[Mars_dat_sf$Annee <2000 ] <- "1996-1999" 
Mars_dat_sf$Period[Mars_dat_sf$Annee %in% 2000:2005] <- "2000-2005"
Mars_dat_sf$Period[Mars_dat_sf$Annee %in% 2006:2010] <- "2006-2010"
Mars_dat_sf$Period[Mars_dat_sf$Annee %in% 2011:2015] <- "2011-2015"
Mars_dat_sf$Period[Mars_dat_sf$Annee %in% 2016:2019] <- "2015-2019"
Mars_dat_sf$Period <- as.factor(Mars_dat_sf$Period)
# TIDAL_LEVEL CALCULATION : should be in mars matlab script ? ----
Mars_csv$Tidal_level <- NA
Mars_csv$Tidal_level[Mars_csv$inunt>=0 & Mars_csv$inunt<0.25] <- tidelevels$label[1]
Mars_csv$Tidal_level[Mars_csv$inunt>=0.25 & Mars_csv$inunt<0.75] <- tidelevels$label[2]
Mars_csv$Tidal_level[Mars_csv$inunt>=0.75 & Mars_csv$inunt<1] <- tidelevels$label[3]
Mars_csv$Tidal_level[Mars_csv$inunt==1] <- tidelevels$label[4]
Mars_csv$Tidal_level <- factor(Mars_csv$Tidal_level, levels=tidelevels$level, ordered=TRUE)

Mars_csv_sf <- st_as_sf(Mars_csv, coords=c("Lon","Lat"),
                        crs=4326,na.fail=FALSE,remove = FALSE) %>%
  st_transform(2154)

# TIDAL_LEVEL CALCULATION : should be in mars matlab script ? ----
Mars_dat_sf$Tidal_level <- NA
Mars_dat_sf$Tidal_level[Mars_dat_sf$inunt>=0 & Mars_dat_sf$inunt<0.25] <- tidelevels$label[1]
Mars_dat_sf$Tidal_level[Mars_dat_sf$inunt>=0.25 & Mars_dat_sf$inunt<0.75] <- tidelevels$label[2]
Mars_dat_sf$Tidal_level[Mars_dat_sf$inunt>=0.75 & Mars_dat_sf$inunt<1] <- tidelevels$label[3]
Mars_dat_sf$Tidal_level[Mars_dat_sf$inunt==1] <- tidelevels$label[4]
Mars_dat_sf$Tidal_level <- factor(Mars_dat_sf$Tidal_level, levels=tidelevels$level, ordered=TRUE)
```

#### Bioturbation potential

(solan & quieros https://doi.org/10.1002/ece3.769).

MIEUX DEFINIR LES UNITES DU CALCUL BPc ET SON USAGE DENSITE? ABONDANCE?

```{r}
#| label: calculation_2

CSLN <-  CSLN %>% 
  left_join(BioturbP %>% 
              select(AphiaID,Mi,Ri), by=c("AphiaID_accepted"="AphiaID"),
            relationship ="many-to-many")
CSLN$BPc <- sqrt(CSLN$Biomass_gAFDWm2/
                  CSLN$Density_indm2)*
  CSLN$Density_indm2*CSLN$Mi*CSLN$Ri

```

#### Tidydata

```{r}
#| label: calculation_3

# Deleting unused columns
suppr_col <- c("Source","Site","Campagne","Jour","id_station","Taxon", #"Station_originelle",
             "Engin","maille_tamis","Forme_maille","nb_replicat_protocole","nb_replicat",
             "surface_engin","surface_station","Abondance","PSLCUnitaire",
             "identite_tri","identite_det","Operateur","commentaire","Methode")
CSLN <- CSLN %>% select(-all_of(suppr_col))

# Patch pour sauver les INTERMUD (avant 2000) ----
tmp <- CSLN %>% filter(Filtre=="INTERMUD") %>% select(Taxon_SNa) %>% 
  left_join(CSLN %>% group_by(Taxon_SNa) %>% 
              summarise(medInd=median(IndBodySize_gAFDW, na.rm = TRUE))) %>%
  select(medInd)
CSLN$Biomass_gAFDWm2[CSLN$Filtre=="INTERMUD"] <- as.vector(tmp$medInd)

# Deleting unusable records
CSLN <- CSLN %>% filter(!is.na(Density_indm2), !is.na(Biomass_gAFDWm2), !is.na(AphiaID_accepted),
                      longitude!="NaN",latitude!="NaN",
                      ((Biomass_gAFDWm2!=0 & Density_indm2!=0) | (Biomass_gAFDWm2==0 & Density_indm2==0))) %>%
              filter(!grepl("d?bris", Taxon_SNa))

# Removal of duplicates on the idStationUnique and SPCourt pairs
CSLN <- CSLN %>% 
  distinct(idStationUnique,SPCourt, .keep_all = TRUE) %>% 
  arrange(Annee)
# summary(CSLN)
```

#### Integration of Mars in fauna data

```{r}
#| label: calculation_4

# CONVERSION OF FAUNA DATA INTO GEOGRAPHIC TABLE
CSLN_sf <- st_as_sf(CSLN, coords=c("longitude","latitude"),
                    crs=4326,remove = FALSE) %>% 
  st_transform(2154) # transform to planar as required by st_intersection()
# st_crs(CSLN_sf) # TO CHECK GEOG DATA

# ASSIGNMENT OF AREAS TO MARS3D
Mars_csv_sf <- st_intersection(Mars_csv_sf,ES_Areas)
Mars_csv_sf$Zone <- factor(Mars_csv_sf$Zone,levels=name_areas)
Mars_dat_sf <- st_intersection(Mars_dat_sf,ES_Areas)
Mars_dat_sf$Zone <- factor(Mars_dat_sf$Zone,levels=name_areas)

# ADD NINJ OF MARS_CSV FOR EACH SAMPLING POINT IN FAUNA
CSLN_sf$NINJ <- Mars_csv_sf$NINJ[st_nearest_feature(CSLN_sf,Mars_csv_sf)]

# ASSIGNMENT OF AREAS TO SAMPLING POINTS
CSLN_sf <- CSLN_sf %>%  
  mutate(intersection = as.integer(st_intersects(geometry, ES_Areas)),
         Zone = if_else(is.na(intersection),"NA", 
                        ES_Areas$Zone[intersection]),
         Type = if_else(is.na(intersection),"NA", 
                        ES_Areas$Type[intersection])) # Type : french areas name
CSLN_sf$Zone[CSLN_sf$Zone=="NA"] <- NA; CSLN_sf$Type[CSLN_sf$Type=="NA"] <- NA;
# # SELECTION OF DATA POINT ONLY IN ES_Areas
# CSLN_sf <- st_intersection(CSLN_sf, st_union(ES_Areas)) %>% select(-intersection)

# FAUNA TABLE WITH MARS DATA
CSLN_Mars <- sf_to_df(CSLN_sf,fill=TRUE)
CSLN_Mars <- CSLN_Mars %>% left_join(Mars_csv,by=c("NINJ"="NINJ","Annee"="Annee","Period"))

# # Add missing tidal levels on other years : TO BE DELETED WHEN ALL RUN ON MARS ?
# CSLN_Mars[CSLN_Mars$NINJ %in% CSLN_Mars$NINJ[which(CSLN_Mars$Tidal_level==tidelevels$label[1])],
#           "Tidal_level"] <- tidelevels$label[1]
# CSLN_Mars[CSLN_Mars$NINJ %in% CSLN_Mars$NINJ[which(CSLN_Mars$Tidal_level==tidelevels$label[2])],
#           "Tidal_level"] <- tidelevels$label[2]
# CSLN_Mars[CSLN_Mars$NINJ %in% CSLN_Mars$NINJ[which(CSLN_Mars$Tidal_level==tidelevels$label[3])],
#           "Tidal_level"] <- tidelevels$label[3]
# CSLN_Mars[CSLN_Mars$NINJ %in% CSLN_Mars$NINJ[which(CSLN_Mars$Tidal_level==tidelevels$label[4])],
#           "Tidal_level"] <- tidelevels$label[4]

# Suppression of missing information for levels
CSLN_Mars <- CSLN_Mars %>% filter(!is.na(Zone)) #!is.na(Tidal_level)
# summary(CSLN_Mars)

```

#### Metabolic rate calculation

Made with yearly med temperature for the moment

```{r}
#| label: calculation_5

CSLN_Mars$MSR_mW <- NA
setwd(wdmsr) # where the function is, with repertory in it
source("MSR.R")
for (i in which(!is.na(CSLN_Mars$temp_m) & CSLN_Mars$SP!="OTHER")){ # i=1
  CSLN_Mars$MSR_mW[i] <- msr(CSLN_Mars$Density_indm2[i],
                           CSLN_Mars$Biomass_gAFDWm2[i],
                           CSLN_Mars$AphiaID_accepted[i],
                           CSLN_Mars$temp_m[i],1,"w")*1000 #Mean MSR (mW/ind)
}
setwd(wdproj) # when the package is done, with repertory in it, no more needed
CSLN_Mars$MSRtot <- CSLN_Mars$MSR_mW*CSLN_Mars$Density_indm2

```

### Final set for basis table

```{r}
#| label: calculation_6

CSLN_Mars <- CSLN_Mars %>% 
  select(-all_of(c("AphiaID_accepted","sfg_id","point_id",
                   "Lon","Lat","x","y","intersection")))
facto_col <- c("Filtre","Type", #,"Zone","Tidal_level",
              "Period","Season","Annee","Mois",
              "idStationUnique","Station_originelle","NINJ",
              "SP","Taxon_SNa","SPCourt") #
CSLN_Mars <- CSLN_Mars %>% 
  group_by(list(facto_col)) %>% 
  arrange(list(facto_col), .by_group = TRUE) %>% 
  ungroup
CSLN_Mars <- CSLN_Mars %>% 
  select(-`list(facto_col)`)
# MOVE DESCRIPTIVE FIELDS AT BEGINNING OF TABLE
CSLN_Mars <- CSLN_Mars %>% 
  relocate(c(all_of(facto_col)))
CSLN_Mars <- CSLN_Mars %>% 
  relocate(c("IndBodySize_gAFDW","MSR_mW","MSRtot","BPc"),.after=Biomass_gAFDWm2)
# FACTORISATION FOR BASIS TABLE
CSLN_Mars[,facto_col] <- lapply(CSLN_Mars[,facto_col], as.factor)

# Creation of vector with number of unique values for all field in databasis
CSLN_unique <- CSLN_Mars %>% 
  summarise(across(everything(),n_distinct))
annees <- CSLN_Mars %>% 
  distinct(Annee) %>% 
  arrange(Annee) %>% 
  pull(Annee)
mois <- CSLN_Mars %>% 
  distinct(Mois) %>% 
  arrange(Mois) %>% 
  pull(Mois)
CSLN_Stations <- CSLN_Mars %>% 
  select(Station_originelle,Filtre,Zone,Period,longitude,latitude) %>%
  group_by(Station_originelle,Filtre,Zone,Period) %>%
  summarise(longitude=mean(as.numeric(longitude),na.rm=TRUE),
            latitude=mean(as.numeric(latitude),na.rm=TRUE)) %>%
  unite(SP, Station_originelle,Period,remove=FALSE)

CSLN_pur <- CSLN_Mars # CSLN_Mars <- CSLN_pur #summary(CSLN_pur) # Save before more modifications
# summary(CSLN_Mars)

```

#### Discard data not relevant for GIPSA

```{r}
#| label: calculation_7

CSLN <- CSLN_Mars %>%
  filter(!Zone  %in% c("Channel","Bay")) %>% # at minimum
  filter(Period != "1996-1999") %>%
  filter(!SPCourt %in% c("SEMBA","AMPIM","AUSMO",
                         "BALCR","MYTED","BIVAL","ANNEL")) %>%
  mutate(across(where(is.factor), fct_drop))
CSLN_mud <- CSLN %>%
  filter(grepl("Mudflat", Zone)) # focus on mudflat only


```

## Dataset summaries

```{r}
#| label: calculation_8

CSLN_mud_BTA <- CSLN_mud %>% # maxime
  filter(Taxon_SNa %in% speciesList$Taxon_SNa) %>%
  filter(!is.na(MSRtot),!is.na(BPc)) %>%
  group_by(idStationUnique,Zone,Tidal_level,Period,Annee) %>% 
  summarise(MSR.iZTPAS = sum(MSRtot, na.rm =TRUE),
            BPc.iZTPAS = sum(BPc, na.rm =TRUE)) %>% 
  group_by(Zone,Period,Tidal_level,Annee) %>% #,Season
  summarise(MSR.ZTPAS = mean(MSR.iZTPAS, na.rm =TRUE),
            BPc.ZTPAS = mean(BPc.iZTPAS, na.rm =TRUE))

CSLN_mud_spm <- CSLN_mud %>% 
  select(Zone,Tidal_level,Period,Annee,Season,
         SPCourt,Taxon_SNa,Density_indm2,Biomass_gAFDWm2,
         MSRtot,BPc) %>% # 
  # filter(Taxon_SNa %in% speciesList$Taxon_SNa) %>%
  complete(nesting(Zone,Tidal_level,Period,Annee,Season),
           nesting(SPCourt,Taxon_SNa), # 
           fill=list(Biomass_gAFDWm2=0,Density_indm2=0,
                     MSRtot=0,BPc=0)) %>% 
  group_by(Zone,Tidal_level,Period,Annee,SPCourt,Taxon_SNa) %>% # ,Season
  summarise(Biomass_m=median(Biomass_gAFDWm2,na.rm=TRUE),
            Biomass_sd=sd(Biomass_gAFDWm2,na.rm=TRUE),
            Density_m=median(Density_indm2,na.rm=TRUE),
            Density_sd=sd(Density_indm2,na.rm=TRUE),
            MSRtot_m=median(MSRtot,na.rm=TRUE),
            MSRtot_sd=sd(MSRtot,na.rm=TRUE),
            BPc_m=median(BPc,na.rm=TRUE),
            BPc_sd=sd(BPc,na.rm=TRUE),
            n_records = n())

```

#### Diversity table by zone

```{r}
#| label: calculation_9

CSLN_sm <- CSLN_mud %>%
  select(Zone,Tidal_level,Period,
         SPCourt,Taxon_SNa,Density_indm2,Biomass_gAFDWm2,
         MSRtot,BPc) %>% # Annee,Season,
  filter(Taxon_SNa %in% speciesList$Taxon_SNa) %>%
  group_by(Zone,Tidal_level,Period) %>% # ,Annee,Season
  summarise(SR=n_distinct(SPCourt), 
            n_records=n(),
            Biomass_t=sum(Biomass_gAFDWm2,na.rm=TRUE),
            MSRtot_t=sum(MSRtot,na.rm=TRUE),
            BPc_t=sum(BPc,na.rm=TRUE)) %>%
  unite("code",Zone,Tidal_level,Period,sep = "_",remove = FALSE) # ,Annee,Season

```

#### Contengency table

SPCourt alone lead to duplicate lines for pivot_wider, keep Taxon = OK

```{r}
#| label: calculation_10

CSLN_cont <- CSLN_mud %>% 
  select(Zone,Tidal_level,Period, # Annee,Season,
         Taxon_SNa,Density_indm2) %>% # 
  complete(nesting(Zone,Tidal_level,Period),
           nesting(Taxon_SNa), # ,Annee,Season
           fill=list(Density_indm2=0)) %>% 
  group_by(Zone,Tidal_level,Period,Taxon_SNa) %>% # ,Annee,Season
  summarise(Density_m=median(Density_indm2,na.rm=TRUE)) %>% 
  select(Zone,Tidal_level,Period,
         Taxon_SNa,Density_m) %>% # ,Annee,Season
  group_by(Zone,Tidal_level,Period,Taxon_SNa) %>% # ,Annee,Season
  pivot_wider(names_from = Taxon_SNa, 
              values_from = Density_m, 
              values_fill = 0) %>%
  unite("code",Zone,Tidal_level,Period,sep = "_",remove = TRUE) # ,Annee,Season
  CSLN_cont_mat<-as.matrix(CSLN_cont[,-1])
  row.names(CSLN_cont_mat)<-CSLN_cont$code

```

#### Shannon and Pielou indexes

Pielou's index of equitability (J ): normalization of the Shannon-Wiener index (H'), a value of taxonomic diversity as a function of the number of taxa per area and the abundance of individuals within each taxon; 0 means that one taxon dominates the others, 1 means that there is an equitable distribution of individuals between taxa

```{r}
#| label: calculation_11

CSLN_sm$Shannon<-diversity(CSLN_cont_mat,index="shannon")
CSLN_sm$Pielou<-CSLN_sm$Shannon/log2(CSLN_sm$SR)

CSLN_cont_mat<-subset(CSLN_cont_mat,rowSums(CSLN_cont_mat)!=0)
CSLN_cont_name<-data.frame(code=row.names(CSLN_cont_mat))  %>% 
  separate(code, c("Zone", "Tidal_level", "Period"), sep = "_",remove = TRUE) %>% # , "Annee","Season"
  unite("ZP",Zone,Period,sep = "_",remove = FALSE) %>% 
  unite("ZT",Zone,Tidal_level,sep = "_",remove = FALSE) %>% 
  # unite("ZA",Zone,Annee,sep = "_",remove = FALSE) %>%
  # unite("ZS",Zone,Season,sep = "_",remove = FALSE) %>%
  unite("PT",Period,Tidal_level,sep = "_",remove = FALSE) %>%
  # unite("PS",Period,Season,sep = "_",remove = FALSE) %>%
  # unite("ZPA",Zone,Period,Annee,sep = "_",remove = FALSE) %>%  
  unite("ZTP",Zone,Tidal_level,Period,sep = "_",remove = FALSE) #%>%
  # unite("ZPS",Zone,Period,Season,sep = "_",remove = FALSE) %>%
  # unite("ZTPA",Zone,Tidal_level,Period,Annee,sep = "_",remove = FALSE)# %>%
  # unite("ZTPS",Zone,Tidal_level,Period,Season,sep = "_",remove = FALSE)

# save.image(file = paste(wdmat,"CSLN_Mars_BDD",".RData", sep=""))

```

# SDM preparations
```{r}
#| label: sdm_prep
Var_choosen<-c("flow_mxd","inunt","sal_dtd","temp_m","mudrate_m","tenfon_mxd","bathy")
Mod_chosen<-list(c("flow_mxd","inunt"),
                  c("mudrate_m","tenfon_mxd"),
                  c("sal_dtd","temp_m"),
                  c("sal_dtd","bathy"))
taus <- c(0.5,0.9,0.95,0.975) # c(0.5,0.85,0.9,0.95,0.975,0.99) #c(1:19/20,0.975,0.99)
taus_l<-setNames(as.list(taus),sprintf("%0.3f",taus))
tauchoice<-0.95

model_types<- data.frame(rbind(
  c(analysis="RQ linear with addition",code="RQ2add",bdd="rqdata"),
  c(analysis="RQ linear with interaction",code="RQ2int",bdd="rqdata"),
  c(analysis="RQ bifactorial gaussian",code="RQ2nli",bdd="nlrqdata"),
  c(analysis="RQ linear with bSpline",code="RQ2bsp",bdd="rqbsdata")))

reponse<-reponse %>%
  filter(Var %in% c("Biomass_gAFDWm2","Density_indm2")) %>%
  rowid_to_column("id") %>% 
  mutate(whole=sprintf("%s (%s)",Desc,Unit))

reponse_l<-reponse %>%
  as.list %>% 
  transpose(.) %>% 
  setNames(c("Biomass","Density"))

pred_red <- predict %>% 
  subset(Var %in% Var_choosen) %>% 
  arrange(match(Var,Var_choosen)) %>%
  rowid_to_column("id") %>%
  mutate(whole=sprintf("%s (%s)",Desc,Unit)) %>% 
  as.list

pred_red_comb<-map(as.list(c(1:2)), \(idx) #idx=2
  {map(pred_red,
      ~combn(.,idx, simplify = FALSE)) %>% transpose(.)}  ) %>% 
  setNames(paste0("x",1:2)) %>% 
  map2(.,map_depth(.,2, ~paste0(.x$id,
                           ifelse(length(.x$id)==1,"0",""),
                           collapse="") ),
       ~setNames(.x,.y ) ) 

pred_red_comb_t<-pred_red_comb %>% 
  list_flatten(name_spec = "{inner}") %>%
  map_depth(.,1,
          ~modify_at(.x,"id",~c(.x,
                           if(length(.x)==1){0} ) ) ) %>% 
  map_depth(.,2,~paste0(.x,collapse="__") ) %>% 
  bind_rows() %>% 
  mutate(id=sub("__","",id))

pred_red_comb_sel<-map(pred_red_comb,
      ~map(Mod_chosen, \(mod) keep(.x,~identical(.x$Var, mod)) ) ) %>% 
  map(., compact) %>% compact %>% 
  map(.,list_flatten) %>% 
  list_flatten(.,name_spec= "{inner}")


sdm_comb<- tidyr::expand_grid(model_types %>% rowid_to_column("type"),
                              speciesMP %>% rowid_to_column("sp"),
                         setNames(reponse, nm=sprintf("%s_bio",names(reponse))),
                         saison %>% 
                           filter(M_Def %in% c("Year")) %>%
                           rowid_to_column("sai"),
                         pred_red_comb_t,
                         .name_repair = "universal") %>%
  unite("type",c(sp,sai,id_bio,id),sep="", remove = FALSE) %>% 
  unite("sdmname",c(code,type),sep="_", remove = FALSE) %>% 
  relocate(sdmname) %>% 
  separate(Var,c("name_x1","name_x2"), sep="__",remove = FALSE) %>% 
  separate(Desc,c("Desc_x1","Desc_x2"), sep="__",remove = FALSE) %>% 
  separate(Unit,c("Unit_x1","Unit_x2"), sep="__",remove = FALSE) %>% 
  separate(whole,c("whole_x1","whole_x2"), sep="__",remove = FALSE) %>% 
  mutate(titre=sprintf("%s based on %s\n%s * %s",analysis,whole_bio,whole_x1,whole_x2))

sdm_comb_sel<-sdm_comb %>% 
  filter(sp==1 & sai==1 & id %in% names(pred_red_comb_sel) )
sdm_comb_sel_l<-sdm_comb_sel %>% 
  split(.,f=sdm_comb_sel$Desc) %>% 
  map(., ~split(.x,f=.x$sdmname))

Mars_SDM<-Mars_dat_sf %>% 
  select(c(NINJ,Lon,Lat,Zone,Tidal_level,Period,Annee,pred_red$Var)) %>%
  filter(!Zone %in% c("Bay")) %>% #, "Ilot Oiseaux"
  mutate(across(where(is.factor), fct_drop))
ES_Areas <- ES_Areas %>% 
  filter(!Zone %in% c("Bay")) %>% #, "Ilot Oiseaux"
  mutate(across(where(is.factor), fct_drop))
CSLN_Mars <- CSLN_Mars %>%
  filter(!Zone %in% c("Bay")) %>% #, "Ilot Oiseaux"
  mutate(across(where(is.factor), fct_drop))

tm_areas <- ES_Areas %>% 
  st_transform(4326)

areas_pal<-pal_csps(10); names(areas_pal)<-name_areas

```

Attention, this can take a while...
```{r}
if(flag_calc_mars){
  Mars_SDM_per<- Mars_SDM %>% 
                 group_by(across(NINJ:Period)) %>% 
                 dplyr::summarise(across(where(is.numeric),~median(.x,na.rm=TRUE)))
}
# correction of tidal levels
# Mars_SDM_per<-Mars_SDM_per %>% 
#   mutate(Tidal_level=case_match(Tidal_level,
#                                 "Supratidal" ~"upper intertidal", 
#                                 "Intertidal" ~"medium intertidal", 
#                                 "Infratidal" ~"lower intertidal",
#                                 "Subtidal" ~"subtidal",
#                                 .default = Tidal_level) ) %>% 
#   mutate(Tidal_level=ordered(Tidal_level,tidelevels$level))
# Mars_SDM_per<-Mars_SDM_per %>% 
#     filter(!Zone %in% c("Bay", "Ilot Oiseaux")) %>%
#   mutate(Zone=factor(as.character(Zone),levels=name_areas, ordered=TRUE)) %>% 
#   mutate(across(where(is.factor), fct_drop))


```

# Final actions and save

Rdata are saved in `r rdataout`. An excel file collects data in `r binderout` , with sheets for :

-   CSLN: contains the basic data treated
-   CSLN_Mars: contains the basic data with Mars data
-   CSLN_sm: contains
-   Varnames: contains
-   Predicteurs: contains
-   Saison: contains
-   Reponse: contains
-   Species: contains

```{r}
#| label: finalsave_xlsx
#| eval: false
wb <- loadWorkbook(paste(wdres,"CSLN_BDD.xlsx", sep=""))
writeData(wb, sheet = "CSLN", x = CSLN, 
          startCol = 1, startRow = 1,withFilter = FALSE)
writeData(wb, sheet = "CSLN_Mars", x = CSLN_Mars, 
          startCol = 1, startRow = 1,withFilter = FALSE)
writeData(wb, sheet = "CSLN_sm", x = CSLN_sm, 
          startCol = 1, startRow = 1,withFilter = FALSE)
writeData(wb, sheet = "Varnames", x = Varnames, 
          startCol = 1, startRow = 1,withFilter = FALSE)
writeData(wb, sheet = "Predicteurs", x = predict, 
          startCol = 1, startRow = 1,withFilter = FALSE)
writeData(wb, sheet = "Saison", x = saison, 
          startCol = 1, startRow = 1,withFilter = FALSE)
writeData(wb, sheet = "Reponse", x = reponse, 
          startCol = 1, startRow = 1,withFilter = FALSE)
writeData(wb, sheet = "Species", x = speciesList, 
          startCol = 1, startRow = 1,withFilter = FALSE)
saveWorkbook(wb,file=paste(wdres,"CSLN_BDD",".xlsx", sep=""),
             overwrite = TRUE)

write.csv(CSLN_Stations,file=paste(wdres,"CSLN_Stations", ".csv",sep=""), na = "",row.names = FALSE)
```

```{r}
#| label: finalsave_r
#| eval: false

# rm(list=lsf.str()) # remove all functions
rm(flag_calc_mars)
rm(list=(ls()[grepl("tmp|^wd", ls())] ))
save(list=(setdiff(ls(), lsf.str())),
     file = paste0(rdataout))
beepr::beep(2)

```

# Supplementary data

## Session information

::: {.callout-tip collapse="true"}
## Expand for R Session Info

```{r, echo = FALSE}
#| include: true

library(sessioninfo)
pkg_sesh <- session_info(pkgs = "attached")
quarto_version <- system("quarto --version", intern = TRUE)
pkg_sesh$platform$quarto <- paste(
  system("quarto --version", intern = TRUE),
  "@",
  quarto::quarto_path()
  )
pkg_sesh
```
:::

# References {.unnumbered}
