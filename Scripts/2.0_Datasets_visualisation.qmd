---
title: "TREATMENT OF BIOLOGIC DATA FROM CSLN BEFORE SDM TREATMENT"
author: "Am√©lie Lehuen"
description: "add info on script"
date: last-modified
editor: source
execute:
  eval: true
  echo: false
  message: false
  warning: false
  output: true
  include: false
editor_options: 
  chunk_output_type: console
---

```{r}
rm(list=ls())
```

## Script preparation

### Packages

```{r}
#| label: load-packages
list_packages <-c("beepr", "knitr", "conflicted", 
    "tidyverse", "data.table")
installed_packages <- list_packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
  install.packages(list_packages[!installed_packages])
}
invisible(lapply(list_packages, library, character.only = TRUE))
```

### Working Environment

```{r}
#| label: workenvir

etude <- "CSLN_Mars"
espece <- "CERED"

wdmat <-"Matrices/"
wdres <- "Results/"
wdgraph <- "Plots/"
wdGIS <- "SIG/"

flag_mars_gif<-FALSE # to calculate time-consuming mars summary by period
save_plot<-TRUE
```

### Home made functions

```{r}
#| label: functmade

source("Scripts/0.0_SDM_functions.R")

```

## Load of External data and Basic Variables

### External data

```{r}
#| label: externdata

rdatain <- sprintf("%sCSLN_Mars_BDD.RData",wdmat)
load(rdatain)
```

### Output binder and data

```{r}
#| label: outfiles

rdataout <- sprintf("%sCSLN_Mars_plot",wdmat)
# if exists
if(!flag_mars_gif) { load(paste0(rdataout,".RData")) }

```

### Basic variables

```{r}
#| label: basicvar

sp <- which(speciesMP$SPCourt == espece)
sai <- which(saison$M_Def == "Year") #Year Winter Summer

```

### Graphic charter

```{r}
#| label: graphchart

my.dpi<-100

```

# Material and methods

## Study area

The Seine estuary has been studied regarding several historically known areas that have either habitat or communities differences. These areas are mainly mudflats and subtidal areas, are represented in @fig-map.

```{r}
#| label: prefig-map

tmap_mode("plot") # "plot" "view"
# Extract data of interest
tm_areas <- ES_Areas %>% 
  st_transform(4326)

# Zoom tm_boxes
tm_boxestuary<-bb(tm_areas)
tm_box_mud <- ES_Areas %>%  
  dplyr::filter(grepl("Mudflat",ES_Areas$Zone)) %>%
  st_transform(4326) %>% bb(ext=2)
# tm_boxchannel<-bb(c(xmin=-2.5, ymin=49.0, xmax=1.5, ymax=51.0) )
tm_boxchannel<-bb(tm_boxestuary, ext=14)

# Extract Open street map background based on data

# osm_df <- read_osm(bb(Mars_SDM), ext=1, type= "osm") #stamen-watercolor osm
# osm_df_mud <- read_osm(tm_box_mud, ext=1, type= "osm") #stamen-watercolor osm
# osm_df_wat_bay <- read_osm(tm_boxchannel, ext=1, type= "stamen-watercolor")
# osm_df_wat_estu <- read_osm(tm_boxestuary, ext=1, type= "stamen-watercolor")
# save(osm_df,osm_df_mud,osm_df_wat_bay,osm_df_wat_estu, file=sprintf("SIG/OSM_extraction.RData"))
load(sprintf("SIG/OSM_extraction.RData"))

# create a map of context with red rect of area of interest
tm_bay<-
  tm_shape(osm_df_wat_bay) +  
    tm_rgb(saturation = .6, alpha= 0.8) +
  tm_shape(st_as_sfc(tm_boxestuary)) + 
    tm_borders("red", lwd = 2) +
  tm_layout(legend.show= FALSE) 
tm_estu<-tm_shape(osm_df_wat_estu) +  
    tm_rgb(saturation = .6, alpha= 0.8) +
  tm_shape(tm_areas) +  
    tm_fill(col = "Zone", title="Areas", palette = areas_pal, alpha = 0.5) +
  tm_shape(st_as_sfc(tm_box_mud)) + 
    tm_borders("red", lwd = 2) +
  tm_layout(legend.show= FALSE)

# Create main map
tm_Bio<-
  tm_shape(osm_df_mud) +  
    tm_rgb(saturation = .6, alpha= 0.8) +
  tm_shape(tm_areas) +  
    tm_fill(col = "Zone", title="Areas", palette = areas_pal, alpha = 0.5) +
    # tm_text("Zone", size = .8, col= "black") +
    tm_borders("grey", lwd = 1.5) +
  tm_shape(CSLN_sf) +
    tm_dots(col="grey30", size=0.1, alpha = 0.3) +
  tm_scale_bar(position = c("LEFT", "BOTTOM"), width = 0.15) + #SCALE
  tm_compass(type = "8star",position = c("LEFT", "TOP"), size = 2) +  #NORTH COMPASS
  tm_layout(#legend.outside = TRUE,
    legend.position= c("center","BOTTOM"),
    legend.title.size=.8,legend.text.size=.5,
    legend.bg.color="white",legend.bg.alpha=0.6)

# arrange maps insets thanks to patchwork !
tm_Bio_g<-tmap_grob(tm_Bio)
tm_bay_g<-tmap_grob(tm_bay)
tm_estu_g<-tmap_grob(tm_estu)
design <- c(
  area(t= 1, b= 14, l= 1, r= 20),
  area(t= 4, b= 6, l= 18, r= 20),
  area(t= 8, b= 11, l= 17, r= 20) )
tm_study_map<- wrap_plots(tm_Bio_g,tm_bay_g,tm_estu_g,design = design)

ggsave(plot = tm_study_map, 
       width = 10,  height = 7, dpi=my.dpi,
       filename=sprintf("%sfig-map.tiff",wdgraph)) #
```

```{r}
#| label: map_html
#| include: true

tmap_mode("view") # "plot" "view"
tm_study_map_html<-
  tm_basemap(leaflet::providers$OpenStreetMap.HOT) +
  tm_shape(tm_areas) +  
    tm_fill(col = "Zone", palette = areas_pal, alpha = 0.5, legend.show = FALSE) +
    # tm_text("Zone", size = .8, col= "black") +
    tm_borders("grey", lwd = 1.5) +
  tm_shape(CSLN_sf) +
    tm_dots(col="Zone", title="Areas", palette = areas_pal, size=0.05, alpha = 0.7) +
  tm_layout(legend.show=FALSE)
tm_study_map_html
tmap_save(tm=tm_study_map_html, 
          dpi=my.dpi, 
          filename = "SIG/Estuary_map.html")

```

## Predictors calculation and selection

```{r}
#| label: pl_mars_corr
#| include: true

df <- CSLN_mud %>%
  filter(SPCourt == espece) %>% 
  select(paste(predict[,1],saison[sai,1],sep=""),
         map(reponse_l,~.x$Var) %>% unlist(., use.names=FALSE)) %>%
  select(-c("eptot_dt"))

pl_mars_corr <- ggpairs(df, 
                        labeller=label_wrap_gen(width = 10,multi_line = TRUE),
                        upper = list(continuous = f.corr_col),
                        lower = list(continuous=
                                       wrap("smooth", size = .3,
                                            alpha = 0.4, color = "aquamarine4")),
                        columnLabels = c(predict[!predict$Var %in% c("eptot_dt"),2],reponse[,3]),
                        progress=FALSE) +
      theme(axis.text = element_text(size=8),
            strip.text.y = element_text(size=8))

ggsave(plot = pl_mars_corr, 
       width = 16, height = 9, dpi=my.dpi,
       filename=sprintf("%s%s/fig-mars_corr.tiff",wdgraph,espece) )

```

### Abiotic factor PCA
https://f0nzie.github.io/machine_learning_compilation/detailed-study-of-principal-component-analysis.html
```{r}
#| label: abiotic_acp
pca_data<-Mars_csv_sf %>% 
  sf_to_df(fill=TRUE) %>% # CSLN_Mars
  select(-ends_with("_s"),-ends_with("_w")) %>% 
  drop_na() %>% 
  rename_with(~predict$Desc,predict$Var)
gp_tidal <- pca_data %>% 
  select("Tidal_level") %>% pull()
gp_zone <- pca_data %>% 
  select("Zone") %>%  pull()

pca_res<-pca_data %>%
  select(-any_of(c("Lon","Lat","x","y","point_id","sfg_id","id",
                   "NINJ","Period","Annee",
                   "Type"))) %>%  # ,"Tidal_level","Zone"
  relocate(Zone,Tidal_level,`inundation time`) %>% 
  FactoMineR::PCA(., quali.sup=1:2, scale.unit = TRUE, graph=FALSE) #quanti.sup=3, 
pca_res2<-explor::prepare_results(pca_res) 
pca_res3<-get_pca_var(pca_res)
pca_supp<-pca_res2$vars %>% 
  # select(-any_of(c("P.value","V.test"))) %>% 
  select(any_of(c("Variable","Level","Axis","Coord"))) %>% 
  filter(Variable %in% c("Zone","Tidal_level") & Axis %in% c(1,2)) %>% 
  pivot_wider(names_from = Axis, names_prefix = "ax", values_from = Coord)
set.seed(123)
pca_res3.km <- kmeans(pca_res3$coord, centers = 3, nstart = 25)
pca_res3.grp <- as.factor(pca_res3.km$cluster)

# get_eig(pca_res) 
pl_pca1<-fviz_screeplot(pca_res, addlabels = TRUE)
pl_pca_con<-fviz_contrib(pca_res, choice = "var", axes = c(1,2))
pl_pca_conl <- map( 1:4, ~ { 
  tmp <- fviz_contrib(pca_res, 
         # fviz_cos2(pca_res, 
              choice = "var", axes=.x,
              fill="contrib",color="white",
              # fill="cos2",color="white",
              ggtheme=theme_void())  
  tmp + geom_text(aes(label=tmp$data$name), 
              angle=90, y=0, hjust = 0,
              fontface="bold", size=4.5) +
    scale_fill_gradientn(colors=c("#00AFBB", "#E7B800", "#FC4E07")) +
    theme_void() +
    theme(plot.title = element_blank(),
          legend.position = "none") } )

pl_pca_conl[[2]]$layers[[3]]$aes_params$angle<-0  # cos => layer 2
pl_pca_conl[[2]] <- pl_pca_conl[[2]] + coord_flip()
pl_pca_conl[[3]]$layers[[3]]$aes_params$angle<-0  # cos => layer 2
pl_pca_conl[[3]] <- pl_pca_conl[[3]] + coord_flip()

pl_pca12<-fviz_pca_var(pca_res, axes = c(1, 2), # aussi fviz_pca_ind
             repel = TRUE, labelsize = 5,
             # col.var = pca_res3.grp , palette = c("#00AFBB", "#E7B800", "#FC4E07"),
             col.var = "contrib" , gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
             ggtheme = theme_bw()) +
  labs(color="Variable\ncontribution") +
  theme(legend.position = "bottom",
        plot.title = element_blank()) # ; pl_pca12
pl_pca13<-fviz_pca_var(pca_res, axes = c(1, 3), # aussi fviz_pca_ind
             repel = TRUE, labelsize = 5,
             # col.var = pca_res3.grp , palette = c("#00AFBB", "#E7B800", "#FC4E07"),
             col.var = "contrib" , gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
             ggtheme = theme_bw()) +
  labs(color="Variable\ncontribution") +
  theme(legend.position = "bottom",
        plot.title = element_blank()) # ; pl_pca13
# if(save_plot){
#   ggsave(filename=sprintf("%sHMS_R/fig-pca3.tiff", wdgraph),
#     plot =  pl_pca12,
#     width = 9, height = 10, dpi = my.dpi )  }

pl_pca_p12 <- pl_pca_conl[[1]] + plot_spacer() + pl_pca12 + pl_pca_conl[[2]] +
  plot_layout(heights = c(1,2),widths = c(2,1)) ; pl_pca_p12
pl_pca_p13 <- pl_pca_conl[[1]] + plot_spacer() + pl_pca13 + pl_pca_conl[[3]] +
  plot_layout(heights = c(1,2),widths = c(2,1)) # ; pl_pca_p13
if(save_plot){
  ggsave(filename=sprintf("%sHMS_R/fig-pca_abiotic_12.tiff", wdgraph),
    plot =  pl_pca_p12,
    width = 10, height = 10, dpi = my.dpi )  }
if(save_plot){
  ggsave(filename=sprintf("%sHMS_R/fig-pca_abiotic_13.tiff", wdgraph),
    plot =  pl_pca_p13,
    width = 10, height = 10, dpi = my.dpi )  }

pl_pca12_tmp<-pl_pca12; pl_pca12_tmp$layers[[3]]$aes_param$size<-4
pl_pca12bis<- pl_pca12 - # '-' added as function to add layer under plot
  geom_point(data=pca_supp %>% filter(Variable=="Zone"),
            aes(x=ax1,y=ax2),
            color="blue4", alpha=.8 ) -
  geom_text(data=pca_supp %>% filter(Variable=="Zone"),
            aes(x=ax1,y=ax2, label=Level),
            color="blue4", alpha=.7, vjust=1,hjust="inward" ) -
  geom_line(data=pca_supp %>% filter(Variable=="Tidal_level"),
            aes(x=ax1,y=ax2),
            color="firebrick", alpha=.8, lty=3 ) -
  geom_point(data=pca_supp %>% filter(Variable=="Tidal_level"),
            aes(x=ax1,y=ax2),
            color="firebrick", alpha=.8 ) -
  geom_text(data=pca_supp %>% filter(Variable=="Tidal_level"),
            aes(x=ax1,y=ax2, label=Level),
            color="firebrick", alpha=.7, vjust=1,hjust="inward" ) +
  labs(title="PCA with Areas and Tidal level supplementary variables",
       color="Variable\ncontribution") # ; pl_pca6

pl_pca_p12_L <- 
  # wrap_plots((pl_pca1/ pl_pca12), pl_pca4, pl_pca5) +
  wrap_plots((pl_pca1/ pl_pca12_tmp), pl_pca12bis) +
  # wrap_plots((pl_pca1/ pl_pca_con), pl_pca12) +
  # plot_layout(widths = c(1, 2, 2)) +
  # plot_layout(widths = c(1, 2)) +
  plot_layout(guides="collect") +
  plot_annotation(tag_levels = c("A")) &
  theme(legend.position='bottom') ; pl_pca_p12_L
if(save_plot){
  ggsave(filename=sprintf("%sHMS_R/fig-pca_abiotic_all.tiff", wdgraph),
    plot =  pl_pca_p12_L,
    width = 12, height = 10, dpi = my.dpi )  }

# pl_pca4<-fviz_pca(pca_res,  # fviz_pca_biplot idem fviz_pca
#                 col.ind = gp_tidal,  # habillage or col.ind
#                 palette = "Spectral", addEllipses = TRUE,
#                 legend.title = "Group",
#                 label = "var", col.var = "black", repel = TRUE) +
#   coord_fixed(ratio=.4) +
#   theme(legend.position = "bottom")

# Textes
pca_res2$eig %>% filter(percent>(1/nrow(.)*100)) %>% 
  pull(percent) %>% sum
pca_res2$eig %>% filter(percent>(1/nrow(.)*100)) %>% 
  mutate(percent=paste0(round(percent,1)," %"),
         dim=paste0("PC", dim)) %>%
  unite("eig",dim, percent, sep = " = ") %>% 
  pull %>% paste0(., collapse = ", ")
pl_pca_con$data %>% filter(contrib>(1/nrow(.)*100)) %>%
  mutate(contrib=paste0("(",round(contrib,1)," %)")) %>%
  unite("cont",name, contrib, sep = " ") %>% 
  pull %>% paste0(., collapse = ", ")

pca_res2$vars %>% filter(Contrib>(1/14*100)) %>%
  filter(Class=="Quantitative",
         Axis<=3) %>% 
  select(Variable,Axis,Contrib) %>% 
  arrange(Axis, desc(Contrib)) %>% 
  mutate(Contrib=paste0("(",round(Contrib,1)," %)"),
         Axis=paste0("PC",Axis)) %>%
  unite("val",Variable, Contrib, sep = " ") %>% 
  group_by(Axis) %>% 
  mutate(val = paste0(val, collapse = ", ")) %>% 
  unique() %>% 
  unite("all",Axis, val, sep = ": ") %>% 
  pull(all) %>% paste0(., collapse = ". ")
pca_res2$vars %>% filter(Cos2>(1/14)) %>%
  filter(Class=="Quantitative",
         Axis<=3) %>% 
  select(Variable,Axis,Cos2) %>% 
  arrange(Axis, desc(Cos2)) %>% 
  mutate(Cos2=paste0("(",round(Cos2,1),")"),
         Axis=paste0("PC",Axis)) %>%
  unite("val",Variable, Cos2, sep = " ") %>% 
  group_by(Axis) %>% 
  mutate(val = paste0(val, collapse = ", ")) %>% 
  unique() %>% 
  unite("all",Axis, val, sep = ": ") %>% 
  pull(all) %>% paste0(., collapse = ". ")

pca_res2$vars %>% 
  # filter(Contrib>(1/nrow(.)*100)) %>%
  filter(Class=="Quantitative",
         Axis<=3) %>% 
  select(Variable,Axis,Cos2,Contrib) %>% 
  group_by(Axis) %>% 
  pivot_wider(names_from = Axis, names_prefix = "PC", values_from = c(Cos2,Contrib)) %>% 
  gt() %>% 
  tab_header(
    title = "PCA results",
    subtitle = "Abiotic variables"
  ) %>%
  sub_missing(missing_text = '-') %>%
  # cols_hide(starts_with("Contrib")) %>%
  tab_spanner_delim(delim = "_") %>%
  tab_options(
    table.font.size = 10,
    row_group.border.top.width = px(3),
    row_group.font.weight = "bold" ) %>% 
  fmt_number(decimals=2,drop_trailing_zeros=FALSE) %>% 
  # tab_style_body(
  #   style = cell_text(weight = "bold"),
  #   fn = where(~.x>1/14)
  # ) %>% 
  opt_vertical_padding(scale = .2) %>% 
  opt_horizontal_padding(scale = .5) %>% 
  opt_stylize(style = 1) #, color = 'gray'


# # version viewer ---
# # explor::explor(pca_res)
# pl_pca<-explor::PCA_var_plot(pca_res2, 
#                      xax = 1, yax = 2, 
#                      var_sup = TRUE, var_sup_choice = c("Zone", "Tidal_level"),
#                      col_var = "Variable", 
#                      labels_size = 16,
#     scale_unit = TRUE,  # transitions = TRUE, labels_positions = NULL,
#     xlim = c(-5.04, 6.3), ylim = c(-7.66, 3.68))

# # version basique ---
# pca_res<-pca_data %>%
#   select(-any_of(c("Lon","Lat","x","y","point_id","sfg_id","id",
#                    "NINJ","Period","Annee",
#                    "Type","Tidal_level","Zone"))) %>%
#   prcomp(., center = TRUE, scale. = TRUE)
# library(ggfortify)
# pl_pca<-autoplot(pca_res, 
#                  data = pca_data, colour = 'Tidal_level',
#                  frame = TRUE, frame.type = 'norm',
#          loadings = TRUE, loadings.colour = 'black',
#          loadings.label = TRUE, 
#          loadings.label.colour = 'black', loadings.label.size = 3)
# pl_pca +
#   labs(title="PCA en ggplot")

```

# Results

## Biological data set description

```{r}
#| label: biom_distr_bd
CSLN_df <- CSLN %>%
  filter(grepl("Mudflat", Zone)) %>% # focus on mudflat only
  filter(SPCourt %in% c(espece)) %>%
  drop_na(Biomass_gAFDWm2) %>%
  drop_na(Density_indm2) %>% 
  mutate(across(where(is.numeric), ~f.replace_outliers(.,3))) %>%
  mutate(across(where(is.factor), fct_drop)) %>% # recode predict when filter has remove levels
  mutate(Period=factor(Period, 
                      labels = str_replace_all(unique(Period),"-"," - ")))

pl_des <- map(reponse_l,
              ~f.data_descr(CSLN_df,.x))
pl_des_gt <- map(pl_des, ~{
                  .x$geog$plot / .x$time$plot & 
                    theme(text=element_text(size=12)) &
                    plot_annotation(tag_levels = c('A'))
                 } )

iwalk(pl_des_gt,
  ~ggsave(plot = .x,
          width = 14, height = 7, dpi=my.dpi,
          filename=sprintf("%s%s/fig-bio_struc_%s.tiff",wdgraph,espece,.y) ) )

```

## HMS data set description
```{r}
#| label: hms_distr

Mars_tmp<-Mars_SDM %>%
           st_drop_geometry %>%
           group_by(Zone) %>% 
           mutate(across(all_of(c("bathy","tenfon_mxd","temp_m")), ~f.replace_outliers(.,1.5))) %>%
           filter(!Zone %in% c("Octeville","Cote Fleurie")) %>%
           mutate(across(where(is.factor), fct_drop))

pl_mars <- 
  map(transpose(pred_red) %>% 
        setNames(pred_red$Var) , \(vars) #as.list(Var_choosen),Var_choosen), \(vars)
          f.data_descr(Mars_tmp, vars) )

pl_mars_gt <- map(pl_mars,
                  ~{.x$geog$plot / .x$time$plot  & 
    theme(text=element_text(size=12)) &
    plot_annotation(tag_levels = c('A')) } )

iwalk(pl_mars_gt,
  ~ggsave(plot = .x,
          width = 14, height = 7, dpi=my.dpi,
          filename=sprintf("%sHMS_R/fig-hms_struc_%s.tiff",wdgraph,.y) ) )

# Done after saving file because of special characters
pl_mars<-pl_mars %>% 
  setNames(pred_red$whole)

pl_mars_gt<-pl_mars_gt %>% 
  setNames(pred_red$whole)

```

```{r}
#| label: hms_stat

Mars_tmp<- Mars_SDM_per %>%  #_per
           st_drop_geometry() %>%
           group_by(Zone) %>% 
           mutate(across(any_of(c("bathy","tenfon_mxd","temp_m")), ~f.replace_outliers(.x,1.5))) %>%
           filter(!Zone %in% c("Octeville","Cote Fleurie")) %>%
           mutate(across(where(is.factor), fct_drop))

pl_mars_st_board <-
  f.pl_var_st_board(Mars_tmp,pred_red)

ggsave(plot = pl_mars_st_board$all,
       width = 10, height = 12, dpi=my.dpi,
       filename=sprintf("%sHMS_R/mars_st_board.tiff", wdgraph) )

```

```{r}
#| label: hms_map
if(flag_mars_gif) {
  tmap_mode("plot") # "plot" "view"
  
  Mars_tmp<-Mars_SDM_per %>%  #_per
             # st_drop_geometry() %>%
             group_by(Zone) %>% 
             mutate(across(all_of(c("bathy","tenfon_mxd","temp_m")), ~f.replace_outliers(.,1.5))) #%>%
             # filter(!Zone %in% c("Octeville","Cote Fleurie")) %>%
             # mutate(across(where(is.factor), fct_drop))
  
  pl_mars_map <-
      map(pred_red %>% transpose %>% 
             setNames(.,pred_red$Var),
          ~f.pl_var_map(Mars_tmp,.x))
  
  
  iwalk(pl_mars_map, ~tmap_save(tm=.x$all, 
                                height=2, asp=0, dpi=my.dpi, #width=20,
                                filename=sprintf("%sHMS_R/%s_map.tiff",
                                                 wdgraph, .y) ) )
  
  tm_mars_gb <- map(pl_mars_map, ~ .x$all + 
                      tm_layout(main.title.size= .6,
                                panel.label.size=.6,
                                legend.title.size= .6,
                                legend.text.size= .6)) %>%
      tmap_arrange(., asp=NA, ncol=1,
                   sync = TRUE, outer.margins=0)
  
  tmap_save(tm=tm_mars_gb, 
            dpi=my.dpi,
            filename= sprintf("%sHMS_R/fig-graphboard_map_mars.tiff",wdgraph) )
}
```

## Animated GIF Maps plots
```{r}
#| label: hms_map_gif

if(flag_mars_gif) {
  Mars_tmp<-Mars_SDM %>%
             # mutate(across(where(is.numeric), ~f.replace_outliers(.,2))) %>%
             # mutate(across(all_of(c("bathy","tenfon_mxd")), ~f.replace_outliers(.,1.5))) %>%
             # filter(!Zone %in% c("Octeville","Cote Fleurie")) %>%
             mutate(across(where(is.factor), fct_drop))
  
  pl_mars_map_gif <-
      map(pred_red %>% 
            transpose %>%
            setNames(.,pred_red$Var),
          ~f.pl_var_map_gif(Mars_tmp,.x))
}
```

# Final actions and save

Rdata are saved in `rdataout`. An excel file collects data in `r binderout` , with sheets for :

-   data : contains whatever

```{r}
#| label: finalsave_r

rm(list=c("save_plot","flag_mars_gif"))
# rm(list=lsf.str()) # remove all functions
rm(list=(ls()[grepl("tmp|^wd", ls())] ))
save(list=(setdiff(ls()[grep("^tm_|^pl_", ls())],
                   lsf.str())), # select only variables that respect pattern, remove functions
     file = paste0(rdataout,".RData"))

beepr::beep(2)
```

# Supplementary data

## Session information

::: {.callout-tip collapse="true"}
## Expand for R Session Info

```{r, echo = FALSE}
#| include: true

library(sessioninfo)
pkg_sesh <- session_info(pkgs = "attached")
quarto_version <- system("quarto --version", intern = TRUE)
pkg_sesh$platform$quarto <- paste(
  system("quarto --version", intern = TRUE),
  "@",
  quarto::quarto_path()
  )
pkg_sesh
```
:::

# References {.unnumbered}