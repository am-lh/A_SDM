---
title: "CUBIC B-SPLINES QUANTILE REGRESSION ANALYSIS WITH KOENKER'S QUANTREG PACKAGE"
author: "Am√©lie Lehuen"
description: "ANALYSIS WITH KOENKER'S QUANTREG PACKAGE"
date: "`r format(Sys.time(), '%B %Y')`"
editor: source
execute:
  eval: true
  echo: false
  message: false
  warning: false
  output: true
  include: false
editor_options: 
  chunk_output_type: console
---

# BSplines QUANTILE REGRESSION ANALYSIS WITH KOENKER'S QUANTREG PACKAGE

## Introduction

BSplines quantile regression analysis with Koenker's `quantreg` package

<!-- ## Script preparation -->

### Packages

```{r}
#| label: load-packages
#| code-summary: "Packages"
library(conflicted)
library(readxl) ; library(openxlsx); library(beepr) # Edition d'un fichier Excel
library(tidyverse); library(reshape2); library(rlist) # the one; melt; list.append
library(data.table)
library(rstatix); library(Hmisc)  # corr and pvalue calculation
library(splines); library(ggforce)# bs BSplines function

library(ggpubr); #library(GGally); # stat_compare_means ;
library(scales); library(RColorBrewer); library(wesanderson); library(grafify); library(colorspace); library(ggsci)# show_col and colors colors colors!
library(quantreg);# library(visreg)
library(plotly); library(plot3D);  # graphiques 3D plot 3D for mesh library(pracma)
library(patchwork)
library(ggridges)
# GIS Packages
library(sf); library(sfheaders); # st_as_sf ; sf_to_df
library(tmap); library(tmaptools)
library(htmlwidgets) # library(leaflet) # saveWidget ; for interactive maps
library(introdataviz) # geom_split_violin # devtools::install_github("psyteachr/introdataviz")

conflict_prefer("transpose", "purrr")
conflict_prefer("filter", "dplyr")
conflict_prefer("select", "dplyr")
conflict_prefer("summarise", "dplyr")
conflict_prefer("melt", "reshape2")
conflict_prefer("layout", "plotly")

```

### Working Environment

```{r}
#| label: workenvir

rm(list=ls())
wdmat <- "Matrices/"
wdgraph <- "C:/Users/lehuen201/Back Up AMLH/Melting Potes/BDD/A_SDM_NEO/Plots/" #"Plots/"
wdres <- "Results/"
pc <- "C:/Users/lehuen201/Nextcloud/" # "E:/" #
wdGIS <- paste(pc,"Melting Pot/SIG/",sep="")

flag_calc<-TRUE # to calculate RQ models and mars results and more time-consuming mars summary by period
flag_calc_mars<-TRUE # to calculate time-consuming mars summary by period

```

### Graphic charter

```{r}
#| label: graphchart

theme_set(theme_bw(base_size = 14)) # theme_gray() theme_bw() theme_light()

pal_cspx <- function(x) {divergingx_hcl(x,palette = "Zissou 1")}; # show_col(pal_cspx(6)) # colorspace
colRQ<-pal_cspx(4); colBin<-c(pal_cspx(6)[3],pal_cspx(6)[5]); blank<-alpha("#dae8ed",0.1); # show_col(colRQ)
Scalc_rq<- function() {scale_colour_manual(values=colRQ)}
Scalf_rq2d <- function() {scale_fill_gradientn(colours=colRQ)} # function(x) {scale_fill_material("teal")} # 
Scale_brew <- function()
  {scale_colour_brewer(palette="Spectral",aesthetics=c("colour","fill"))}
Scale_co <- function() 
  {scale_colour_manual(palette=colorRampPalette(brewer.pal(11, "Spectral")))}
Scale_fi <- function() 
  {scale_fill_manual(palette=colorRampPalette(brewer.pal(11, "Spectral")))}

pal_ggscc <- pal_material("teal"); # show_col(pal_ggscc(9)) # ggsci
colSum <- c(pal_ggscc(9)[3],pal_ggscc(9)[7],pal_ggscc(9)[1]) # show_col(colSum)
colInliers<-pal_material("teal")(10)[5] ; colOutliers = pal_material("deep-orange")(10)[5] # show_col(colOutliers)
Scalc_misc <- function() {scale_color_discrete_diverging(palette = "Blue-Red 3")}
Scale_map<- function() {scale_fill_distiller(palette = "Spectral")}
```

### Home made functions

```{r}
#| label: functmade

AICc<-function(modelq){ 
    df<-dim(modelq$coefficients)[1]-1 
    aicc<-AIC(modelq)+2*df*(df+1)/(length(modelq$y)-df-1) 
    return(aicc) 
  } 
```

## Load of External data and Basic Variables

### External data

```{r}
#| label: externdata

rdatain <- sprintf("%sCSLN_Mars_BDD.RData",wdmat)
load(rdatain)
load(sprintf("SIG/OSM_extraction.RData"))

```

### Output save binder and Rdata

```{r}
#| label: outfiles

binderout <- sprintf("%sCSLN_BDD.xlsx",wdres)
rdataout  <- sprintf("%sCSLN_Mars_RQbsp_BDD",wdmat)
# if exists
load(paste0(rdataout,".RData"))
```

### Basic variables

```{r}
#| label: basicvar

etude <- "CSLN_Mars"
espece <- "CERED"
analysis <- "RQ BSpline"
sp <- which(speciesMP$SPCourt == espece)
sai <- which(saison$M_Def == "Year") #Year Winter Summer

type<-list(bs= c("*","bsp"))
tauchoice<-0.975
graphfine<-50 # graph resolution for 2D and 3D graphs surfaces

df <- CSLN_Mars[which(CSLN_Mars$SPCourt == espece),]

# Mars_SDM<-Mars_dat_sf %>% 
#   select(c(NINJ,Lon,Lat,Zone,Tidal_level,Period,Annee,pred_red$Var))

wdgraph <- "C:/Users/lehuen201/Back Up AMLH/Melting Potes/BDD/A_SDM_NEO/Plots/" #"Plots/"
graph_path <- sprintf("%s%s/%s/",wdgraph,espece,analysis)
titleG <- sprintf("%s %s in %s",
                  analysis,speciesMP$Taxon_SNa[sp],saison[sai,2])
```

# SDM Model calculation

## RQ calculation

```{r}
#| label: rq_Mod_calc
if(flag_calc){
  rq_Bsp <- function(df,biolo,sdmod,taus,typ) {
      # biolo=reponse_l[[1]]; typ=type[[1]]
      # sdmod=pred_red_comb$x2[[1]]
    typetxt<-paste0("RQ",length(sdmod$id),typ[2])
    sdmname<-sprintf("%s_%g%g%g%s%s",typetxt,sp,sai,
                     biolo$repi,
                     paste0(sdmod$id,collapse = ""),
                     ifelse(length(sdmod$id)==1,"0","") )
    
    yt<- biolo$rvar
    yl<- biolo$compl
    xt<-paste(sdmod$Var, collapse=typ[1])
    xl<-paste(sdmod$whole, collapse=paste0(" ",typ[1]," "))
    dfrq <-df[,c(yt,sdmod$Var)] %>% 
      drop_na() %>%
      setnames(old=c(yt,sdmod$Var),
               new=c("y",paste0("x",1:length(sdmod$Var))) ) %>% 
      mutate(across(everything(),jitter))
    dftmp<-df %>% 
      drop_na(all_of(c(yt,sdmod$Var))) %>%
      select(all_of(c("Zone","Tidal_level","Period","Season","Annee","Mois","NINJ")))
    formumod<-as.formula(paste("y",paste0("bs(x",1:length(sdmod$Var),
                                          ",degree=3,knots=median(x",1:length(sdmod$Var),"))",
                                          collapse=typ[1]),sep=" ~ "))
  
    # Model grid definition
    xmod<-map( #x1x2mod
              map(as.list(names(dfrq %>% select(-y))),
                  ~{ dfrq %>% select(-y) %>% 
                    summarise(across(everything(),
                                     list(~min(.x, na.rm = TRUE), ~max(.x, na.rm = TRUE)),
                                     .names = "{.fn}.{.col}")) %>% 
                    select(contains(.x)) %>% 
                    unlist(., use.names=FALSE) } ) %>% 
                setNames(names(dfrq %>% select(-y))) ,
              ~seq(.[1],.[2],length.out=graphfine) ) %>% 
          bind_cols()
    gridx <- expand.grid(xmod)
    if(length(sdmod$Var)==2){
      gridxmat <- mesh(xmod$x1,xmod$x2)
      } else{ gridxmat<-NULL }
    mod_grid<-list(xmod=xmod,gridx=gridx,gridxmat=gridxmat)
    mod_t<-NULL
    
    tryCatch({
      modelq0<-rq(y ~ 1, data=dfrq, tau=taus)
      modelq<-rq(formumod, data=dfrq, tau=taus) 
      smrq <- summary(modelq, se="boot") %>% 
        setNames(sprintf("%.3f",taus))
      meta <- list(type=typ[1],typetxt=typetxt,
                   Sp=espece,Season=saison[sai,2],
                   reponse=yt,reponset=yl,
                   unit=biolo$runit,
                   predict=xt,predictt=xl,
                   predictl=sdmod$whole,
                   predfile=paste(sdmod$Var, collapse="_"))
      valid <- map(as.list(seq(length(smrq))),
                  ~list(AICc=round(AICc(modelq)[.x],1),
                       Rone=round((1 - modelq$rho[.x]/modelq0$rho[.x]),5)) ) %>% 
        setNames(sprintf("%.3f",taus))    
      
      smrq_t <- map2(smrq, as.list(taus),
                ~{as.data.frame(.x$coefficients) %>%
                  mutate(Var=rownames(.)) %>%
                  relocate(Var) %>%
                  remove_rownames(.) %>%
                  mutate(tau=.y, taust=sprintf("tau= %s",.y),
                         sdmname=sdmname,
                         formula=paste0(format(modelq$formula),collapse=""),
                         type=typ[1],typetxt=typetxt,
                         Sp=espece, Season=saison[sai,2],
                         reponse=yt, reponset=yl, unit=biolo$runit,
                         # Predictor1=pred_red[k,1], Predictor2=pred_red[k2,1],
                         predict=xt, predictt=xl,
                         predfile=paste(sdmod$Var, collapse="_")) } )
      smrq_t<-smrq_t %>% map2(valid,., append)
  
      # Out of limits points calculation
      rqlim_t <- modelq %>% 
        predict %>% 
        as.data.frame %>%
        rename_all(~sprintf("%.3f",taus)) %>% 
        mutate(across(everything(), function(x){replace(x, which(x<0), NA)})) %>% 
        bind_cols(tibble(dfrq)) %>% 
        bind_cols(tibble(dftmp)) %>% 
       melt(id.vars=c(names(dfrq),names(dftmp)),
                      variable.name = "tau",value.name = "RqLim") %>% 
        mutate(sdmname=sdmname,
               taust=sprintf("tau= %s",tau),
               tau=as.numeric(as.character(tau))) %>% 
        mutate(status=case_when(y>RqLim ~"over",y<=RqLim ~"under" ))
  
      # Surface model calculation
      mod_pred_t <- as.data.frame(predict(modelq,newdata=gridx)) %>%
        rename_all(~sprintf("%.3f",taus)) %>% 
        mutate(across(everything(), 
                      function(x){replace(x, which(x<0), NA)})) %>% 
        bind_cols(gridx) 
      mod_pred_t <- melt(mod_pred_t,id.vars=names(dfrq %>% select(-y)),
                      variable.name = "tau",value.name = "RqMod") %>% 
        mutate(sdmname=sdmname,
               taust=sprintf("tau= %s",tau),
               tau=as.numeric(as.character(tau)))
      mod_t<-list(sdmname=sdmname, meta=meta,
                modelq=modelq, smrq=smrq, smrq_t=smrq_t,
                rqlim_t=rqlim_t, mod_grid=mod_grid, mod_pred_t=mod_pred_t)
    },error = function(e) {print(e)})#,finally = {}) # end try catch
    return(mod_t)
  } # end func

  rq_Mod_all <-
    map(reponse_l, \(biolo)
      {map( type, \(typ)
        {map_depth( pred_red_comb,2,
              ~rq_Bsp(df,biolo,.x,taus,typ)) } ) } ) %>%
    map_depth(.,3, ~setNames(.x,map(.x,~.$sdmname)) ) %>%
    map_depth(.,2,~list_flatten(.x,name_spec= "{inner}")) %>%
    map(.,~list_flatten(.x,name_spec= "{inner}")) %>% 
    map(.,compact) # suppress trycatch errors
  
  
  rq_Mod_all <- rq_Mod_all %>%
    map_depth(.,2,
      ~modify_at(.x,"smrq_t",~.x %>% bind_rows()) )
  
  rq_Mod_sel<-map(rq_Mod_all,
        ~keep_at(.,~ grepl(paste0(names(pred_red_comb_sel),"$",collapse="|"),
                           .x)) )
} # end if flag_calc
```

## Mars calculation of models

```{r}
#| label: rq_Mod_mars
if(flag_calc){
  rq_Mod_mars <- function(rqMod,MarsSDM,taus) {
    # biolo=reponse_l[[1]]; MarsSDM=Mars_SDM
    # rqMod=rq_Mod_sel[[biolo$rdescr]][[1]]
    typetxt<-rqMod$meta$typetxt
    vars<-unlist(strsplit(rqMod$meta$predict,rqMod$meta$type,fixed = TRUE))
    # sdmname<-rqMod$sdmname
  
    xmars <- MarsSDM %>% 
      st_drop_geometry() %>% # as.data.frame() %>% 
      ungroup %>% 
      select(all_of(vars)) %>% 
      rename_all(~paste0("x",1:length(vars)))
  
    MarsSDM<-MarsSDM %>% 
      select(all_of(c("NINJ","Lon","Lat","Zone","Tidal_level","Period","Annee",vars))) #%>% 
    RqModMars <- as.data.frame(predict(rqMod$modelq,newdata=xmars)) %>%
      rename_all(~sprintf("t%.3f",taus)) %>% 
      # rename_all(~sprintf("%s_t%.3f",sdmname,taus)) %>% 
      mutate(across(everything(), function(x){replace(x, which(x<0), NA)}))
    MarsSDM<-MarsSDM %>% cbind(RqModMars)
    return(MarsSDM)
  }
  
  rq_Mod_mars_all<-
    map_depth(rq_Mod_all,2,
              ~rq_Mod_mars(.x,Mars_SDM,taus))
  
  rq_Mod_mars_sel<-
    map_depth(rq_Mod_sel,2,
              ~rq_Mod_mars(.x,Mars_SDM,taus))
  
  rq_Mod_mars_all_per<-
    map_depth(rq_Mod_all,2,
              ~rq_Mod_mars(.x,Mars_SDM_per,taus))
  
  rq_Mod_mars_sel_per<-
    map_depth(rq_Mod_sel,2,
              ~rq_Mod_mars(.x,Mars_SDM_per,taus))
} # end if flag_calc
```

Summary of values by period for mapping (!! can be very long)
```{r}
if(flag_calc){
  save(list=(ls()[grep("rq_", ls())]),
       file = paste0(rdataout,".RData")) # save before going heavy
}  
if(flag_calc_mars){
  rq_Mod_mars_sel_per<-
    map_depth(rq_Mod_mars_sel,2,
              ~{ .x %>% 
                 group_by(NINJ,Period) %>% 
                 summarise(across(where(is.numeric),~mean(.x,na.rm=TRUE))) } )
  save(list=(ls()[grep("rq_", ls())]),
       file = paste0(rdataout,".RData")) # save once it's done!
} # end if flag_calc

```

# Model graphs

## Summaries graphs
```{r}
#| label: rq_Mod_plot_sum

pl_rq_Mod_sum<-function(rqMod,titleG){
    # rqMod=rq_Mod_sel[[1]][[1]]
  rqMod$smrq_t$lowerbd<- rqMod$smrq_t$Value-rqMod$smrq_t$`Std. Error`
  rqMod$smrq_t$upperbd<- rqMod$smrq_t$Value+rqMod$smrq_t$`Std. Error`
  ggplot(rqMod$smrq_t,aes(x=tau,y=Value, group = 1)) +
    geom_ribbon(aes(ymin=lowerbd, ymax=upperbd), 
                fill=colSum[3], alpha=0.8) +
    geom_point(col=colSum[2],size=1) +
    geom_line(col=colSum[2],linewidth=.5, alpha=0.8) +
    facet_wrap(~Var,scales="free",labeller = label_wrap_gen(width = 30)) +
    labs(title = titleG) +
    theme(text=element_text(size=8),
          strip.text = element_text(size=6),
          strip.background = element_blank())
 }

# pl_rq_all_sum<-
#   map_depth(rq_Mod_all,2,
#             ~pl_rq_Mod_sum(.x,titleG))

pl_rq_sel_sum<-
  map_depth(rq_Mod_sel,2,
            ~pl_rq_Mod_sum(.x,titleG))

walk(pl_rq_sel_sum,
  ~{iwalk(., ~ggsave(sprintf("%s/%s/%s_%s_sm.tiff",
                    graph_path, substr(.y,1,6), espece, .y),
                    plot = .x,
                    width = 10, height = 7, dpi=400) ) } )
```

## AIC plot
```{r}
#| label: rq_Mod_plot_aic

pl_rq_Mod_aic<-function(smrql,titleG){
# smrql <- rq_Mod_x1 %>%
#   map_depth(.,2, ~map_dfr(.$smrq_t, ~.) ) %>%
#   map(., ~map_dfr(., ~.) ) %>%
#   map_dfr(., ~.)
  smrql %>%
    group_by(tau) %>%
    ggplot(aes(x=reorder(predict,-Delta_AICc),
               y=Delta_AICc,
               color = factor(tau),shape=reponse))+
    geom_point(alpha=0.8, size= 5) +
    scale_color_manual(values=colRQ) +
    labs(title=paste("Delta AICc scores for ",titleG,sep=""),
         x="Model",y="Delta AICc",
         color="Quantile",shape="Biologic") +
    theme(axis.text = element_text(size=10,face="bold")) +
    coord_flip()
}

rq_Mod_all_sm<-
  rq_Mod_all %>% 
    map_depth(.,2, ~map_dfr(.$smrq_t, ~.) ) %>% 
    map(., ~map_dfr(., ~.) ) %>% 
    map_dfr(., ~.) %>% 
  mutate(Delta_AICc= AICc-min(AICc,na.rm=TRUE))

rq_Mod_sel_sm<-
  rq_Mod_sel %>% 
    map_depth(.,2, ~map_dfr(.$smrq_t, ~.) ) %>%
    map(., ~map_dfr(., ~.) ) %>% 
    map_dfr(., ~.) %>% 
  mutate(Delta_AICc= AICc-min(AICc,na.rm=TRUE))

pl_rq_sel_aic<- rq_Mod_sel_sm %>%
  filter(!grepl(c("RQ3"),sdmname)) %>%
  pl_rq_Mod_aic(.,titleG)
ggsave(sprintf("%s%s_RQ_AIC_all_scores.tiff",
                 graph_path,espece),
         plot = pl_rq_sel_aic,
         width = 16, height = 8, dpi=400)

pl_rq_aic<-rq_Mod_sel_sm %>% 
  filter(!grepl(c("RQ3"),sdmname)) %>%
  mutate(nbvar=substr(typetxt,1,3)) %>% 
  group_by(tau) %>%
  ggplot(aes(x=reponse, #reorder(factors,-AICc),
             y=Delta_AICc,
             color = factor(tau),
             shape = type))+
  geom_point(size= 5) +
  facet_grid(nbvar~.) +
  scale_shape_manual(values=c(1, 8))+
  scale_color_manual(values=colRQ) +
  labs(#title=titleG, 
       x="Biologic",y="AIC",
       color="Quantile",shape="Type") +
  theme(axis.text = element_text(size=10,face="bold"),
          strip.background = element_blank()) +
  coord_flip()
ggsave(sprintf("%s%s_RQ_AIC_scores.tiff",
                 graph_path,espece),
         plot = pl_rq_aic,
         width = 16, height = 8, dpi=400)

```

## Validation qq plot
```{r}
#| label: prefig-qqplot

rq_qq_plot <- function(rqMod) {
    # rqMod=rq_Mod_sel[[1]][[1]]
  
   rqMod$rqlim_t %>% 
    mutate(taustx=as.character(tau)) %>% 
    nest(data=-taustx) %>% 
    mutate(data=map(data, ~{.x %>% 
                    arrange(.,RqLim) %>% 
                    mutate(.,points_bin = ntile(RqLim, n=10)) %>% 
                    group_by(points_bin) %>% 
                    summarise(Observed = quantile(y, unique(tau), na.rm=TRUE),
                              Predict = mean(RqLim, na.rm=TRUE),
                              tau = unique(tau)) %>%
                    mutate(tau=as.factor(tau)) 
      })) %>% 
    unnest(cols=c(data)) %>% 
    ggplot(aes(x=Observed,y=Predict,col=tau,fill=tau,shape=tau)) +
      geom_point(size=2) +
      geom_abline(slope=1,intercept=0) +
      geom_smooth(method = "lm", formula= y~x, aes(fill = tau), alpha=0.1) +
      stat_cor(label.x.npc = .7,label.y.npc=.1,show.legend = FALSE) +
      stat_regline_equation(label.x.npc = .7,label.y.npc=.4,show.legend = FALSE) +
      labs(title=sprintf("%s (%s)\n%s", 
                            rqMod$meta$typetxt, 
                            rqMod$meta$unit,
                            rqMod$meta$predictt)) +
      theme(legend.position="bottom",
            text=element_text(size=10),
            plot.title=element_text(size=10)) +
      Scale_brew()
}

pl_rq_qq_sel<-map_depth(rq_Mod_sel,2,
    ~ {.x %>% rq_qq_plot} )

walk(pl_rq_qq_sel,
  ~{iwalk(., ~ggsave(sprintf("%s/%s/%s_%s_rqq.tiff",
                    graph_path, substr(.y,1,6), espece, .y),
                    plot = .x,
                    width = 5, height = 8, dpi=400) ) } )
```

## Qqplots Residuals graphs
```{r}
#| label: rq_Mod_plot_res

pl_rq_Mod_res<-function(rqMod,titleG){
    # biolo=reponse_l[[1]]
    # rqMod=rq_Mod_sel[[biolo$rdescr]][[1]]
  rqResid <- melt(residuals(rqMod$modelq)) %>% 
    rename(tau=Var2, residuals=value) 
  subtitleG <- sprintf("%s vs %s",rqMod$meta$reponset,rqMod$meta$predictt)
  ggplot(rqResid, aes(sample=residuals, color=tau)) + 
    stat_qq() + stat_qq_line() + 
    facet_wrap(~tau) +
    Scalc_rq() +
    theme(legend.position="none",
          strip.background = element_blank())+
    labs(title=paste("Residuals for ",titleG,sep=""),
         subtitle=subtitleG)
}

pl_rq_sel_res<-
  map_depth(rq_Mod_sel,2,
         ~pl_rq_Mod_res(.x,titleG)) 

pl_rq_sel_resb<-map(pl_rq_sel_res,
          ~{wrap_plots(., guides="collect") &
              plot_annotation(title=titleG,tag_levels = c('A')) &
              theme(plot.title = element_blank(),
                    plot.subtitle = element_text(size=12))   } )

iwalk(pl_rq_sel_resb,
  ~{ggsave(sprintf("%s/%s_residuals.tiff",
                   graph_path,.y),
     plot = .x, width = 18, height = 12, dpi=400) } )

```

## Curves 1D sdm plots
```{r}

pl_rq_Mod_1d<-function(rqMod,titleG){
    # biolo=reponse_l[[1]]
    # rqMod=rq_Mod_x1[[biolo$rdescr]][[1]]

  ggplot() +
    geom_line(data=rqMod$mod_pred_t, 
              aes(x=x1, y=RqMod, col=as.factor(tau))) +
    geom_point(data=rqMod$rqlim_t %>% 
                 filter(tau==max(.$tau,na.rm=TRUE)), 
               aes(x=x1, y=y,shape=status),
               alpha=0.5) +
    Scalc_rq() +
    scale_shape_manual(values=c(8, 21)) +
    guides(shape = "none") +
    theme(legend.position="bottom") +
    labs(title=titleG,
       color="Quantile", #shape="Type",
         x=rqMod$meta$predictt, y=rqMod$meta$reponset)
}

pl_rq_all_1d <- rq_Mod_all %>% 
    map(.,~keep_at(.x,grepl("0$",names(.x))) ) %>% 
    map_depth(.,2,~pl_rq_Mod_1d(.x,titleG) )
# walk(pl_rq_all_1d[1:2],
#   ~{iwalk(., ~ggsave(sprintf("%s/%s/%s_%s_1d.tiff",
#                     graph_path, substr(.y,1,6), espece, .y),
#                     plot = .x,
#                     width = 10, height = 7, dpi=400) ) } )

pl_rq_all_1d$all <- map(pl_rq_all_1d,
        ~{(wrap_plots(.) &
             labs(title=element_blank()) &
             theme(legend.position="bottom",
                   plot.title = element_text(hjust = 0.5)) ) +
          plot_layout(guides="collect") +
          plot_annotation(title=titleG) } )

walk(pl_rq_all_1d["all"],
  ~{iwalk(., ~ggsave(sprintf("%s/RQ1add/%s_%s_1d.tiff",
                    graph_path, espece, .y),
                    plot = .x,
                    width = 10, height = 7, dpi=400) ) } )

```

## Raster 2D sdm plots
```{r}
#| label: rq_Mod_plot_2d

pl_rq_Mod_2d<-function(rqMod,titleG){
    # biolo=reponse_l[[1]]
    # rqMod=rq_Mod_sel[[biolo$rdescr]][[1]]
  
  pl_2d<-list(all=NULL, one=NULL)

  pl_2d$all<-ggplot(rqMod$mod_pred_t) +
    geom_raster(aes(x = x1, y = x2, fill = RqMod),alpha=0.8) + 
    geom_point(data=rqMod$rqlim_t %>% filter(status=="under"),aes(x=x1, y=x2), 
               shape=21, size=1, color=colInliers, 
               fill=colInliers, alpha=.5, na.rm = TRUE) +
    geom_point(data=rqMod$rqlim_t %>% filter(status=="over"),aes(x=x1, y=x2), 
               shape=23, size=1, color=colOutliers, 
               fill=colOutliers, alpha=.5, na.rm = TRUE) +
    labs(title=titleG,
         x=rqMod$meta$predictl[1],
         y=rqMod$meta$predictl[2],
         fill = paste("SDM-NEO\n",rqMod$meta$unit,sep="")) +
    guides(alpha = "none") +
    Scalf_rq2d() +
    facet_wrap(taust ~ .) + 
    theme(strip.background = element_blank())
  
    # Define surfaces for each tau
    pl_2d$one<- map(taus_l, ~{ #taut=taus_l[[1]]
      rqMod$mod_pred_t %>% 
        filter(tau==.x) %>% 
      ggplot() +
        geom_raster(aes(x = x1, y = x2, fill = RqMod),alpha=0.8) + 
        geom_point(data=rqMod$rqlim_t %>% filter(status=="under"),
                   aes(x=x1, y=x2), 
                   shape=21, size=1, color=colInliers, 
                   fill=colInliers, alpha=.5, na.rm = TRUE) +
        geom_point(data=rqMod$rqlim_t %>% filter(status=="over"),
                   aes(x=x1, y=x2), 
                   shape=23, size=1, color=colOutliers, 
                   fill=colOutliers, alpha=.5, na.rm = TRUE) +
        labs(title=sprintf("tau = %0.3f",.x),
             x=rqMod$meta$predictl[1],
             y=rqMod$meta$predictl[2],
             fill = paste("SDM-NEO\n",rqMod$meta$unit,sep="")) +
        guides(alpha = "none") +
        Scalf_rq2d()
      
    } ) # map taus
  return(pl_2d)
}

pl_rq_all_2d<- rq_Mod_all %>%
    map(.,~keep_at(.x,grepl("^RQ2",names(.x))) ) %>%
    map_depth(.,2,~pl_rq_Mod_2d(.x,titleG) )

pl_rq_sel_2d<- rq_Mod_sel %>% 
    map(.,~keep_at(.x,grepl("^RQ2",names(.x))) ) %>% 
    map_depth(.,2,~pl_rq_Mod_2d(.x,titleG) )

walk(pl_rq_sel_2d,
   ~{iwalk(., ~ggsave(sprintf("%s/%s/%s_%s_2d.tiff",
              graph_path, substr(.y,1,6), espece, .y),
              plot = .x$all,
              width = 10, height = 7, dpi=400) ) } )

```

## Surfaces 3D sdm plots
```{r}
#| label: rq_Mod_plot_3d

pl_rq_Mod_3d<-function(rqMod,taus_l,titleG){
    # biolo=reponse_l[[1]]
    # rqMod=rq_Mod_sel[[1]][[1]]
  
  yl<-rqMod$meta$reponset
  xl<-rqMod$meta$predictl
  myscene<-list(camera = list(eye = list(x = -1.5, y = 1.5, z = 0.3)),
                aspectmode='cube', # define standard layout scene
                xaxis = list(title = xl[1]), 
                yaxis = list(title = xl[2]), 
                zaxis = list(title = yl))
  pl_3d<-list(all=NULL, one=NULL)
  
  rqlim <- rqMod$rqlim_t %>% 
    filter(tau==taus_l[[length(taus_l)]])
  rqsup<-rqlim %>% filter(status=="over")
  rqinf<-rqlim %>% filter(status=="under")
  
  # Experimental points on 3D graphic and all surfaces
  pl_3d$all<-plot_ly(showlegend=FALSE) %>% 
      add_trace(x = rqsup$x1, y = rqsup$x2, z = rqsup$y, 
                mode = "markers", type = "scatter3d",
                marker = list(size = 3, color = colOutliers, 
                              opacity = 0.7, symbol = "diamond"))%>%
      add_trace(x = rqinf$x1, y = rqinf$x2, z = rqinf$y, 
                mode = "markers", type = "scatter3d",
                marker = list(size = 3, color = colInliers, 
                              opacity = 0.7, symbol = "circle")) %>%
    layout(title = titleG, scene = myscene)
  for (t in 1:length(taus_l)){ # t=4
      gridxmat<-rqMod$mod_grid$gridxmat
      RqMod_mat <- rqMod$mod_pred_t %>% 
        filter(tau==taus_l[[t]])
      RqMod_mat <- array(RqMod_mat$RqMod,dim=c(graphfine,graphfine))
      pl_3d$all<-pl_3d$all %>% 
          add_surface(x = gridxmat$x, y = gridxmat$y, z = RqMod_mat,
                      opacity = 0.8, colorscale = list(c(0,1),c(blank,colRQ[t])))
  } # taus
  unname(taus_l)
  # Define surfaces for each tau
  pl_3d$one<-map2(taus_l,seq(1:length(taus_l)), ~{ #.x=taus_l[[1]]
    gridxmat<-rqMod$mod_grid$gridxmat
    RqMod_mat <- rqMod$mod_pred_t %>% 
      filter(tau==.x)
    RqMod_mat <- array(RqMod_mat$RqMod,dim=c(graphfine,graphfine))
    rqlim <- rqMod$rqlim_t %>% 
      filter(tau==.x)
    rqsup<-rqlim %>% filter(status=="over")
    rqinf<-rqlim %>% filter(status=="under")
      
    plot_ly(showlegend=F) %>% #, scene=paste("scene",.y,sep="")
      add_surface(x = gridxmat$x, 
                  y = gridxmat$y, 
                  z = RqMod_mat,
                  opacity = 0.9, colorscale = list(c(0,1),c(blank,colRQ[.y])),
                  colorbar=list(title=list(
                      text=paste("SDM-NEO\n",
                                 rqMod$meta$unit,"\nTau=",.x,sep="")))) %>%
      add_trace(x = rqsup$x1, y = rqsup$x2, z = rqsup$y, 
                mode = "markers", type = "scatter3d",
                marker = list(size = 3, color = colOutliers, 
                              opacity = 0.7, symbol = "diamond"))%>%
      add_trace(x = rqinf$x1, y = rqinf$x2, z = rqinf$y, 
                mode = "markers", type = "scatter3d",
                marker = list(size = 3, color = colInliers, 
                              opacity = 0.7, symbol = "circle")) %>%
      layout(title = titleG, scene = myscene)
    } ) # map taus
  return(pl_3d)
}

# pl_rq_all_3d<- rq_Mod_sel %>% 
#     map(.,~keep_at(.x,grepl("^RQ2",names(.x))) ) %>% 
#     map_depth(.,2,~pl_rq_Mod_3d(.x,taus_l,titleG) )

pl_rq_sel_3d<- rq_Mod_sel %>% 
    map(.,~keep_at(.x,grepl("^RQ2",names(.x))) ) %>% 
    map_depth(.,2,~pl_rq_Mod_3d(.x,taus_l,titleG) )

walk(pl_rq_sel_3d,
  ~{iwalk(., ~ saveWidget(partial_bundle(.x$all),
                          sprintf("%s/%s/%s_%s_3d.html",
                    graph_path, substr(.y,1,6), espece, .y), 
                    selfcontained = F, libdir = "lib") ) } )
```

# GIS results

## Mars SDM stats

```{r}
#| label: rq_Mod_mars_stat

# st_rq_Mod_map<-function(rqmodmars,rqMod,tauchoice){ ----
#     # rqmodmars=rq_Mod_mars_sel[[1]][[1]]
#     # rqMod=rq_Mod_sel[[1]][[1]]
#   
#   descr<-list(geog=list(stat.test=NULL,plot=NULL),
#               time=list(stat.test=NULL,plot=NULL))
# 
#   sdmname<-rqMod$sdmname
#   rqmodmars <- rqmodmars %>% 
#     st_drop_geometry() %>% 
#     filter(grepl("Mudflat",.$Zone)) %>%
#     mutate(Zone=fct_drop(.$Zone)) %>% 
#     mutate(across(c(Zone,Period),factor))
#   
#   descr$geog$stat.test <- rqmodmars %>%
#     group_by(Zone) %>%
#     wilcox_test(as.formula(sprintf("t%.3f ~ Period",tauchoice))) %>%
#     add_xy_position(x = "Period",group = "Zone", #scales = "free", 
#                     dodge = 0,step.increase = 0.05) %>% #
#     filter(p.adj.signif!="ns")
#   
#   descr$geog$plot <- ggplot(rqmodmars) +
#     # geom_boxplot(aes(x=Period, y = .data[[vars]], fill = Period)) +
#     # geom_density_ridges(aes(y = Period , fill=Period,
#     #                       x=.data[[vars]]), alpha=0.3) +
#     geom_flat_violin(aes(x=Period, fill = Period,
#                      y = .data[[sprintf("t%.3f",tauchoice)]] ),
#                      alpha = 0.5,size = .1) +
#     stat_summary(aes(x=Period, fill = Period,
#                      y = .data[[sprintf("t%.3f",tauchoice)]],color = Period),
#                   size=.3,fun.data = mean_se, show.legend = FALSE) +
#     stat_pvalue_manual(descr$geog$stat.test,label = "p.adj.signif",
#                        size = 3,tip.length = 0, coord.flip = TRUE) +
#     coord_flip() +
#     facet_wrap( ~ Zone, 
#                nrow = 1, #scales = "free_y", 
#                labeller = label_wrap_gen(width = 20)) + 
#     labs(y=sprintf("%s (%s) t%.3f - %s", 
#                           rqMod$meta$typetxt, 
#                           rqMod$meta$unit,tauchoice,
#                           rqMod$meta$predictt)) +
#     Scale_brew() +
#     theme(legend.position="none",
#             # axis.title=element_text(size=12),
#           strip.background = element_blank())
# 
#   descr$time$stat.test <- rqmodmars %>% 
#     group_by(Period) %>%
#     wilcox_test(as.formula(sprintf("t%.3f ~ Zone",tauchoice))) %>%
#     add_xy_position(x = "Zone",group = "Period", scales = "free", 
#                     dodge = 0,step.increase = 0.05) %>%
#     filter(p.adj.signif!="ns")
#   
#   descr$time$plot <- ggplot(rqmodmars) +
#     # geom_boxplot(aes(x=Zone, y = .data[[vars]], fill = Zone)) +
#     geom_flat_violin(aes(x=Zone, fill = Zone,
#                      y = .data[[sprintf("t%.3f",tauchoice)]] ),
#                      alpha = 0.5,size = .1) +
#     stat_summary(aes(x=Zone, fill = Zone,
#                      y = .data[[sprintf("t%.3f",tauchoice)]],color = Zone),
#                  size=.3, fun.data = mean_se, show.legend = FALSE) +
#     stat_pvalue_manual(descr$time$stat.test,label = "p.adj.signif", 
#                        size = 3,tip.length = 0, coord.flip = TRUE) +
#     coord_flip() +
#     facet_wrap( ~ Period, 
#                nrow = 1, #scales = "free_y", 
#                labeller = label_wrap_gen(width = 20)) + 
#     labs(y=sprintf("%s (%s) t%.3f - %s", 
#                           rqMod$meta$typetxt, 
#                           rqMod$meta$unit,tauchoice,
#                           rqMod$meta$predictt)) +
#     Scale_brew() +
#     theme(legend.position="none",
#             # axis.title=element_text(size=12),
#           strip.background = element_blank())
#   
#   return(descr)
# }----

st_rq_Mod_map<-function(rqmodmars,rqMod,tauchoice){
    # rqmodmars=rq_Mod_mars_sel[[1]][[1]]
    # rqMod=rq_Mod_sel[[1]][[1]]
  vars<-unlist(strsplit(rqMod$meta$predict,rqMod$meta$type,fixed = TRUE))
  varsl<-rqMod$meta$predictl
  sdmname<-rqMod$sdmname

  rqmodmars <- rqmodmars %>% 
    st_drop_geometry() %>% 
    filter(grepl("Mudflat",.$Zone)) %>%
    mutate(Zone=fct_drop(.$Zone)) %>% 
    mutate(across(c(Zone,Period),factor))
  
  biorange<-max(max(rqmodmars %>% select(sprintf("t%.3f",tauchoice)), na.rm=TRUE),
      max(replace_outliers(rqMod$rqlim_t$y,3), na.rm=TRUE))
  
  descr<-list(pred=NULL, mod=NULL, res=NULL)

  descr$pred <-map2(as.list(vars), as.list(varsl), ~{
    rqmodmars %>% 
    ggplot() + 
    geom_density_ridges(aes(y = Period , fill=Period,
                          x=.data[[.x]]), 
                        alpha=0.3, size = .2) +
    facet_grid(. ~ Zone, 
               # scales = "free_y",
               labeller = label_wrap_gen(width = 20)) + 
    labs(x=.y, y="") +
    Scale_brew() } )

  descr$mod <-rqmodmars %>% 
    ggplot() + 
    geom_density_ridges(aes(y = Period , fill=Period,
                          x=.data[[sprintf("t%.3f",tauchoice)]]), 
                        alpha=0.3, size = .2) +
    xlim(c(0,biorange)) +
    facet_grid(. ~ Zone, 
               # scales = "free_y",
               labeller = label_wrap_gen(width = 20)) + 
    labs(y="",x=sprintf("%s (%s) t%.3f - %s", 
                          rqMod$meta$typetxt, 
                          rqMod$meta$unit,tauchoice,
                          rqMod$meta$predictt)) +
    Scale_brew()
  
  descr$res <- rqMod$rqlim_t %>%
    filter(grepl("Mudflat",.$Zone)) %>%
    mutate(Zone=fct_drop(.$Zone)) %>% 
    mutate(across(c(Zone,Period),factor)) %>% 
    ggplot() +
    geom_density_ridges(aes(y = Period , fill=Period,
                          x=y), alpha=0.3, size = .2) +
    xlim(c(0,biorange)) +
    facet_grid(. ~ Zone,
               # scales = "free_y",
               labeller = label_wrap_gen(width = 20)) +
    labs(y="",x=rqMod$meta$reponset) +
    Scale_brew()
 
 
  wrap_plots(descr$pred, ncol=1) / descr$mod / descr$res &
    # plot_layout(guides = "collect") & 
    theme(legend.position="none",
          strip.background = element_blank(),
          text=element_text(size=12)) &
    plot_annotation(tag_levels = c('A')) 
}

# pl_rq_mars_all_st<-
#   map(reponse_l, \(biolo)
#       {map2(rq_Mod_mars_all[[biolo$rdescr]],
#             rq_Mod_all[[biolo$rdescr]],
#            ~st_rq_Mod_map(.x,.y,tauchoice)) } )

pl_rq_mars_sel_st<-
  map(reponse_l, \(biolo)
      {map2(rq_Mod_mars_sel[[biolo$rdescr]],
            rq_Mod_sel[[biolo$rdescr]],
           ~st_rq_Mod_map(.x,.y,tauchoice)) } )

walk(pl_rq_mars_sel_st,
  ~{iwalk(., ~ggsave(sprintf("%s/%s/%s_%s_mars_st.tiff",
                    graph_path, substr(.y,1,6), espece, .y),
                    plot = .x,
                    width = 15, height = 10, dpi=400) )
    } )
```

## Shapefile save
```{r}
# st_write(rq_Mod_mars_sel_per, sprintf("%sLayers made/SDM_NEO_RQ_%s.shp",wdGIS,espece),append=FALSE)
```

## Maps plots
```{r}
#| label: rq_Mod_plot_map

# option tmap version facet
tmap_mode("plot") # "plot" "view"
pl_rq_Mod_map<-function(rqmodmars,rqMod,tauchoice){
    # biolo=reponse_l[[1]]
    # rqmodmars=rq_Mod_mars_sel[[biolo$rdescr]][[1]]
    # rqMod=rq_Mod_sel[[biolo$rdescr]][[1]]

  pl_map<-list(all=NULL, one=NULL)

  vars<-unlist(strsplit(rqMod$meta$predict,rqMod$meta$type,fixed = TRUE))
  varsl<-rqMod$meta$predictl
  sdmname<-rqMod$sdmname

  # # option ggplot
  # tmp_sf <-
    # ggplot(data = rqBmars) +
  #   geom_sf(aes(fill = SDM), color = NA) +
  #   facet_wrap(~Annee) +
  #   labs(x="Latitude",y="Longitude",
  #        fill = sprintf("SDM-NEO\n%s",sdmname)) +
  #   theme(plot.margin = margin(0.05,0.05,0.05,0.05, "cm")) +
  #   scale_fill_distiller(palette = "Spectral")
  
  pl_map$all<-tm_shape(osm_df) +  
    tm_rgb(saturation = .6, alpha= 0.8) +
  # tm_scale_bar(position = c("left", "bottom"), width = 0.15) + #SCALE
  # tm_compass(position = c("left", "top"), size = 2) +          #NORTH COMPASS
  tm_shape(rqmodmars) +
    tm_fill(col = sprintf("t%.3f",tauchoice),
            title=sprintf("%s (%s) t%.3f - %s", 
                          rqMod$meta$typetxt, 
                          rqMod$meta$unit,tauchoice,
                          rqMod$meta$predictt),
            legend.is.portrait = FALSE,
            palette = "-Spectral", alpha = 0.7) +
    # tm_borders("white", lwd = 0) +
    tm_facets(by="Period", nrow = 1) +
    tm_layout(
      panel.label.bg.color = 'white',
      legend.outside = TRUE, 
      legend.outside.position = "bottom",
      # legend.outside.size= .3, # mystery how to make it work
      legend.title.size= .8,
      legend.text.size= .6,
      legend.format=list(text.separator="-"),
      outer.margins=c(0,0,0,0), inner.margins=c(0,0,0,0))
  
  peri<-setNames(as.list(levels(rqmodmars$Period)), levels(rqmodmars$Period))
  # Define map for each Period
  pl_map$one <- map(peri, ~{
    tm_shape(osm_df) +  
      tm_rgb(saturation = .6, alpha= 0.8) +
    tm_shape(rqmodmars %>% 
               filter(Period %in% .x)) +
      tm_fill(col = sprintf("t%.3f",tauchoice), 
            title=sprintf("%s (%s) t%.3f - %s", 
                          rqMod$meta$typetxt, 
                          rqMod$meta$unit,tauchoice,
                          rqMod$meta$predictt),
              legend.is.portrait = FALSE,
              palette = "-Spectral", alpha = 0.7) +
    tm_layout(main.title= .x,
              main.title.size= 1,
              legend.outside = TRUE, 
              legend.outside.position = "bottom",
              # legend.outside.size= .3, # mystery how to make it work
              legend.title.size= .8,
              legend.text.size= .6,
              legend.format=list(text.separator="-"),
              outer.margins=c(0,0,0,0), inner.margins=c(0,0,0,0))
  } ) # map peri
  return(pl_map)
 }

# pl_rq_all_map<-
#   map(reponse_l, \(biolo)
#     {map2(rq_Mod_mars_all[[biolo$rdescr]],rq_Mod_sel[[biolo$rdescr]],
#          ~pl_rq_Mod_map(.x,.y,tauchoice)) } )

pl_rq_sel_map<-
  map(reponse_l, \(biolo)
    {map2(rq_Mod_mars_sel_per[[biolo$rdescr]],
          rq_Mod_sel[[biolo$rdescr]],
         ~pl_rq_Mod_map(.x,.y,tauchoice)) } )

walk(pl_rq_sel_map,
     ~iwalk(., ~tmap_save(.x$all, dpi=400,
                          filename=sprintf("%s/%s/%s_%s_map.tiff",
                              graph_path, substr(.y,1,6), espece, .y)) ) )

```

## Animated GIF Maps plots
```{r}
#| label: rq_Mod_plot_map

pl_rq_Mod_map_gif<-function(rqmodmars,sdmname,tauchoice){
    # biolo=reponse_l[[1]]
    # rqmodmars=rq_Mod_mars_sel[[biolo$rdescr]][[1]]
    # sdmname=names(rq_Mod_mars_sel[[biolo$rdescr]])[1]
  
  tmap_mode("view") # "plot" "view"
  tmp_sf <-
  tm_basemap(leaflet::providers$OpenStreetMap.HOT) +
  tm_shape(rqmodmars) +
    tm_fill(col = sprintf("t%.3f",tauchoice),
            palette = "-Spectral", alpha = 0.7) +
    # tm_borders("white", lwd = 0) +
    tm_facets(along = "Period") +
  tm_layout(legend.outside = TRUE,
              title.size=10)

  tmap_animation(
    tmp_sf, filename = sprintf("%s/%s/%s_%s_map.gif",
                    graph_path, substr(sdmname,1,6), espece, sdmname),
    fps = 1, width = 2000, height = 2000, dpi=600 )

 }

# pl_rq_all_map<-
#   map(reponse_l, \(biolo)
#     {imap(rq_Mod_mars_all[[biolo$rdescr]],
#          ~pl_rq_Mod_map_gif(.x,.y,tauchoice)) } )

# pl_rq_sel_map<-
#   map(reponse_l, \(biolo)
#     {imap(rq_Mod_mars_sel_per[[biolo$rdescr]],
#          ~pl_rq_Mod_map_gif(.x,.y,tauchoice)) } )

```

# Final actions and save

Rdata are saved in `rdataout`. An excel file collects data in `r binderout` , with sheets for :

-   data : contains whatever

```{r}
#| label: finalsave_xls
# wb <- loadWorkbook(binderout) # addWorksheet(wb, sheetName = "rql")
# writeData(wb, sheet = "Rq_coeff", x = smrq_l, 
#           startCol = 1, startRow = 1,withFilter = FALSE)
# saveWorkbook(wb,file=binderout, overwrite = TRUE)

```

```{r}
#| label: finalsave_r
#| 

save(list=(ls()[grep("rq_", ls())]),
     file = paste0(rdataout,".RData"))
beepr::beep(2)
```

# Supplementary data

## Software details

::: {.callout-tip collapse="true"}
## Expand for R Session Info

```{r, echo = FALSE}
#| include: true

library(sessioninfo)
pkg_sesh <- session_info(pkgs = "attached")
quarto_version <- system("quarto --version", intern = TRUE)
pkg_sesh$platform$quarto <- paste(
  system("quarto --version", intern = TRUE),
  "@",
  quarto::quarto_path()
  )
pkg_sesh
```
:::

# References {.unnumbered}
