---
title: "MELTING POTES PROJECT : SDM-NEO MODELS Linear Quantile Regression"
author: "Am√©lie Lehuen"
date: "2022-12-14"
description: "ANALYSIS WITH KOENKER'S QUANTREG PACKAGE"
toc: true # table of content at beginning of document
number-sections: true
highlight-style: pygments
format: 
  html: 
    self-contained: true
    code-fold: false
    html-math-method: katex # displays equations
  pdf:
    code-line-numbers: true
    geometry: 
      - top=20mm
      - left=20mm
  docx: 
    reference-doc: default

bibliography: references.bib

editor: visual
execute:
  eval: true
  echo: false
  message: false
  warning: false
  output: true
  include: false
  cache: false #create cache of results of chunks
---

# GAUSSIAN QUANTILE REGRESSION ANALYSIS WITH KOENKER'S QUANTREG PACKAGE

## Introduction

Gaussian quantile regression analysis with Koenker's `quantreg` package

## Script preparation

### Packages

```{r}
#| label: load-packages
#| code-summary: "Packages"

library(readxl) ; library(openxlsx); library(beepr) # Edition d'un fichier Excel
library(tidyverse); library(reshape2); library(rlist) # the one; melt; list.append
library(ggpubr); #library(GGally); # stat_compare_means ;
library(scales); library(RColorBrewer); library(wesanderson); library(grafify); library(colorspace); library(ggsci); library(gplots) # show_col and colors colors colors!
library(quantreg);# library(visreg)
library(plotly); library(plot3D);  # graphiques 3D plot 3D for mesh library(pracma)

# # GIS Packages
library(sf); library(sfheaders); # st_as_sf ; sf_to_df
library(htmlwidgets) # library(leaflet) # saveWidget ; for interactive 3D plots
```

### Working Environment

```{r}
#| label: workenvir

rm(list=ls())
# tsk <- "A_SDM_NEO/"
wdpath <- "../" #paste(pc,"Melting Pot/BDD/",tsk,sep="")
wdwork <- paste(wdpath,"Matrices/",sep="")
wdgraph <- paste(wdpath,"Graphiques/",sep="")
wdres <- paste(wdpath,"Resultats/",sep="")
# setwd("./")

pc <- "C:/Users/lehuen201/Nextcloud/" # "E:/" #
wdgraphEx<-wdgraph #paste(pc,"Copie-HD/Melting Potes/",tsk,"Graphiques/",sep="")
wdGIS <- paste(pc,"Melting Pot/SIG/",sep="")

etude <- "CSLN_Mars"
```

### Graphic charter

```{r}
#| label: graphchart

theme_set(theme_bw(base_size = 16)) # theme_gray() theme_bw() theme_light()

pal_cspx <- function(x) {divergingx_hcl(x,palette = "Zissou 1")}; # show_col(pal_cspx(6)) # colorspace
colRQ<-pal_cspx(4); colBin<-c(pal_cspx(6)[3],pal_cspx(6)[5]); blank<-alpha("#dae8ed",0.1); # show_col(colBin)
Scalc_rq<- function() {scale_colour_manual(values=colRQ)}
Scalf_rq2d <- function() {scale_fill_gradientn(colours=colRQ)} # function(x) {scale_fill_material("teal")} # 

pal_ggscc <- pal_material("teal"); # show_col(pal_ggscc(9)) # ggsci
colSum <- c(pal_ggscc(9)[3],pal_ggscc(9)[7],pal_ggscc(9)[1]) # show_col(colSum)
colInliers<-pal_material("teal")(10)[5] ; colOutliers = pal_material("deep-orange")(10)[5] # show_col(colOutliers)
Scalc_misc <- function() {scale_color_discrete_diverging(palette = "Blue-Red 3")}
Scale_map<- function() {scale_fill_distiller(palette = "Spectral")}
colIC <- col2hex("gray50")
```

### Home made functions

```{r}
#| label: functmade

gaussf <- function(x,A,mu,sigma) {
  A*exp(-((x-mu)^2/(2*sigma^2))/(sigma*sqrt(2*pi)))}
gauss2d <- function(x1,x2,A,mu1,sigma1,mu2,sigma2) {
  A*exp(-(((x1-mu1)^2/(2*sigma1^2))+((x2-mu2)^2/(2*sigma2^2))))}
```

## Load of External data and Basic Variables

### External data

```{r}
#| label: externdata

rdatain <- sprintf("%s%s_BDD.RData",wdwork,etude)
load(rdatain)
```

### Output save binder and Rdata

```{r}
#| label: outfiles

binderout <- sprintf("%sCSLN_BDD.xlsx",wdres)
rdataout  <- sprintf("%s%s_nlRQ_BDD.RData",wdwork,etude)
# if exists
# load(rdataout)
```

### Basic variables

```{r}
#| label: basicvar

analysis <- "RQ Nonlinear"

choixttt <- 1#23 # treatment choices 1: RQ 1 to 2 factors coeff and AICm; 2: RQ graphs on demand; 3 : Mars SDM calculation

# Choice of predictors used according to autocorrelation study, taus...
Var_choosen<-c("flow_mxd","inunt","sal_dtd","temp_m","mudrate_m","tenfon_mxd")
pred_red <- predict  %>% 
  subset(Var %in% Var_choosen) %>% 
  arrange(match(Var,Var_choosen))
taus <- c(0.5,0.9,0.95,0.975) # c(0.5,0.85,0.9,0.95,0.975,0.99) #c(1:19/20,0.975,0.99)
spe <- 1#:nrow(speciesMP) # 1:CERED 2:CORVO 3:HEDDI 4:LIMBA 5:PERUL 6:SCRPL
reponse<-reponse %>% filter(rvar %in% c("Biomass_gAFDWm2","Density_indm2"))
answ <- 1:nrow(reponse)
sai <- 1#:nrow(saison) # 1:Year 2:Winter 3:Summer
explo <- 1:nrow(pred_red) # Choice of the domain of exploration of the reduced predictors
graphfine<-50 # graph resolution for 2D and 3D graphs surfaces

# Model equation tested ----
# Gaussian equation one factor with Initial conditions (CI) vector
FactA_CI <- c(0.99,0.99,0.99,0.99,0.99,0.99) #(0.99, bathy) modif facteur A regarding results of RQ, same length as pred_red
SDM_tau1<-c(0.975,0.975,0.975,0.975,0.95,0.975);

# Gaussian equation two factors with Initial conditions (CI) vector
FactA_CI2d <- 0.99
```

# ONE to TWO FACTOR Gaussian QR with AICm and Rone calculation

A litterature ref is done by adding an "Insert anything" tool (CTRL+/) : "/Citation". Points to Zotero, looks like [@cozzoli2018] and creates the reference table. Can also inserted by the button insert.

You can add an equation @eq-one to illustrate the calculation : "/Inline Math" or "Display math"

$$
price = \hat{\beta}_0 + \hat{\beta}_1 \times area + \epsilon
$$ {#eq-one}

```{r}
#| label: calculation_1
#| cache: true

if (choixttt==1 | choixttt==12 | choixttt==13 | choixttt==123){
  modelq_list <- list()
  RqMod_list <- list();  smrq_t_list <- list(); rqResid_t_list <- list()
  rqlim_t_list <- list(); rqinf_t_list <- list(); rqsup_t_list <- list();
  sm_plot_list <-list(); qqres_plot_list<-list(); dp_plot_list<-list()
  dp2dF_plot_list <- list(); dp2d_plot_list <- list(); dp3d_plot_list <- list()
  dp3dS_plot_list <- list(); dp3dF_plot_list <- list()
  for (sp in spe) { # sp=1
    df <- CSLN_Mars[which(CSLN_Mars$SPCourt == speciesMP$SPCourt[sp]),]
    for (sa in sai) {# sa=1
      for (rep in answ){ # rep=1
        for (k in explo) { # k=1 
          
          # ONE FACTOR RQ ----
          # var def for interation
          yt = reponse[rep,1]
          yl = sprintf("%s (%s)",reponse[rep,2],reponse[rep,3])
          zt = "Zone"
          x1t = sprintf("%s%s",pred_red[k,1],saison[sa,1])
          x1l = sprintf("%s%s (%s)",pred_red[k,2],saison[sa,1],pred_red[k,3])
          dfrq <-df[,c(yt,x1t,zt)]
          dfrq <-as.data.frame(na.omit(dfrq)) %>% 
            rename(x1=!!x1t,y=!!yt,z=!!zt)
          y <- dfrq$y <- jitter(dfrq$y)
          x1 <- dfrq$x1 <- jitter(dfrq$x1)
          z <- dfrq$z
          lci <- list(A=quantile(y,FactA_CI[k]), mu=median(x1), sigma=sd(x1)); 
          
          x1mod <- seq(min(x1),max(x1),length.out=graphfine)
          x1Mod <- data.frame(x1mod) %>% rename(x1=x1mod)
          titleG <- sprintf("%s %s in %s",analysis,
                            speciesMP$Taxon_SNa[sp],saison[sa,2])
          sdmname<-sprintf("nlRQ1_%g%g%g%g0",sp,sa,rep,k)
          
          xt<-paste("Gaussian",x1t,sep=' '); 
          xl<-paste("Gaussian",x1l,sep=' ')
          subtitleG <- sprintf("%s vs %s",yl,xl)
          
          # RQ calculation with error management ----
          modelq_t <-vector("list", length(taus))
          RqMod_t <- list(); smrq_t <- list(); rqResid_t <- list()
          rqlim_t <- list(); rqinf_t <- list(); rqsup_t <- list()
          for (t in 1:length(taus)){ #t=1
            tryCatch({
              # nlRQ PARAMETER CONTROL TO AVOID R ABORT WHEN SUMMARY(MODEL) : InitialStepSize=0 (ex=1) ----
              cc<-nlrq.control(maxiter=100, k=2, 
                               InitialStepSize = 0, 
                               big=1e+20, eps=1e-06, beta=0.97)
              modelq_t[[t]]<-nlrq(y~gaussf(x1,A,mu,sigma), 
                           start = lci, tau=taus[t],
                           control=cc, method="BFGS")
              #### modelq<-rq(y~gaussf(x1,A,mu,sigma), start = lci, tau=taus); #!!!!A VOIR !!!!!
              # modelq_t[[t]] <- modelq
              modelq0<-rq(y ~ 1, tau=taus[t])

              # Summary calculation and pimp
              smrq_t[[t]] <- as.data.frame(summary(modelq_t[[t]])$coefficients) %>%
                mutate(Var=rownames(.)) %>% 
                relocate(Var) %>% 
                remove_rownames(.) %>%
                mutate(AIC=round(AIC(modelq_t[[t]])[1],1),
                        Rone=round((1 - modelq_t[[t]]$m$rho/modelq0$rho),5)) %>% 
                mutate(tau=taus[t], taust=sprintf("tau= %s",tau),
                        sdmname=sdmname,
                        mode=paste("RQnl",
                             environment(modelq_t[[t]]$m$formula)$form[[3]][[1]],
                             "1var",sep=' '),
                        formula=format(body(gaussf)[2]),
                        type="Gaussian 1var",
                        tau=taus[t],
                        Sp=speciesMP$SPCourt[sp],Season=saison[sa,2],
                        reponse=yl,reponset=yt,
                        Predictor1=pred_red[k,1],Predictor2="None",
                        predict=xl,predictt=xt)
              # Out of limits points calculation
              rqlim_t[[t]] <- as.data.frame(fitted(modelq_t[[t]])) %>%
                mutate(across(everything(), 
                              function(x){replace(x, which(x<0), NA)})) %>% 
                rename_all(~"RqLim") %>% 
                mutate(tau=taus[t],
                       taust=sprintf("tau= %s",tau),
                       sdmname=sdmname) %>% 
                bind_cols(tibble(x1=x1),tibble(y=y))
              rqsup_t[[t]] <- rqlim_t[[t]] %>% mutate(across(c(x1,y),
                                               ~replace(.x, which(y<RqLim), NA))) %>%
                drop_na()
              rqinf_t[[t]] <- rqlim_t[[t]] %>% mutate(across(c(x1,y),
                                               ~replace(.x, which(y>=RqLim), NA))) %>%
                drop_na()
              # Surface model calculation
              RqMod_t[[t]] <- as.data.frame(predict(modelq_t[[t]],newdata=x1Mod)) %>%
                rename_all(~"RqMod") %>%
                mutate(across(everything(), 
                              function(x){replace(x, which(x<0), NA)})) %>% 
                mutate(tau=taus[t], 
                       taust=sprintf("tau= %s",tau),
                       sdmname=sdmname) %>% 
                bind_cols(tibble(x1=x1Mod$x1))
              # Residuals
              rqResid_t[[t]] <- as.data.frame(residuals(modelq_t[[t]])) %>%
                rename_all(~"residuals") %>% 
                mutate(tau=taus[t], 
                       taust=sprintf("tau= %s",tau),
                       sdmname=sdmname) %>% 
                bind_cols(tibble(x1=x1),tibble(y=y))

              modelq<-NULL;
            },error = function(e) {print(e)})#,finally = {})
          }
          modelq_list[[sdmname]] <- modelq_t
          smrq_t_list[[sdmname]] <- smrq_t <- smrq_t %>% map_dfr(., ~.)
          RqMod_list[[sdmname]] <- RqMod_t  <- RqMod_t %>% map_dfr(., ~.)
          rqlim_t_list[[sdmname]] <- rqlim_t <- rqlim_t %>% map_dfr(., ~.)
          rqsup_t_list[[sdmname]] <- rqsup_t <- rqsup_t %>% map_dfr(., ~.)
          rqinf_t_list[[sdmname]] <- rqinf_t <- rqinf_t %>% map_dfr(., ~.)
          rqResid_t_list[[sdmname]] <- rqResid_t <- rqResid_t %>% map_dfr(., ~.)

          # GRAPHIC PART ----
          # SUMMARY GRAPHS
          smrq_t$lowerbd<- smrq_t$Value-smrq_t$`Std. Error`
          smrq_t$upperbd<- smrq_t$Value+smrq_t$`Std. Error`
          sm_plot_list[[sdmname]] <- ggplot(smrq_t,aes(x=tau,y=Value, group = 1)) +
            geom_ribbon(aes(ymin=lowerbd, 
                            ymax=upperbd), fill=colSum[3], alpha=0.8) +
            geom_point(col=colSum[2],size=1) +
            geom_line(col=colSum[2],linewidth=.5, alpha=0.8) +
            facet_wrap(~Var,scales="free") +
            labs(title = titleG,subtitle = subtitleG); #print(sm_plot_list[[sdmname]])
          ggsave(sprintf("%s%s/%s/nlRQ1/%s_%s_nlRQ1_sm_%s_%s_%s.tiff",
                         wdgraph,speciesMP$SPCourt[sp],
                         analysis,etude,speciesMP$SPCourt[sp],
                         saison[sa,2],yt,x1t),
                 plot = sm_plot_list[[sdmname]], width = 12, height = 6, dpi=600)
          # QQPLOT RESIDUALS OF RQ MODEL
          qqres_plot_list[[sdmname]] <- ggplot(rqResid_t, 
                                               aes(sample=residuals, 
                                                   color=factor(tau))) + 
            stat_qq() + stat_qq_line() + 
            facet_wrap(~tau) +
            Scalc_rq() +
            theme(legend.position="bottom")+
            labs(title=titleG,
                 subtitle=paste("Residuals for ",subtitleG,sep=""),
                 color="Quantile"); #print(qqres_plot_list[[sdmname]])
          ggsave(sprintf("%s%s/%s/nlRQ1/%s_%s_nlRQ1Resid_%s_%s_%s.tiff",
                         wdgraph,speciesMP$SPCourt[sp],
                         analysis,etude,speciesMP$SPCourt[sp],
                         saison[sa,2],yt,x1t),
                 plot = qqres_plot_list[[sdmname]], width = 12, height = 8, dpi=600)
          
          # RQ GRAPHS
          dp_plot_list[[sdmname]] <- ggplot(dfrq, aes(x=x1, y=y)) + 
            geom_point(aes(color=z)) +
            Scalc_misc() +
            theme(legend.position="bottom") +
            stat_function(fun=gaussf,color=colIC,
                          linetype = "dotted",size=1,args=lci) +
            labs(title=titleG,
                 x=paste(x1l," (",pred_red[k,3],")",sep=""),
                 y=yl,
                 color=zt)
          for (t in 1:length(taus)){ # required to have diff color for rq lines
            modelq <- modelq_list[[sdmname]][[t]]
            dp_plot_list[[sdmname]] <- dp_plot_list[[sdmname]] + 
              stat_function(fun=gaussf,
                            color=colRQ[t],size=.7,
                            args=list(A=coef(modelq)[1],
                                      mu=coef(modelq)[2],
                                      sigma=coef(modelq)[3]))+
              annotate("text",x=max(x1,na.rm=TRUE)*0.9,
                       y=max(y)*((t/length(taus))*0.9),
                       colour=colRQ[t],size=4,fontface=2,hjust=0, 
                       label = paste(taus[t]))
          } # print(dp_plot_list[[sdmname]])
          ggsave(sprintf("%s%s/%s/nlRQ1/%s_%s_nlRQ1_%s_%s_%s.tiff",
                         wdgraph,speciesMP$SPCourt[sp],
                         analysis,etude,speciesMP$SPCourt[sp],
                         saison[sa,2],yt,x1t),
                 plot = dp_plot_list[[sdmname]], width = 8, height = 8, dpi=600)
          # ----
 
          # TWO FACTORS LOOP ----
          for (k2 in explo[-c(1:k)]) { #k2=2
            # var def for interation ----
            x2t = sprintf("%s%s",pred_red[k2,1],saison[sa,1])
            x2l = sprintf("%s%s (%s)",pred_red[k2,2],saison[sa,1],pred_red[k2,3])
            dfrq <-df[,c(yt,x1t,x2t)]
            dfrq <-as.data.frame(na.omit(dfrq)) %>% 
              rename(x1=!!x1t,x2=!!x2t,y=!!yt)
            y <- dfrq$y <- jitter(dfrq$y)
            x1 <- dfrq$x1 <- jitter(dfrq$x1)
            x2 <- dfrq$x2 <- jitter(dfrq$x2)
            z <- dfrq$z
            lci <- list(A=quantile(y,FactA_CI2d),
                        mu1=median(x1),
                        sigma1=sd(x1),
                        mu2=median(x2),
                        sigma2=sd(x2)); #,epsilon=0
            
            x2mod <- seq(min(x2),max(x2),length.out=graphfine)
            x1x2mod <- data.frame(cbind(x1mod,x2mod)) %>% 
              rename(x1=x1mod,x2=x2mod)
            gridx1x2 <- expand.grid(x1mod,x2mod) %>% 
              rename(x1=Var1,x2=Var2)
            gridx1x2mat <- mesh(x1mod,x2mod)
            Zinit<-gauss2d(x1=gridx1x2mat[["x"]],
                           x2=gridx1x2mat[["y"]],
                           A=lci[[1]],mu1=lci[[2]],
                           sigma1=lci[[3]],mu2=lci[[4]],
                           sigma2=lci[[5]]) #,epsilon=lci[[6]]
            
            titleG <- sprintf("%s %s in %s",
                              analysis,speciesMP$Taxon_SNa[sp],saison[sa,2])
            sdmname<-sprintf("nlRQ2_%g%g%g%g%g",sp,sa,rep,k,k2)
            
            xt<-paste("Gaussian",x1t,"&",x2t,sep=' ')
            xl<-paste("Gaussian",x1l,"&",x2l,sep=' ')
            subtitleG <- sprintf("%s vs %s",yl,xl)
            
            # RQ calculation with error management
            modelq_t <-vector("list", length(taus))
            rqlim_t <- list(); rqinf_t <- list(); rqsup_t <- list()
            RqMod_t <- list(); smrq_t <- list(); rqResid_t <- list()
            for (t in 1:length(taus)){ #t=1
              tryCatch({
                # nlRQ PARAMETER CONTROL TO AVOID R ABORT WHEN SUMMARY(MODEL) : InitialStepSize=0 (ex=1) ----
                cc<-nlrq.control(maxiter=100, k=2, 
                                 InitialStepSize = 0, 
                                 big=1e+20, eps=1e-06, beta=0.97)
                modelq<-NULL
                modelq<-nlrq(y~gauss2d(x1,x2,A,mu1,sigma1,mu2,sigma2), 
                             start=lci, tau=taus[t],
                             control=cc, method="BFGS") #,epsilon
                modelq_t[[t]] <- modelq
                modelq0<-rq(y ~ 1, tau=taus[t])
               
                # Summary calculation and pimp
                smrq_t[[t]] <- as.data.frame(summary(modelq_t[[t]])$coefficients) %>%
                  mutate(Var=rownames(.)) %>% 
                  relocate(Var) %>% 
                  remove_rownames(.) %>%
                  mutate(AIC=round(AIC(modelq_t[[t]])[1],1),
                         Rone=round((1 - modelq_t[[t]]$m$rho/modelq0$rho),5)) %>% 
                  mutate(tau=taus[t], taust=sprintf("tau= %s",tau),
                         sdmname=sdmname,
                         mode=paste("nlRQ",
                                    environment(modelq_t[[t]]$m$formula)$
                                      form[[3]][[1]],"2var",sep=' '),
                         formula=paste(format(body(gauss2d)[2]),
                                       sep="",collapse=""),
                         type="Gaussian 2var",
                         tau=taus[t],
                         AIC=round(AIC(modelq_t[[t]])[1],1),
                         Rone=round((1 - modelq_t[[t]]$m$rho/modelq0$rho),5),
                         Sp=speciesMP$SPCourt[sp],Season=saison[sa,2],
                         reponse=yl,reponset=yt,
                         Predictor1=pred_red[k,1],
                         Predictor2=pred_red[k2,1],
                         predict=xl,predictt=xt)
                # Out of limits points calculation
                rqlim_t[[t]] <- as.data.frame(fitted(modelq_t[[t]])) %>%
                  mutate(across(everything(), 
                                function(x){replace(x, which(x<0), NA)})) %>% 
                  rename_all(~"RqLim") %>% 
                  mutate(tau=taus[t], taust=sprintf("tau= %s",tau),
                         sdmname=sdmname) %>% 
                  bind_cols(tibble(x1=x1),tibble(x2=x2),tibble(y=y))
                rqsup_t[[t]] <- rqlim_t[[t]] %>% 
                  mutate(across(c(x1,x2,y),
                                ~replace(.x, which(y<RqLim), NA))) %>% 
                  drop_na()
                rqinf_t[[t]] <- rqlim_t[[t]] %>% 
                  mutate(across(c(x1,x2,y),
                                ~replace(.x, which(y>=RqLim), NA))) %>% 
                  drop_na()
                # Surface model calculation
                RqMod_t[[t]] <- as.data.frame(
                  predict(modelq_t[[t]],newdata=gridx1x2)) %>%
                  rename_all(~"RqMod") %>%
                  mutate(across(everything(), 
                                function(x){replace(x, which(x<0), NA)})) %>% 
                  mutate(tau=taus[t], 
                         taust=sprintf("tau= %s",tau),
                         sdmname=sdmname) %>% 
                  bind_cols(gridx1x2)
                # Residuals
                rqResid_t[[t]] <- as.data.frame(residuals(modelq_t[[t]])) %>%
                  rename_all(~"residuals")%>% 
                  mutate(tau=taus[t], 
                         taust=sprintf("tau= %s",tau),
                         sdmname=sdmname) %>% 
                  bind_cols(tibble(x1=x1),tibble(x2=x2),tibble(y=y))

                modelq<-NULL   
              },error = function(e) {print(e)})#,finally = {})
            }
            modelq_list[[sdmname]] <- modelq_t
            RqMod_list[[sdmname]] <- RqMod_t  <- RqMod_t %>% map_dfr(., ~.)
            rqlim_t_list[[sdmname]] <- rqlim_t <- rqlim_t %>% map_dfr(., ~.)
            rqsup_t_list[[sdmname]] <- rqsup_t <- rqsup_t %>% map_dfr(., ~.)
            rqinf_t_list[[sdmname]] <- rqinf_t <- rqinf_t %>% map_dfr(., ~.)
            smrq_t_list[[sdmname]] <- smrq_t <- smrq_t %>% map_dfr(., ~.)
            rqResid_t_list[[sdmname]] <- rqResid_t <- rqResid_t %>% map_dfr(., ~.)
            
            # GRAPHIC PART ----
            # SUMMARY GRAPHS
            smrq_t$lowerbd<- smrq_t$Value-smrq_t$`Std. Error`
            smrq_t$upperbd<- smrq_t$Value+smrq_t$`Std. Error`
            sm_plot_list[[sdmname]] <- ggplot(smrq_t,
                                              aes(x=tau,y=Value, group = 1)) +
              geom_ribbon(aes(ymin=lowerbd, ymax=upperbd), 
                          fill=colSum[3], alpha=0.8) +
              geom_point(col=colSum[2],size=1) +
              geom_line(col=colSum[2],linewidth=.5, alpha=0.8) +
              facet_wrap(~Var,scales="free") +
              labs(title = titleG,subtitle = subtitleG); #sm_plot_list
            ggsave(sprintf("%s%s/%s/nlRQ2/%s_%s_nlRQ2_sm_%s_%s_%s_%s.tiff",
                           wdgraph,speciesMP$SPCourt[sp],
                           analysis,etude,speciesMP$SPCourt[sp],
                           saison[sa,2],yt,x1t,x2t),
                   plot = sm_plot_list[[sdmname]], 
                   width = 12, height = 6, dpi=600)
            # QQPLOT RESIDUALS OF RQ MODEL
            qqres_plot_list[[sdmname]] <- ggplot(rqResid_t, 
                                                 aes(sample=residuals, 
                                                     color=factor(tau))) + 
              stat_qq() + stat_qq_line() + 
              facet_wrap(~tau) +
              Scalc_rq() +
              theme(legend.position="bottom")+
              labs(title=titleG,
                   subtitle=paste("Residuals for ",subtitleG,sep=""),
                   color="Quantile"); #qqres_plot_list
            ggsave(sprintf("%s%s/%s/nlRQ2/%s_%s_nlRQ2Resid_%s_%s_%s_%s.tiff",
                           wdgraph,speciesMP$SPCourt[sp],
                           analysis,etude,speciesMP$SPCourt[sp],
                           saison[sa,2],yt,x1t,x2t),
                   plot = qqres_plot_list[[sdmname]], 
                   width = 12, height = 8, dpi=600)
            
            # RQ GRAPHS
            # 2D static graphic : RASTER
            dp2dF_plot_list[[sdmname]] <- ggplot(RqMod_t) +
              geom_raster(aes(x = x1, y = x2, fill = RqMod),alpha=0.7) + 
              geom_point(data=rqinf_t,aes(x=x1, y=x2), 
                         shape=21, size=1, color=colInliers, 
                         fill=colInliers, alpha=.5, na.rm = TRUE) +
              geom_point(data=rqsup_t,aes(x=x1, y=x2), 
                         shape=23, size=1, color=colOutliers, 
                         fill=colOutliers, alpha=.5, na.rm = TRUE) +
              labs(title=titleG,x=x1l, y=x2l,
                   fill = paste("SDM-NEO\n",reponse[rep,3],sep="")) +
              guides(alpha = "none") +
              Scalf_rq2d() +
              facet_wrap(taust ~ .); print(dp2dF_plot_list[[sdmname]])
            ggsave(sprintf("%s%s/%s/nlRQ2/%s_%s_nlRQ22d_%s_%s_%s_%s.tiff",
                           wdgraph,speciesMP$SPCourt[sp],
                           analysis,etude,speciesMP$SPCourt[sp],
                           saison[sa,2],yt,x1t,x2t),
                   plot = dp2dF_plot_list[[sdmname]], width = 10, height = 7, dpi=600)
            
            # Experimental points on 3D graphic
            # define standard layout scene
            myscene<-list(camera = list(eye = list(x = -1.5, y = 1.5, z = 0.3)), 
                          aspectmode='cube',
                          xaxis = list(title = x1l), 
                          yaxis = list(title = x2l), 
                          zaxis = list(title = yl))
            
            dp3dS_plot_list[[sdmname]] <- plot_ly(showlegend=FALSE) %>% 
              add_trace(data=dfrq, x = x1, y = x2, z = y,
                        mode = "markers", type = "scatter3d",
                        marker = list(size = .5, color = "blue", 
                                      opacity = 0.5, symbol = 104)) %>%
              layout(title = titleG, scene = myscene)
            # print(dp3dS_plot_list[[sdmname]])
            
            dp2d_plot_t <- list(); dp3d_plot_t <- list()
            # Define surfaces for each tau
            for (t in 1:length(taus)){ # t=4
              RqMod_mat <- RqMod_t %>% 
                filter(tau==taus[t])
              RqMod_mat <- array(RqMod_mat$RqMod,
                                 dim=c(graphfine,graphfine))
              rqlim <- rqlim_t %>% 
                filter(tau==taus[t]) %>% 
                select(RqLim)
              rqsup<-rqsup_t %>% 
                filter(tau==taus[t])
              rqinf<-rqinf_t %>% 
                filter(tau==taus[t])
              
              dp2d_plot_t[[t]] <- ggplot(RqMod_t %>% 
                filter(tau==taus[t])) +
                geom_raster(aes(x = x1, y = x2, fill = RqMod), alpha=0.7) + 
                geom_point(data=rqinf_t,aes(x=x1, y=x2), 
                           shape=21, size=1, color=colInliers, 
                           fill=colInliers, alpha=.5, na.rm = TRUE) +
                geom_point(data=rqsup_t,aes(x=x1, y=x2), 
                           shape=23, size=1, color=colOutliers, 
                           fill=colOutliers, alpha=.5, na.rm = TRUE) +
                labs(x=x1l, y=x2l,
                     fill = paste("SDM-NEO\n",reponse[rep,3],sep="")) +
                guides(alpha = "none") +
                Scalf_rq2d()#; print(dp2dF_plot_list[[sdmname]])
 
              dp3d_plot_t[[t]] <- plot_ly(showlegend=F, 
                                   scene=paste("scene",t,sep="")) %>% 
                add_surface(x = gridx1x2mat[["x"]], 
                            y = gridx1x2mat[["y"]], 
                            z = RqMod_mat,
                            opacity = 0.9, 
                            colorscale = list(c(0,1),c(blank,colRQ[t])),
                            colorbar=list(title=list(
                              text=paste("SDM-NEO\n",reponse[rep,3],"\nTau=",
                                         taus[t],sep="")))) %>%
                add_trace(x = rqsup$x1, 
                          y = rqsup$x2, 
                          z = rqsup$y, 
                          mode = "markers", type = "scatter3d",
                          marker = list(size = 2, color = colOutliers, 
                                        opacity = 0.5, symbol = "diamond")) %>%
                add_trace(x = rqinf$x1, 
                          y = rqinf$x2, 
                          z = rqinf$y, 
                          mode = "markers", type = "scatter3d",
                          marker = list(size = 2, color = colInliers, 
                                        opacity = 0.5, symbol = "circle")) %>%
                add_surface(x = ~gridx1x2mat[["x"]], 
                            y = ~gridx1x2mat[["y"]],
                            z = ~Zinit,
                            opacity = 0.4,
                            colorscale = list(c(0,1),c(blank,colIC)),
                            colorbar=list(title=list(
                              text="Initial conditions"),
                              limits=c(0,max(Zinit)))) %>%
                layout(title = titleG, scene = myscene)#; print(dp3d_plot_t[[t]])
              
              dp3dS_plot_list[[sdmname]] <- dp3dS_plot_list[[sdmname]] %>% 
                add_surface(x = gridx1x2mat[["x"]], 
                            y = gridx1x2mat[["y"]], 
                            z = RqMod_mat,
                            opacity = 0.8, 
                            colorscale = list(c(0,1),c(blank,colRQ[t])))
            } # taus
            dp2d_plot_list[[sdmname]] <- dp2d_plot_t
            dp3d_plot_list[[sdmname]] <- dp3d_plot_t

            # scene <- list.append(myscene,domain=list(x=c(0,0.33),y=c(0,0.5)))
            # scene2 <- list.append(myscene,domain=list(x=c(0.34,0.66),y=c(0,0.5)))
            # scene3 <- list.append(myscene,domain=list(x=c(0.67,1),y=c(0,0.5)))
            # scene4 <- list.append(myscene,domain=list(x=c(0,0.33),y=c(0.5,1)))
            # scene5 <- list.append(myscene,domain=list(x=c(0.34,0.66),y=c(0.5,1)))
            # scene6 <- list.append(myscene,domain=list(x=c(0.67,1),y=c(0.5,1)))
            # dp3dF_plot_list[[sdmname]] <- plotly::subplot(dp3d_plot_t, 
            #                       shareX = TRUE, shareY = TRUE, nrows = 2) %>%
            #   layout(scene = scene, scene2 = scene2, scene3 = scene3, 
            #          scene4 = scene4, scene5 = scene5, scene6 = scene6)
            # saveWidget(dp3dF_plot_list,
            #            sprintf("%s%s/%s/nlRQ2/%s_%s_nlRQ23dFacet_%s_%s_%s_%s.html",
            #                    wdgraphEx,speciesMP$SPCourt[sp],
            #                    analysis,etude,speciesMP$SPCourt[sp],
            #                    saison[sa,2],yt,x1t,x2t),
            #            selfcontained = F, libdir = "lib")
            
            # 3D plot with all taus models surface
            dp3dS_plot_list[[sdmname]] <- dp3dS_plot_list[[sdmname]] %>% 
              add_trace(x = rqsup$x1, y = rqsup$x2, z = rqsup$y, 
                        mode = "markers", type = "scatter3d",
                        marker = list(size = 2, color = colOutliers, 
                                      opacity = 0.5, symbol = "diamond")) %>%
              add_trace(x = rqinf$x1, y = rqinf$x2, z = rqinf$y, 
                        mode = "markers", type = "scatter3d",
                        marker = list(size = 2, color = colInliers, 
                                      opacity = 0.5, symbol = "circle")) %>%
              add_surface(x = ~gridx1x2mat[["x"]], 
                          y = ~gridx1x2mat[["y"]],
                          z = ~Zinit,
                          opacity = 0.4,
                          colorscale = list(c(0,1),c(blank,colIC)),
                          colorbar=list(title=list(text="Initial conditions"),
                                        limits=c(0,max(Zinit)))) %>%
              hide_colorbar()
            saveWidget(dp3dS_plot_list[[sdmname]],
                       sprintf("%s%s/%s/nlRQ2/%s_%s_nlRQ23dStack_%s_%s_%s_%s.html",
                               wdgraphEx,speciesMP$SPCourt[sp],
                               analysis,etude,speciesMP$SPCourt[sp],
                               saison[sa,2],yt,x1t,x2t),
                       selfcontained = F, libdir = "lib")
            
          } # two factors loop ----
        } # explo
      } # reponse
    } # saison
  } # species
  # ----
  
  smrq_l <- smrq_t_list %>% map_dfr(., ~.)
  sdmlist_name <- unique(smrq_l$sdmname)
  # Graphic representation of model performance
  dp_plot_list[[sdmname]]<- smrq_l %>% #filter(!str_detect(mode, "4var")) %>%
    mutate(model_desc=str_remove(predict,"Gaussian "))%>% 
    group_by(tau) %>%
    ggplot(aes(x=reorder(model_desc,-AIC),y=AIC,color = factor(tau),shape=reponse))+
    geom_point(alpha=0.8, size= 5) +
    scale_color_manual(values=colRQ) +
    labs(title="Quantile Regression AIC scores : Linear",
         x="Model",y="AIC",color="Quantile",shape="Biologic") +
    theme(axis.text = element_text(size=10,face="bold")) +
    coord_flip(); dp_plot_list[[sdmname]]
  ggsave(sprintf("%s%s/%s/%s_%s_nlRQ_AIC_scores.tiff",
               wdgraph,speciesMP$SPCourt[sp],
               analysis,etude,speciesMP$SPCourt[sp]), 
         plot = dp_plot_list[[sdmname]], width = 16, height = 8, dpi=600)
  
  # Sauvegarde des outputs ----
  rm(list=c("smrq_tmp","smrq","rqsup","rqinf","rqlim","RqMod_mat",
            "RqMod_t","rqsup_t","rqinf_t","rqlim_t",
            "modelq","modelq0","df","dfrq","tmp",
            "CSLN","CSLN_pur","Mars_csv","Mars_csv_sf"))
  rm(list=ls(pattern="scene"))
  save.image(rdataout)
} #end if choixttt 1
```

# Final actions and save

Rdata are saved in `rdataout`. An excel file collects data in `r binderout` , with sheets for :

-   data : contains whatever

```{r}
#| label: finalsave_xls
wb <- loadWorkbook(binderout) # addWorksheet(wb, sheetName = "rql")
writeData(wb, sheet = "nlRQ_coeff", x = smrq_l,
          startCol = 1, startRow = 1,withFilter = FALSE)
saveWorkbook(wb,file=binderout, overwrite = TRUE)

```

```{r}
#| label: finalsave_r

save.image(rdataout)
beepr::beep(2)
```

# References {.unnumbered}
