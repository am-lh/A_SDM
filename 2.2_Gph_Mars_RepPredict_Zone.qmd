---
title: "CREATION DE GRAPHIQUES DESCRIPTIFS DES DONNEES PROGRAMME REPONSES PREDICTEURS"
author: "Am√©lie Lehuen"
date: "2022-12-14"
description: "add info on script"
toc: true # table of content at beginning of document
number-sections: true
highlight-style: pygments
format: 
  html: 
    self-contained: true
    code-fold: false
    html-math-method: katex # displays equations
  pdf:
    code-line-numbers: true
    geometry: 
      - top=20mm
      - left=20mm
  docx: 
    reference-doc: default

bibliography: references.bib

editor: visual
execute:
  eval: true
  echo: false
  message: false
  warning: false
  output: true
  include: true
  cache: false #create cache of results of chunks
---

# CREATION DE GRAPHIQUES DESCRIPTIFS DES DONNEES PROGRAMME REPONSES PREDICTEURS

## Script preparation

### Packages

```{r}
#| label: load-packages
#| code-summary: "Packages"

library(tidyverse); library(beepr) 
library(ggExtra); library(gridExtra) # ;ggMarginal; grid.arrange # for the scatterhist home made only
library(ggpubr); # ggscatterhist
library(GGally); library(RColorBrewer); library(wesanderson)
library(knitr)
```

### Working Environment

```{r}
#| label: workenvir

rm(list=ls())
wdpath <- "../" #paste(pc,"Melting Pot/BDD/",tsk,sep="")
wdwork <- paste(wdpath,"Matrices/",sep="")
wdgraph <- paste(wdpath,"Graphiques/",sep="")
wdres <- paste(wdpath,"Resultats/",sep="")
# setwd(wdpath)
```

### Graphic charter

```{r}
#| label: graphchart

theme_set(theme_bw(base_size = 16)) # theme_gray() theme_bw() theme_light() theme_dark()
colDarj <- function(x) {wes_palette("Darjeeling2",x, type = "continuous")}
colZiss <- function(x) {wes_palette("Zissou1",x, type = "continuous")}
colSpec <- colorRampPalette(brewer.pal(8, "Spectral")); 
colDark <- colorRampPalette(brewer.pal(8, "Dark2"));
Scale_col <- function(x) {scale_colour_manual(values=colDarj(x))}
Scale_fill <- function(x) {scale_fill_manual(values=colDarj(x))}
```

### Home made functions

```{r}
#| label: functmade

# Scatter plot colored by groups ("Species")
ggscatterhist<-function (df, x = x, y = y,color = z,
                         title=title, ylab = ylab, xlab = xlab,
                         palette = palette,legend = legend){
    pmain <- ggplot(df, aes(x = .data[[x]], y = .data[[y]], color = .data[[z]]))+
                    geom_point()+
                    labs(title=title,x=xlab, y=ylab) +
                    scale_fill_manual(values=palette)+
                    theme(legend.position=legend,legend.title = element_blank())+
                    theme_bw()
    pmain<-ggMarginal(pmain, groupColour = TRUE, groupFill = TRUE)
      # xbox <- axis_canvas(pmain, axis = "x", coord_flip = TRUE) +
      #   geom_density(df, aes_string(x = x, color = z)) 
      # ybox <- axis_canvas(pmain, axis = "y") +
      #   geom_density(df, aes_string(x =  y, color = z)) +
      #   coord_flip()
      # p1 <- insert_xaxis_grob(pmain, xbox, grid::unit(2, "in"), position = "top")
      # p2 <- insert_yaxis_grob(p1, ybox, grid::unit(2, "in"), position = "right")
      # ggdraw(p2)
}

# ggpairs custom colors on corr
corr_col <- function(data, mapping, method="p", use="pairwise", ...){
  # grab data
  x <- eval_data_col(data, mapping$x)
  y <- eval_data_col(data, mapping$y)
  # calculate correlation
  corr <- cor(x, y, method=method, use=use)
  # calculate colour based on correlation value
  colFn <- colorRampPalette(c("blue", "white", "red"), interpolate ='spline')
  fill <- colFn(100)[findInterval(corr, seq(-1, 1, length=100))]
  ggally_text(
    label = as.character(round(corr, 2)),
    mapping = aes(),
    xP = 0.5, yP = 0.5,
    ...) + #  ggally_cor(data = data, mapping = mapping, ...) + 
    theme_void() +
    theme(panel.background = element_rect(fill=fill))

} #wrap(cor_func,method = 'spearman', symbol = "Corr:\n")

```

## Load of External data and Basic Variables

### External data

```{r}
#| label: externdata

rdatain <- sprintf("%sCSLN_Mars_Zone_BDD.RData",wdwork)
load(rdatain)
```

### Output binder and data

```{r}
#| label: outfiles

rdataout <- sprintf("%sCSLN_Mars_Zone_BDD.RData",wdwork)

```

### Basic variables

```{r}
#| label: basicvar

prgm <- "CSLN" 
etude <- paste(prgm,"_Mars",sep="")

spe <- 1#:nrow(speciesMP) # 1:CERED 2:CORVO 3:HEDDI 4:LIMBA 5:PERUL 6:SCRPL
reponse<-reponse[1:2,] # 1:Biomass_gAFDWm2 2:Density_indm2 
answ <- 1#:nrow(reponse)
sai <- 1#:nrow(saison) # 1:Year 2:Winter 3:Summer
pred<- 1:nrow(predict)

```

# GLOBAL VISION OF DATA

### Matrix set visualisation

```{r}
#| label: calculation_1

for (sp in spe){ # sp=1
  for (sa in sai){ # sa=1
    df <- CSLN_mud %>% filter(SPCourt == speciesMP$SPCourt[sp]) %>%
      select(paste(predict[,1],saison[sa,1],sep=""),reponse[1:2,1])
    colnames(df)<-c(predict[,2],reponse[,2])
    titreG <- paste("Mars3D Predictors for ",speciesMP$Taxon_SNa[sp]," in ",saison[sa,2]," - ", prgm, sep="")
    tp <- ggpairs(df, title=titreG, 
                  upper = list(continuous = corr_col),
                  lower = list(continuous= wrap("smooth", size = .5, alpha = 0.4, color = "navyblue"))) #+ #
      # theme(plot.title = element_text(size=18,face="bold"),
      #       strip.text.x = element_text(size=12,face="bold"),
      #       strip.text.y = element_text(size=10,face="bold"))
    ggsave(paste(wdgraph,speciesMP$SPCourt[sp],"/",etude,"_MatRP_",speciesMP$SPCourt[sp],saison[sa,1],".png",sep=""), 
           plot = tp, width = 16, height = 9, dpi=600)
    # Simple correlation matrix ----
    
    # library(ggcorrplot)
    # ggcorrplot(cor(df,use= "na.or.complete"), method = "circle",type = "upper",hc.order = TRUE,lab=TRUE)
    # dfcor<-rcorr(data.matrix(df))
    # ggcorrplot(dfcor$r, p.mat=dfcor$p, sig.level = 0.05, insig = "blank",
               # method = "circle",type = "upper",hc.order = TRUE,lab=TRUE) #
    
    cp <- ggcorr(df, method = c("pairwise", "pearson"),
                 low="#FC4E07", mid="white", high="#00AFBB", nbreaks = 5,# palette=RdBu,
                 geom="tile", hjust = 0.85, angle = 0, layout.exp=3, size=4,
                 label=TRUE,label_alpha = TRUE,label_round=1,label_size=4)+
      labs(title=paste("Mars3D Predictors for ",speciesMP$Taxon_SNa[sp]," in ",saison[sa,2]," - ", prgm, sep=""))+
      theme(plot.title = element_text(size=18,face="bold"))+
      theme_bw()
    ggsave(paste(wdgraph,speciesMP$SPCourt[sp],"/",etude,"_MatRP_corr_",speciesMP$SPCourt[sp],saison[sa,1],".png",sep=""), plot = cp, width = 9, height = 9)
}}
```

### Diagramme de densite des predicteurs Mars3D

```{r}
#| label: calculation_2

df<-CSLN_mud
mlist<-vector(mode = "list", length = length(pred))
for (pre in pred){ # pre=1
  x <- predict[pre,1]
  z <- "Zone"
  dp <- ggplot(df)+
    # geom_density(aes(flow_m,fill=Zone), alpha=0.5) +
    geom_density(aes(.data[[x]],fill=.data[[z]],colour=.data[[z]]), alpha=0.5) + #, na.rm = TRUE
    xlab(paste(predict[pre,2]," (",predict[pre,3],")",sep="")) +
    theme(legend.position="bottom",legend.title = element_blank()) +
    Scale_col(CSLN_unique$Zone) + Scale_fill(CSLN_unique$Zone)
  assign(paste('dp', pre, sep=''), dp + theme(legend.position="none"))
  dp <- dp + ggtitle(paste("Mars3D Data Density", " - ", prgm, sep=""))
  mlist[[pre]] <- eval(parse(text = paste('dp', pre, sep='')))
  ggsave(paste(wdgraph,"Predictors/",etude,"_GphR_","Mars3D","_Density","_",predict[pre,1],".png",sep=""), plot = dp, width = 12, height = 8)
}
if (length(pred)>1 ){
    titreG <- paste("Mars3D Data Density", " - ", prgm, sep="")
    nncol = 3; nnrow=ceiling(nrow(predict)/nncol)
    dp <- ggarrange(plotlist=mlist, ncol=nncol, nrow=nnrow, labels="AUTO",legend="bottom",common.legend = TRUE)#
    dp <- annotate_figure(dp, top = text_grob(titreG, face = "bold", size = 14))+bgcolor("white"); dp
    ggsave(paste(wdgraph,etude,"_GphR_Mars3D","_Density",".png",sep=""), plot = dp, width = 12, height = 12)
  # dev.off()
}

```

### Reponse vs Predicteurs avec densite en marge

```{r}
#| label: calculation_3

  for (sp in spe){ # sp=1
    df <- CSLN_mud[which(CSLN_mud$SPCourt == speciesMP$SPCourt[sp]),]
      for (rep in answ){  # rep=3
        mlist<-vector(mode = "list", length = length(pred))
        for (sa in sai){ # sa=1
          for (pre in pred){  # pre=1
            x <- paste(predict[pre,1],saison[sa,1],sep="")
            y <- reponse[rep,1]
            z <- "Zone" ;
            titreG <- paste(reponse[rep,2]," for " ,speciesMP$Taxon_SNa[sp]," vs ",predict[pre,2],
                         " (",predict[pre,3],")"," in ",saison[sa,2], " - ", prgm, sep="")
            dp <- ggscatterhist(df, x = x, y = y,color = z, 
                                title=titreG, 
                                ylab = paste(reponse[rep,2], " (",reponse[rep,3],")",sep=""), 
                                xlab = paste(predict[pre,2], " (",predict[pre,3],")"," in ",saison[sa,2],sep=""),
                                palette = colSpec(CSLN_unique$Zone),legend = "bottom")
            ggsave(paste(wdgraph,speciesMP$SPCourt[sp],"/Detail/",etude,"_GphRP_",speciesMP$SPCourt[sp],"_",predict$Couche[pre],"_",y,"_",x,".png",sep=""),plot = dp, width = 8, height = 6) #plot = dp,
            dp <- ggscatterhist(df, x = x, y = y,color = z, 
                                title="", ylab = "", 
                                xlab = paste(predict[pre,2], " (",predict[pre,3],")"," in ",saison[sa,2],sep=""),
                                palette = colSpec(CSLN_unique$Zone),legend = "none")
            assign(paste('dp', pre, sep=''), dp)
            mlist[[pre]] <- eval(parse(text = paste('dp', pre, sep='')))
        }
        if (length(pred)>1 ){
            titreG <- paste(predict$Couche[pre]," Data for ",speciesMP$Taxon_SNa[sp]," in ",saison[sa,2], " - ", prgm, sep="")
            nncol = 3; nnrow=ceiling(nrow(predict)/CSLN_unique$Zone)
            dp <- grid.arrange(grobs=mlist, ncol=CSLN_unique$Zone)
            # dp <- ggarrange(plotlist=mlist, ncol=nncol, nrow=nnrow, labels="AUTO",legend="bottom",common.legend = TRUE) #
            # METTRE LA GESTION DE LA LEGENDE DES COULEURS A TROUVER
            dp <- annotate_figure(dp,top = text_grob(titreG, face = "bold", size = 14), left= paste(reponse[rep,2], " (",reponse[rep,3],")",sep=""))+bgcolor("white")
            # ggsave(paste(wdgraph,speciesMP$SPCourt[sp],"/",etude,"_GphRP_",speciesMP$SPCourt[sp],"_",predict$Couche[pre],"_",y,saison[sa,1],".png",sep=""), plot = dp, width = 12, height = 8)
            # save_plot(paste(wdgraph,speciesMP$SPCourt[sp],"/",etude,"_GphRP_",speciesMP$SPCourt[sp],"_",predict$Couche[pre],"_",y,saison[sa,1],".png",sep=""),dp)
            png(file=paste(wdgraph,speciesMP$SPCourt[sp],"/",etude,"_GphRP_",speciesMP$SPCourt[sp],"_",y,saison[sa,1],".png",sep=""),width=1000, height=1200,bg = "white")
            print(dp)
            # dev.off()
          }
}}}

```

## GRAPHES MNT

Diagramme de densite des predicteurs

```{r}
#| label: calculation_4

df<-CSLN_mud
mlist<-vector(mode = "list", length = nrow(predictMNT))
for (pre in 1:nrow(predictMNT)){ #
  x <- predictMNT[pre,1]
  y <- "Annee"
  z <- "Zone"
  dp <- ggplot(df)+
    geom_density(aes(.data[[x]],fill=.data[[z]],colour=.data[[z]]), alpha=0.5, na.rm = TRUE) +
    xlab(paste(predictMNT[pre,2]," (",predictMNT[pre,3],")",sep="")) +
    theme(legend.position="bottom",legend.title = element_blank()) +
    Scale_col(CSLN_unique$Zone) + Scale_fill(CSLN_unique$Zone)
  assign(paste('dp', pre, sep=''), dp + theme(legend.position="none"))
  dp <- dp + ggtitle(paste("MNT Data Density", " - ", prgm, sep=""))
  mlist[[pre]] <- eval(parse(text = paste('dp', pre, sep='')))
  ggsave(paste(wdgraph,"Predictors/",etude,"_GphR_","MNT","_Density","_",predictMNT[pre,1],".png",sep=""), plot = dp, width = 12, height = 8)
}
if (nrow(predictMNT)>1 ){
  titreG <- paste("MNT Data Density", " - ", prgm, sep="")
  nncol = 3; nnrow=ceiling(nrow(predictMNT)/nncol)
  dp <- ggarrange(plotlist=mlist, ncol=nncol, nrow=nnrow, labels="AUTO",legend="bottom",common.legend = TRUE)#
  dp <- annotate_figure(dp, top = text_grob(titreG, face = "bold", size = 14))+bgcolor("white") ; dp
  ggsave(paste(wdgraph,etude,"_GphR_","MNT","_Density",".png",sep=""), plot = dp, width = 12, height = 6)
  # dev.off()
}

```

### Visualisation d'ensemble matriciel

```{r}
#| label: calculation_5

for (sp in spe){
  df <- CSLN_mud %>% filter(SPCourt == speciesMP$SPCourt[sp]) %>%
    select(predictMNT[,1],reponse[,1])
  colnames(df)<-c(predictMNT[,2],reponse[,2])
  titreG <- paste("MNT Predictors for ",speciesMP$Taxon_SNa[sp]," - ", prgm, sep="")
  # tp <- ggpairs(df, title=titreG) + 
  #   theme(plot.title = element_text(size=18,face="bold"),
  #         strip.text.x = element_text(size=12,face="bold"),
  #         strip.text.y = element_text(size=10,face="bold"))
  # ggsave(paste(wdgraph,speciesMP$SPCourt[sp],"/",etude,"_MatRP_",speciesMP$SPCourt[sp],saison[sa,1],".png",sep=""), plot = tp, width = 16, height = 9)
  # Matrice des correlations simple ----
  cp <- ggcorr(df, method = c("pairwise", "pearson"),
               low="#FC4E07", mid="white", high="#00AFBB", nbreaks = 5,# palette=RdBu,
               geom="tile", hjust = 0.85, angle = 0, layout.exp=3, size=4,
               label=TRUE,label_alpha = TRUE,label_round=2,label_size=4)+
    labs(title=paste("HMS Predictors for ",speciesMP$Taxon_SNa[sp]," in ",saison[sa,2]," - ", prgm, sep=""))+
    theme(plot.title = element_text(size=18,face="bold"))
  ggsave(paste(wdgraph,speciesMP$SPCourt[sp],"/",etude,"_Mat_",speciesMP$SPCourt[sp],"_MNT RepPredict corr",".png",sep=""), plot = cp, width = 9, height = 9)
}

```

Reponse vs Predicteurs avec densite en marge

```{r}
#| label: calculation_6

# for (sp in spe){
#   df <- CSLN_mud[which(CSLN_mud$SPCourt == speciesMP$SPCourt[sp]) & !is.na(CSLN_mud$Zone),]
#   for (rep in answ){
#     mlist<-vector(mode = "list", length = nrow(predictMNT))
#     for (pre in 1:nrow(predictMNT)){
#       x <- predictMNT[pre,1]
#       y <- reponse[rep,1]
#       z <- "Zone"
#       titreG <- paste(reponse[rep,2]," for " ,speciesMP$Taxon_SNa[sp]," vs ",predictMNT[pre,2],
#                       " (",predictMNT[pre,3],")", " - ", prgm, sep="")
#       dp <- ggscatterhist(df, x = x, y = y,color = z, 
#                           title=titreG, 
#                           ylab = paste(reponse[rep,2], " (",reponse[rep,3],")",sep=""), 
#                           xlab = paste(predictMNT[pre,2], " (",predictMNT[pre,3],")"," in ",saison[sa,2],sep=""),
#                           palette = colSpec(CSLN_unique$Zone),legend = "bottom")
#       ggsave(paste(wdgraph,speciesMP$SPCourt[sp],"/Detail/",etude,"_GphRP_",speciesMP$SPCourt[sp],"_",y,"_",x,".png",sep=""),plot = dp, width = 8, height = 6) #plot = dp,
#       dp <- ggscatterhist(df, x = x, y = y,color = z, 
#                           title="", ylab = "", 
#                           xlab = paste(predictMNT[pre,2], " (",predictMNT[pre,3],")"," in ",saison[sa,2],sep=""),
#                           palette = colSpec(CSLN_unique$Zone),legend = "none")
#       assign(paste('dp', pre, sep=''), dp)
#       mlist[[pre]] <- eval(parse(text = paste('dp', pre, sep='')))
#     }
#     titreG <- paste("MNT Data for ",speciesMP$Taxon_SNa[sp], " - ", prgm, sep="")
#     nncol = 3; nnrow=3#ceiling(nrow(predictMNT)/CSLN_unique$Zone)
#     dp <- grid.arrange(grobs=mlist, ncol=CSLN_unique$Zone)
#     dp <- annotate_figure(dp,top = text_grob(titreG, face = "bold", size = 14), left= paste(reponse[rep,2], " (",reponse[rep,3],")",sep=""))+bgcolor("white")
#     png(file=paste(wdgraph,speciesMP$SPCourt[sp],"/",etude,"_GphRP_",speciesMP$SPCourt[sp],"_MNT_",y,saison[sa,1],".png",sep=""),width=1000, height=600,bg = "white")
#     print(dp)
#     dev.off()
#   }}

```

COMPARAISON MUD CONTENT DE CSLN_mud ET SILT ET ARGILES DE MNT

```{r}
#| label: calculation_7

# # mud <-CSLN_mud[,c("idStationUnique","siltsArgiles","mud_content_med","Zone")]
# mud <-na.omit(mud)
# mud <-unique(mud)
# mud<-ggplot(mud, aes(siltsArgiles,mud_content_med,color=Zone))+
#   geom_point() +  Scale_col(length(CSLN_unique$Zone)) +
#   labs(title="MNT mud and silt content versus MARS3D mud content calculated via Csed",
#        caption="n=937",
#        y="Mud content from Mars3D", x="Mud content from MNT (%)")
# ggsave(paste(wdgraph,etude,"_GphR_","_Mud_MNT_MARS",".png",sep=""), plot = mud, width = 8, height = 6)

```

# Final actions and save

Rdata are saved in `rdataout`.

```{r}
#| label: finalsave_xls

```

```{r}
#| label: finalsave_r

beepr::beep(2)
```

# References {.unnumbered}
